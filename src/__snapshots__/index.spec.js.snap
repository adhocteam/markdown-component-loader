exports[`Webpack loader throws if a reserved static is specified 1`] = `"You can\'t supply a \`propTypes\` static! That name is reserved."`;

exports[`Webpack loader with a loader query of \`?\` for component example 0 renders as expected within React 1`] = `
Array [
  "propTypes",
]
`;

exports[`Webpack loader with a loader query of \`?\` for component example 0 renders as expected within React 2`] = `
<div
  className={undefined}
  style={undefined}>
  <h1>
    Test Document
  </h1>
  <p>
    [[toc]]
  </p>
  <h2>
    Basic Markdown Template
  </h2>
  <p>
    This is a basic Markdown template, with no interpolations going on.
  </p>
  <p>
    This should be
  </p>
  <ul>
    <li>
      easy and;
    </li>
    <li>
      predictable!
    </li>
  </ul>
  <h2>
    Here\'s a couple of hyperlinks
  </h2>
  <p>
    <a
      href="https://duckduckgo.com">
      https://duckduckgo.com
    </a>
     
    <a
      href="https://github.com">
      GitHub
    </a>
  </p>
  <h2>
    Here\'s a code snippet with no interpolations
  </h2>
  <pre>
    <code
      className="language-bash">
      npm install -g yarn
      <br />
    </code>
  </pre>
  <h2>
    Here\'s a code snippet with things which shouldn\'t be treated as interpolations
  </h2>
  <pre>
    <code
      className="language-bash">
      <span
        className="hljs-keyword">
        function
      </span>
       
      <span
        className="hljs-function">
        <span
          className="hljs-title">
          rbenv
        </span>
      </span>
      () 
      {
      <br />
        
      RUBY=blah
      <br />
      }
      <br />
    </code>
  </pre>
  <h2>
    Here\'s a paragraph with a simple interpolation
  </h2>
  <p>
    There are 
    0
     props being supplied to this component.
  </p>
  <h2>
    Here\'s a code snippet with a simple interpolation
  </h2>
  <pre>
    <code
      className="language-bash">
      <span
        className="hljs-keyword">
        function
      </span>
       
      <span
        className="hljs-function">
        <span
          className="hljs-title">
          rbenv
        </span>
      </span>
      () 
      {
      <br />
        
      RUBY=
      <br />
      }
      <br />
    </code>
  </pre>
  <h2>
    Here\'s an unhinted code snippet
  </h2>
  <pre>
    <code>
      <span
        className="hljs-keyword">
        the
      </span>
       quick brown fox jumps over 
      <span
        className="hljs-keyword">
        the
      </span>
       lazy dog
      <br />
    </code>
  </pre>
  <h2>
    Here\'s an unhinted snippet with no discernible language
  </h2>
  <pre>
    <code>
      )
      <span
        className="hljs-comment">
        ()
      </span>
      <span
        className="hljs-comment">
        (()
      </span>
      )
      <br />
    </code>
  </pre>
  <pre>
    <code
      className="language-bash">
      brew tap buildkite/buildkite
      <br />
      brew install --token=
      <span
        className="hljs-string">
        \'
        INSERT-YOUR-AGENT-TOKEN-HERE
        \'
      </span>
       buildkite-agent
      <br />
      <br />
      <span
        className="hljs-function">
        <span
          className="hljs-title">
          function
        </span>
      </span>
      () 
      {
      <br />
        
      ENV=
      <span
        className="hljs-string">
        \"foo_bar\"
      </span>
      <br />
      }
      <br />
    </code>
  </pre>
  <p>
    Let\'s also test interpolation inside other elements. 
    <code>
      foo bar
    </code>
  </p>
</div>
`;

exports[`Webpack loader with a loader query of \`?\` for component example 0 returns the expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.7.1
import React from \'react\';
import PropTypes from \'prop-types\';

MarkdownComponent.propTypes = {
  className: PropTypes.string,
  style: PropTypes.object
};

function MarkdownComponent(props) {
  const {className, style} = props;

  return (
    <div className={className} style={style}>
      <h1>Test Document</h1>
      <p>[[toc]]</p>
      <h2>Basic Markdown Template</h2>
      <p>This is a basic Markdown template, with no interpolations going on.</p>
      <p>This should be</p>
      <ul>
        <li>easy and;</li>
        <li>predictable!</li>
      </ul>
      <h2>Here\'s a couple of hyperlinks</h2>
      <p><a href=\"https://duckduckgo.com\">https://duckduckgo.com</a> <a href=\"https://github.com\">GitHub</a></p>
      <h2>Here\'s a code snippet with no interpolations</h2>
      <pre><code className=\"language-bash\">npm install -g yarn<br /></code></pre>
      <h2>Here\'s a code snippet with things which shouldn\'t be treated as interpolations</h2>
      <pre><code className=\"language-bash\"><span className=\"hljs-keyword\">function</span> <span className=\"hljs-function\"><span className=\"hljs-title\">rbenv</span></span>() {\"{\"}<br />{\"  \"}RUBY=blah<br />{\"}\"}<br /></code></pre>
      <h2>Here\'s a paragraph with a simple interpolation</h2>
      <p>There are {Object.keys(props).length} props being supplied to this component.</p>
      <h2>Here\'s a code snippet with a simple interpolation</h2>
      <pre><code className=\"language-bash\"><span className=\"hljs-keyword\">function</span> <span className=\"hljs-function\"><span className=\"hljs-title\">rbenv</span></span>() {\"{\"}<br />{\"  \"}RUBY={props.rubycontent}<br />{\"}\"}<br /></code></pre>
      <h2>Here\'s an unhinted code snippet</h2>
      <pre><code><span className=\"hljs-keyword\">the</span> quick brown fox jumps over <span className=\"hljs-keyword\">the</span> lazy dog<br /></code></pre>
      <h2>Here\'s an unhinted snippet with no discernible language</h2>
      <pre><code>)<span className=\"hljs-comment\">()</span><span className=\"hljs-comment\">(()</span>)<br /></code></pre>
      <pre><code className=\"language-bash\">brew tap buildkite/buildkite<br />brew install --token=<span className=\"hljs-string\">\'{props.token || \'INSERT-YOUR-AGENT-TOKEN-HERE\'}\'</span> buildkite-agent<br /><br /><span className=\"hljs-function\"><span className=\"hljs-title\">function</span></span>() {\"{\"}<br />{\"  \"}ENV=<span className=\"hljs-string\">\"foo_bar\"</span><br />{\"}\"}<br /></code></pre>
      <p>Let\'s also test interpolation inside other elements. <code>{ \"foo bar\" }</code></p>
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a loader query of \`?\` for component example 1 renders as expected within React 1`] = `
Array [
  "propTypes",
  "title",
  "myArray",
  "anObject",
]
`;

exports[`Webpack loader with a loader query of \`?\` for component example 1 renders as expected within React 2`] = `
<div
  className={undefined}
  style={undefined}>
  <h1>
    Markdown template with imports, static attributes and interpolations
  </h1>
  <p>
    This file includes some custom static attributes which should be reflected fine on the resultant object
  </p>
  <p>
    This is a 
    <em>
      Markdown Component
    </em>
     file. Here you can include JSX-style assignment expressions; this component was generated using version 
    0.7.1
     of 
    markdown-component-loader
    !
  </p>
  <p>
    We\'re importing foo, which is 
    bar
    .
  </p>
  <p>
    We\'re also adding a react component here: 
    <bar
      style={
        Object {
          "foo": "bar",
        }
      }
      url="https://github.com/ticky/markdown-component-loader/issues" />
  </p>
  <p>
    Another cool thing you can do is use JSX 
    <strong>
      directly
    </strong>
     - here’s an SVG element, used inline: 
    <svg
      style={
        Object {
          "display": "inline",
          "height": "1em",
        }
      }
      viewBox="0 0 304 290">
      <path
        d="M2,111 h300 l-242.7,176.3 92.7,-285.3 92.7,285.3 z"
        fill="none"
        stroke="currentColor"
        strokeWidth="16" />
    </svg>
    .
  </p>
</div>
`;

exports[`Webpack loader with a loader query of \`?\` for component example 1 returns the expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.7.1
import React from \'react\';
import PropTypes from \'prop-types\';
import foo from \'foo\';
import Bar from \'foo\';
import { bugs, name, version } from \'../package.json\';

MarkdownComponent.propTypes = {
  className: PropTypes.string,
  style: PropTypes.object
};

MarkdownComponent[\'title\'] = \'a custom title\';

MarkdownComponent[\'myArray\'] = [
  \'foo\',
  \'bar\'
];

MarkdownComponent[\'anObject\'] = {
  \'foo\': \'bar\'
};

function MarkdownComponent(props) {
  const {className, style} = props;

  return (
    <div className={className} style={style}>
      <h1>Markdown template with imports, static attributes and interpolations</h1>
      <p>This file includes some custom static attributes which should be reflected fine on the resultant object</p>
      <p>This is a <em>Markdown Component</em> file. Here you can include JSX-style assignment expressions; this component was generated using version { version } of { name }!</p>
      <p>We\'re importing foo, which is {foo}.</p>
      <p>We\'re also adding a react component here: {<Bar {...bugs} style={{ foo: \'bar\' }} />}</p>
      <p>Another cool thing you can do is use JSX <strong>directly</strong> - here’s an SVG element, used inline: { <svg style={{ display: \'inline\', height: \'1em\' }} viewBox=\"0 0 304 290\"><path fill=\"none\" stroke=\"currentColor\" strokeWidth=\"16\" d=\"M2,111 h300 l-242.7,176.3 92.7,-285.3 92.7,285.3 z\" /></svg> }.</p>
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a loader query of \`?\` for component example 2 renders as expected within React 1`] = `
Array [
  "propTypes",
]
`;

exports[`Webpack loader with a loader query of \`?\` for component example 2 renders as expected within React 2`] = `
<div
  className={undefined}
  style={undefined} />
`;

exports[`Webpack loader with a loader query of \`?\` for component example 2 returns the expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.7.1
import React from \'react\';
import PropTypes from \'prop-types\';

MarkdownComponent.propTypes = {
  className: PropTypes.string,
  style: PropTypes.object
};

function MarkdownComponent(props) {
  const {className, style} = props;

  return (
    <div className={className} style={style}>
      {/* no input given */}
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a loader query of \`?implicitlyImportReact=false&passElementProps=false\` for component example 0 renders as expected within React 1`] = `
Array [
  "propTypes",
]
`;

exports[`Webpack loader with a loader query of \`?implicitlyImportReact=false&passElementProps=false\` for component example 0 renders as expected within React 2`] = `
<div
  className={undefined}
  style={undefined}>
  <h1>
    Test Document
  </h1>
  <p>
    [[toc]]
  </p>
  <h2>
    Basic Markdown Template
  </h2>
  <p>
    This is a basic Markdown template, with no interpolations going on.
  </p>
  <p>
    This should be
  </p>
  <ul>
    <li>
      easy and;
    </li>
    <li>
      predictable!
    </li>
  </ul>
  <h2>
    Here's a couple of hyperlinks
  </h2>
  <p>
    <a
      href="https://duckduckgo.com">
      https://duckduckgo.com
    </a>
     
    <a
      href="https://github.com">
      GitHub
    </a>
  </p>
  <h2>
    Here's a code snippet with no interpolations
  </h2>
  <pre>
    <code
      className="language-bash">
      npm install -g yarn
      <br />
    </code>
  </pre>
  <h2>
    Here's a code snippet with things which shouldn't be treated as interpolations
  </h2>
  <pre>
    <code
      className="language-bash">
      <span
        className="hljs-keyword">
        function
      </span>
       
      <span
        className="hljs-function">
        <span
          className="hljs-title">
          rbenv
        </span>
      </span>
      () 
      {
      <br />
        
      RUBY=blah
      <br />
      }
      <br />
    </code>
  </pre>
  <h2>
    Here's a paragraph with a simple interpolation
  </h2>
  <p>
    There are 
    0
     props being supplied to this component.
  </p>
  <h2>
    Here's a code snippet with a simple interpolation
  </h2>
  <pre>
    <code
      className="language-bash">
      <span
        className="hljs-keyword">
        function
      </span>
       
      <span
        className="hljs-function">
        <span
          className="hljs-title">
          rbenv
        </span>
      </span>
      () 
      {
      <br />
        
      RUBY=
      <br />
      }
      <br />
    </code>
  </pre>
  <h2>
    Here's an unhinted code snippet
  </h2>
  <pre>
    <code>
      <span
        className="hljs-keyword">
        the
      </span>
       quick brown fox jumps over 
      <span
        className="hljs-keyword">
        the
      </span>
       lazy dog
      <br />
    </code>
  </pre>
  <h2>
    Here's an unhinted snippet with no discernible language
  </h2>
  <pre>
    <code>
      )
      <span
        className="hljs-comment">
        ()
      </span>
      <span
        className="hljs-comment">
        (()
      </span>
      )
      <br />
    </code>
  </pre>
  <pre>
    <code
      className="language-bash">
      brew tap buildkite/buildkite
      <br />
      brew install --token=
      <span
        className="hljs-string">
        '
        INSERT-YOUR-AGENT-TOKEN-HERE
        '
      </span>
       buildkite-agent
      <br />
      <br />
      <span
        className="hljs-function">
        <span
          className="hljs-title">
          function
        </span>
      </span>
      () 
      {
      <br />
        
      ENV=
      <span
        className="hljs-string">
        "foo_bar"
      </span>
      <br />
      }
      <br />
    </code>
  </pre>
  <p>
    Let's also test interpolation inside other elements. 
    <code>
      foo bar
    </code>
  </p>
</div>
`;

exports[`Webpack loader with a loader query of \`?implicitlyImportReact=false&passElementProps=false\` for component example 0 returns the expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.7.1

MarkdownComponent.propTypes = {
  className: PropTypes.string,
  style: PropTypes.object
};

function MarkdownComponent(props) {
  const {className, style} = props;

  return (
    <div className={className} style={style}>
      <h1>Test Document</h1>
      <p>[[toc]]</p>
      <h2>Basic Markdown Template</h2>
      <p>This is a basic Markdown template, with no interpolations going on.</p>
      <p>This should be</p>
      <ul>
        <li>easy and;</li>
        <li>predictable!</li>
      </ul>
      <h2>Here\'s a couple of hyperlinks</h2>
      <p><a href=\"https://duckduckgo.com\">https://duckduckgo.com</a> <a href=\"https://github.com\">GitHub</a></p>
      <h2>Here\'s a code snippet with no interpolations</h2>
      <pre><code className=\"language-bash\">npm install -g yarn<br /></code></pre>
      <h2>Here\'s a code snippet with things which shouldn\'t be treated as interpolations</h2>
      <pre><code className=\"language-bash\"><span className=\"hljs-keyword\">function</span> <span className=\"hljs-function\"><span className=\"hljs-title\">rbenv</span></span>() {\"{\"}<br />{\"  \"}RUBY=blah<br />{\"}\"}<br /></code></pre>
      <h2>Here\'s a paragraph with a simple interpolation</h2>
      <p>There are {Object.keys(props).length} props being supplied to this component.</p>
      <h2>Here\'s a code snippet with a simple interpolation</h2>
      <pre><code className=\"language-bash\"><span className=\"hljs-keyword\">function</span> <span className=\"hljs-function\"><span className=\"hljs-title\">rbenv</span></span>() {\"{\"}<br />{\"  \"}RUBY={props.rubycontent}<br />{\"}\"}<br /></code></pre>
      <h2>Here\'s an unhinted code snippet</h2>
      <pre><code><span className=\"hljs-keyword\">the</span> quick brown fox jumps over <span className=\"hljs-keyword\">the</span> lazy dog<br /></code></pre>
      <h2>Here\'s an unhinted snippet with no discernible language</h2>
      <pre><code>)<span className=\"hljs-comment\">()</span><span className=\"hljs-comment\">(()</span>)<br /></code></pre>
      <pre><code className=\"language-bash\">brew tap buildkite/buildkite<br />brew install --token=<span className=\"hljs-string\">\'{props.token || \'INSERT-YOUR-AGENT-TOKEN-HERE\'}\'</span> buildkite-agent<br /><br /><span className=\"hljs-function\"><span className=\"hljs-title\">function</span></span>() {\"{\"}<br />{\"  \"}ENV=<span className=\"hljs-string\">\"foo_bar\"</span><br />{\"}\"}<br /></code></pre>
      <p>Let\'s also test interpolation inside other elements. <code>{ \"foo bar\" }</code></p>
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a loader query of \`?implicitlyImportReact=false&passElementProps=false\` for component example 1 renders as expected within React 1`] = `
Array [
  "propTypes",
  "title",
  "myArray",
  "anObject",
]
`;

exports[`Webpack loader with a loader query of \`?implicitlyImportReact=false&passElementProps=false\` for component example 1 renders as expected within React 2`] = `
<div
  className={undefined}
  style={undefined}>
  <h1>
    Markdown template with imports, static attributes and interpolations
  </h1>
  <p>
    This file includes some custom static attributes which should be reflected fine on the resultant object
  </p>
  <p>
    This is a 
    <em>
      Markdown Component
    </em>
     file. Here you can include JSX-style assignment expressions; this component was generated using version 
    0.7.1
     of 
    markdown-component-loader
    !
  </p>
  <p>
    We're importing foo, which is 
    bar
    .
  </p>
  <p>
    We're also adding a react component here: 
    <bar
      style={
        Object {
          "foo": "bar",
        }
      }
      url="https://github.com/ticky/markdown-component-loader/issues" />
  </p>
  <p>
    Another cool thing you can do is use JSX 
    <strong>
      directly
    </strong>
     - here’s an SVG element, used inline: 
    <svg
      style={
        Object {
          "display": "inline",
          "height": "1em",
        }
      }
      viewBox="0 0 304 290">
      <path
        d="M2,111 h300 l-242.7,176.3 92.7,-285.3 92.7,285.3 z"
        fill="none"
        stroke="currentColor"
        strokeWidth="16" />
    </svg>
    .
  </p>
</div>
`;

exports[`Webpack loader with a loader query of \`?implicitlyImportReact=false&passElementProps=false\` for component example 1 returns the expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.7.1
import foo from \'foo\';
import Bar from \'foo\';
import { bugs, name, version } from \'../package.json\';

MarkdownComponent.propTypes = {
  className: PropTypes.string,
  style: PropTypes.object
};

MarkdownComponent[\'title\'] = \'a custom title\';

MarkdownComponent[\'myArray\'] = [
  \'foo\',
  \'bar\'
];

MarkdownComponent[\'anObject\'] = {
  \'foo\': \'bar\'
};

function MarkdownComponent(props) {
  const {className, style} = props;

  return (
    <div className={className} style={style}>
      <h1>Markdown template with imports, static attributes and interpolations</h1>
      <p>This file includes some custom static attributes which should be reflected fine on the resultant object</p>
      <p>This is a <em>Markdown Component</em> file. Here you can include JSX-style assignment expressions; this component was generated using version { version } of { name }!</p>
      <p>We\'re importing foo, which is {foo}.</p>
      <p>We\'re also adding a react component here: {<Bar {...bugs} style={{ foo: \'bar\' }} />}</p>
      <p>Another cool thing you can do is use JSX <strong>directly</strong> - here’s an SVG element, used inline: { <svg style={{ display: \'inline\', height: \'1em\' }} viewBox=\"0 0 304 290\"><path fill=\"none\" stroke=\"currentColor\" strokeWidth=\"16\" d=\"M2,111 h300 l-242.7,176.3 92.7,-285.3 92.7,285.3 z\" /></svg> }.</p>
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a loader query of \`?implicitlyImportReact=false&passElementProps=false\` for component example 2 renders as expected within React 1`] = `
Array [
  "propTypes",
]
`;

exports[`Webpack loader with a loader query of \`?implicitlyImportReact=false&passElementProps=false\` for component example 2 renders as expected within React 2`] = `
<div
  className={undefined}
  style={undefined} />
`;

exports[`Webpack loader with a loader query of \`?implicitlyImportReact=false&passElementProps=false\` for component example 2 returns the expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.7.1

MarkdownComponent.propTypes = {
  className: PropTypes.string,
  style: PropTypes.object
};

function MarkdownComponent(props) {
  const {className, style} = props;

  return (
    <div className={className} style={style}>
      {/* no input given */}
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a loader query of \`?implicitlyImportReact=false&passElementProps=true\` for component example 0 renders as expected within React 1`] = `
Array [
  "propTypes",
  "defaultProps",
]
`;

exports[`Webpack loader with a loader query of \`?implicitlyImportReact=false&passElementProps=true\` for component example 0 renders as expected within React 2`] = `
<div
  className={undefined}
  style={undefined}>
  <h1>
    Test Document
  </h1>
  <p>
    [[toc]]
  </p>
  <h2>
    Basic Markdown Template
  </h2>
  <p>
    This is a basic Markdown template, with no interpolations going on.
  </p>
  <p>
    This should be
  </p>
  <ul>
    <li>
      easy and;
    </li>
    <li>
      predictable!
    </li>
  </ul>
  <h2>
    Here's a couple of hyperlinks
  </h2>
  <p>
    <a
      href="https://duckduckgo.com">
      https://duckduckgo.com
    </a>
     
    <a
      href="https://github.com">
      GitHub
    </a>
  </p>
  <h2>
    Here's a code snippet with no interpolations
  </h2>
  <pre>
    <code
      className="language-bash">
      npm install -g yarn
      <br />
    </code>
  </pre>
  <h2>
    Here's a code snippet with things which shouldn't be treated as interpolations
  </h2>
  <pre>
    <code
      className="language-bash">
      <span
        className="hljs-keyword">
        function
      </span>
       
      <span
        className="hljs-function">
        <span
          className="hljs-title">
          rbenv
        </span>
      </span>
      () 
      {
      <br />
        
      RUBY=blah
      <br />
      }
      <br />
    </code>
  </pre>
  <h2>
    Here's a paragraph with a simple interpolation
  </h2>
  <p>
    There are 
    1
     props being supplied to this component.
  </p>
  <h2>
    Here's a code snippet with a simple interpolation
  </h2>
  <pre>
    <code
      className="language-bash">
      <span
        className="hljs-keyword">
        function
      </span>
       
      <span
        className="hljs-function">
        <span
          className="hljs-title">
          rbenv
        </span>
      </span>
      () 
      {
      <br />
        
      RUBY=
      <br />
      }
      <br />
    </code>
  </pre>
  <h2>
    Here's an unhinted code snippet
  </h2>
  <pre>
    <code>
      <span
        className="hljs-keyword">
        the
      </span>
       quick brown fox jumps over 
      <span
        className="hljs-keyword">
        the
      </span>
       lazy dog
      <br />
    </code>
  </pre>
  <h2>
    Here's an unhinted snippet with no discernible language
  </h2>
  <pre>
    <code>
      )
      <span
        className="hljs-comment">
        ()
      </span>
      <span
        className="hljs-comment">
        (()
      </span>
      )
      <br />
    </code>
  </pre>
  <pre>
    <code
      className="language-bash">
      brew tap buildkite/buildkite
      <br />
      brew install --token=
      <span
        className="hljs-string">
        '
        INSERT-YOUR-AGENT-TOKEN-HERE
        '
      </span>
       buildkite-agent
      <br />
      <br />
      <span
        className="hljs-function">
        <span
          className="hljs-title">
          function
        </span>
      </span>
      () 
      {
      <br />
        
      ENV=
      <span
        className="hljs-string">
        "foo_bar"
      </span>
      <br />
      }
      <br />
    </code>
  </pre>
  <p>
    Let's also test interpolation inside other elements. 
    <code>
      foo bar
    </code>
  </p>
</div>
`;

exports[`Webpack loader with a loader query of \`?implicitlyImportReact=false&passElementProps=true\` for component example 0 returns the expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.7.1

MarkdownComponent.propTypes = {
  className: PropTypes.string,
  style: PropTypes.object,
  elementProps: PropTypes.object
};

MarkdownComponent.defaultProps = {
  elementProps: {}
};

function MarkdownComponent(props) {
  const {className, style, elementProps} = props;

  return (
    <div className={className} style={style}>
      <h1 {...elementProps[\'h1\']}>Test Document</h1>
      <p {...elementProps[\'p\']}>[[toc]]</p>
      <h2 {...elementProps[\'h2\']}>Basic Markdown Template</h2>
      <p {...elementProps[\'p\']}>This is a basic Markdown template, with no interpolations going on.</p>
      <p {...elementProps[\'p\']}>This should be</p>
      <ul {...elementProps[\'ul\']}>
        <li {...elementProps[\'li\']}>easy and;</li>
        <li {...elementProps[\'li\']}>predictable!</li>
      </ul>
      <h2 {...elementProps[\'h2\']}>Here\'s a couple of hyperlinks</h2>
      <p {...elementProps[\'p\']}><a {...elementProps[\'a\']} href=\"https://duckduckgo.com\">https://duckduckgo.com</a> <a {...elementProps[\'a\']} href=\"https://github.com\">GitHub</a></p>
      <h2 {...elementProps[\'h2\']}>Here\'s a code snippet with no interpolations</h2>
      <pre {...elementProps[\'pre\']}><code {...elementProps[\'code\']} className=\"language-bash\">npm install -g yarn<br {...elementProps[\'br\']} /></code></pre>
      <h2 {...elementProps[\'h2\']}>Here\'s a code snippet with things which shouldn\'t be treated as interpolations</h2>
      <pre {...elementProps[\'pre\']}><code {...elementProps[\'code\']} className=\"language-bash\"><span {...elementProps[\'span\']} className=\"hljs-keyword\">function</span> <span {...elementProps[\'span\']} className=\"hljs-function\"><span {...elementProps[\'span\']} className=\"hljs-title\">rbenv</span></span>() {\"{\"}<br {...elementProps[\'br\']} />{\"  \"}RUBY=blah<br {...elementProps[\'br\']} />{\"}\"}<br {...elementProps[\'br\']} /></code></pre>
      <h2 {...elementProps[\'h2\']}>Here\'s a paragraph with a simple interpolation</h2>
      <p {...elementProps[\'p\']}>There are {Object.keys(props).length} props being supplied to this component.</p>
      <h2 {...elementProps[\'h2\']}>Here\'s a code snippet with a simple interpolation</h2>
      <pre {...elementProps[\'pre\']}><code {...elementProps[\'code\']} className=\"language-bash\"><span {...elementProps[\'span\']} className=\"hljs-keyword\">function</span> <span {...elementProps[\'span\']} className=\"hljs-function\"><span {...elementProps[\'span\']} className=\"hljs-title\">rbenv</span></span>() {\"{\"}<br {...elementProps[\'br\']} />{\"  \"}RUBY={props.rubycontent}<br {...elementProps[\'br\']} />{\"}\"}<br {...elementProps[\'br\']} /></code></pre>
      <h2 {...elementProps[\'h2\']}>Here\'s an unhinted code snippet</h2>
      <pre {...elementProps[\'pre\']}><code {...elementProps[\'code\']}><span {...elementProps[\'span\']} className=\"hljs-keyword\">the</span> quick brown fox jumps over <span {...elementProps[\'span\']} className=\"hljs-keyword\">the</span> lazy dog<br {...elementProps[\'br\']} /></code></pre>
      <h2 {...elementProps[\'h2\']}>Here\'s an unhinted snippet with no discernible language</h2>
      <pre {...elementProps[\'pre\']}><code {...elementProps[\'code\']}>)<span {...elementProps[\'span\']} className=\"hljs-comment\">()</span><span {...elementProps[\'span\']} className=\"hljs-comment\">(()</span>)<br {...elementProps[\'br\']} /></code></pre>
      <pre {...elementProps[\'pre\']}><code {...elementProps[\'code\']} className=\"language-bash\">brew tap buildkite/buildkite<br {...elementProps[\'br\']} />brew install --token=<span {...elementProps[\'span\']} className=\"hljs-string\">\'{props.token || \'INSERT-YOUR-AGENT-TOKEN-HERE\'}\'</span> buildkite-agent<br {...elementProps[\'br\']} /><br {...elementProps[\'br\']} /><span {...elementProps[\'span\']} className=\"hljs-function\"><span {...elementProps[\'span\']} className=\"hljs-title\">function</span></span>() {\"{\"}<br {...elementProps[\'br\']} />{\"  \"}ENV=<span {...elementProps[\'span\']} className=\"hljs-string\">\"foo_bar\"</span><br {...elementProps[\'br\']} />{\"}\"}<br {...elementProps[\'br\']} /></code></pre>
      <p {...elementProps[\'p\']}>Let\'s also test interpolation inside other elements. <code {...elementProps[\'code\']}>{ \"foo bar\" }</code></p>
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a loader query of \`?implicitlyImportReact=false&passElementProps=true\` for component example 1 renders as expected within React 1`] = `
Array [
  "propTypes",
  "defaultProps",
  "title",
  "myArray",
  "anObject",
]
`;

exports[`Webpack loader with a loader query of \`?implicitlyImportReact=false&passElementProps=true\` for component example 1 renders as expected within React 2`] = `
<div
  className={undefined}
  style={undefined}>
  <h1>
    Markdown template with imports, static attributes and interpolations
  </h1>
  <p>
    This file includes some custom static attributes which should be reflected fine on the resultant object
  </p>
  <p>
    This is a 
    <em>
      Markdown Component
    </em>
     file. Here you can include JSX-style assignment expressions; this component was generated using version 
    0.7.1
     of 
    markdown-component-loader
    !
  </p>
  <p>
    We're importing foo, which is 
    bar
    .
  </p>
  <p>
    We're also adding a react component here: 
    <bar
      style={
        Object {
          "foo": "bar",
        }
      }
      url="https://github.com/ticky/markdown-component-loader/issues" />
  </p>
  <p>
    Another cool thing you can do is use JSX 
    <strong>
      directly
    </strong>
     - here’s an SVG element, used inline: 
    <svg
      style={
        Object {
          "display": "inline",
          "height": "1em",
        }
      }
      viewBox="0 0 304 290">
      <path
        d="M2,111 h300 l-242.7,176.3 92.7,-285.3 92.7,285.3 z"
        fill="none"
        stroke="currentColor"
        strokeWidth="16" />
    </svg>
    .
  </p>
</div>
`;

exports[`Webpack loader with a loader query of \`?implicitlyImportReact=false&passElementProps=true\` for component example 1 returns the expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.7.1
import foo from \'foo\';
import Bar from \'foo\';
import { bugs, name, version } from \'../package.json\';

MarkdownComponent.propTypes = {
  className: PropTypes.string,
  style: PropTypes.object,
  elementProps: PropTypes.object
};

MarkdownComponent.defaultProps = {
  elementProps: {}
};

MarkdownComponent[\'title\'] = \'a custom title\';

MarkdownComponent[\'myArray\'] = [
  \'foo\',
  \'bar\'
];

MarkdownComponent[\'anObject\'] = {
  \'foo\': \'bar\'
};

function MarkdownComponent(props) {
  const {className, style, elementProps} = props;

  return (
    <div className={className} style={style}>
      <h1 {...elementProps[\'h1\']}>Markdown template with imports, static attributes and interpolations</h1>
      <p {...elementProps[\'p\']}>This file includes some custom static attributes which should be reflected fine on the resultant object</p>
      <p {...elementProps[\'p\']}>This is a <em {...elementProps[\'em\']}>Markdown Component</em> file. Here you can include JSX-style assignment expressions; this component was generated using version { version } of { name }!</p>
      <p {...elementProps[\'p\']}>We\'re importing foo, which is {foo}.</p>
      <p {...elementProps[\'p\']}>We\'re also adding a react component here: {<Bar {...bugs} style={{ foo: \'bar\' }} />}</p>
      <p {...elementProps[\'p\']}>Another cool thing you can do is use JSX <strong {...elementProps[\'strong\']}>directly</strong> - here’s an SVG element, used inline: { <svg {...elementProps[\'svg\']} style={{ display: \'inline\', height: \'1em\' }} viewBox=\"0 0 304 290\"><path {...elementProps[\'path\']} fill=\"none\" stroke=\"currentColor\" strokeWidth=\"16\" d=\"M2,111 h300 l-242.7,176.3 92.7,-285.3 92.7,285.3 z\" /></svg> }.</p>
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a loader query of \`?implicitlyImportReact=false&passElementProps=true\` for component example 2 renders as expected within React 1`] = `
Array [
  "propTypes",
  "defaultProps",
]
`;

exports[`Webpack loader with a loader query of \`?implicitlyImportReact=false&passElementProps=true\` for component example 2 renders as expected within React 2`] = `
<div
  className={undefined}
  style={undefined} />
`;

exports[`Webpack loader with a loader query of \`?implicitlyImportReact=false&passElementProps=true\` for component example 2 returns the expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.7.1

MarkdownComponent.propTypes = {
  className: PropTypes.string,
  style: PropTypes.object,
  elementProps: PropTypes.object
};

MarkdownComponent.defaultProps = {
  elementProps: {}
};

function MarkdownComponent(props) {
  const {className, style, elementProps} = props;

  return (
    <div className={className} style={style}>
      {/* no input given */}
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a loader query of \`?implicitlyImportReact=false\` for component example 0 renders as expected within React 1`] = `
Array [
  "propTypes",
]
`;

exports[`Webpack loader with a loader query of \`?implicitlyImportReact=false\` for component example 0 renders as expected within React 2`] = `
<div
  className={undefined}
  style={undefined}>
  <h1>
    Test Document
  </h1>
  <p>
    [[toc]]
  </p>
  <h2>
    Basic Markdown Template
  </h2>
  <p>
    This is a basic Markdown template, with no interpolations going on.
  </p>
  <p>
    This should be
  </p>
  <ul>
    <li>
      easy and;
    </li>
    <li>
      predictable!
    </li>
  </ul>
  <h2>
    Here's a couple of hyperlinks
  </h2>
  <p>
    <a
      href="https://duckduckgo.com">
      https://duckduckgo.com
    </a>
     
    <a
      href="https://github.com">
      GitHub
    </a>
  </p>
  <h2>
    Here's a code snippet with no interpolations
  </h2>
  <pre>
    <code
      className="language-bash">
      npm install -g yarn
      <br />
    </code>
  </pre>
  <h2>
    Here's a code snippet with things which shouldn't be treated as interpolations
  </h2>
  <pre>
    <code
      className="language-bash">
      <span
        className="hljs-keyword">
        function
      </span>
       
      <span
        className="hljs-function">
        <span
          className="hljs-title">
          rbenv
        </span>
      </span>
      () 
      {
      <br />
        
      RUBY=blah
      <br />
      }
      <br />
    </code>
  </pre>
  <h2>
    Here's a paragraph with a simple interpolation
  </h2>
  <p>
    There are 
    0
     props being supplied to this component.
  </p>
  <h2>
    Here's a code snippet with a simple interpolation
  </h2>
  <pre>
    <code
      className="language-bash">
      <span
        className="hljs-keyword">
        function
      </span>
       
      <span
        className="hljs-function">
        <span
          className="hljs-title">
          rbenv
        </span>
      </span>
      () 
      {
      <br />
        
      RUBY=
      <br />
      }
      <br />
    </code>
  </pre>
  <h2>
    Here's an unhinted code snippet
  </h2>
  <pre>
    <code>
      <span
        className="hljs-keyword">
        the
      </span>
       quick brown fox jumps over 
      <span
        className="hljs-keyword">
        the
      </span>
       lazy dog
      <br />
    </code>
  </pre>
  <h2>
    Here's an unhinted snippet with no discernible language
  </h2>
  <pre>
    <code>
      )
      <span
        className="hljs-comment">
        ()
      </span>
      <span
        className="hljs-comment">
        (()
      </span>
      )
      <br />
    </code>
  </pre>
  <pre>
    <code
      className="language-bash">
      brew tap buildkite/buildkite
      <br />
      brew install --token=
      <span
        className="hljs-string">
        '
        INSERT-YOUR-AGENT-TOKEN-HERE
        '
      </span>
       buildkite-agent
      <br />
      <br />
      <span
        className="hljs-function">
        <span
          className="hljs-title">
          function
        </span>
      </span>
      () 
      {
      <br />
        
      ENV=
      <span
        className="hljs-string">
        "foo_bar"
      </span>
      <br />
      }
      <br />
    </code>
  </pre>
  <p>
    Let's also test interpolation inside other elements. 
    <code>
      foo bar
    </code>
  </p>
</div>
`;

exports[`Webpack loader with a loader query of \`?implicitlyImportReact=false\` for component example 0 returns the expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.7.1

MarkdownComponent.propTypes = {
  className: PropTypes.string,
  style: PropTypes.object
};

function MarkdownComponent(props) {
  const {className, style} = props;

  return (
    <div className={className} style={style}>
      <h1>Test Document</h1>
      <p>[[toc]]</p>
      <h2>Basic Markdown Template</h2>
      <p>This is a basic Markdown template, with no interpolations going on.</p>
      <p>This should be</p>
      <ul>
        <li>easy and;</li>
        <li>predictable!</li>
      </ul>
      <h2>Here\'s a couple of hyperlinks</h2>
      <p><a href=\"https://duckduckgo.com\">https://duckduckgo.com</a> <a href=\"https://github.com\">GitHub</a></p>
      <h2>Here\'s a code snippet with no interpolations</h2>
      <pre><code className=\"language-bash\">npm install -g yarn<br /></code></pre>
      <h2>Here\'s a code snippet with things which shouldn\'t be treated as interpolations</h2>
      <pre><code className=\"language-bash\"><span className=\"hljs-keyword\">function</span> <span className=\"hljs-function\"><span className=\"hljs-title\">rbenv</span></span>() {\"{\"}<br />{\"  \"}RUBY=blah<br />{\"}\"}<br /></code></pre>
      <h2>Here\'s a paragraph with a simple interpolation</h2>
      <p>There are {Object.keys(props).length} props being supplied to this component.</p>
      <h2>Here\'s a code snippet with a simple interpolation</h2>
      <pre><code className=\"language-bash\"><span className=\"hljs-keyword\">function</span> <span className=\"hljs-function\"><span className=\"hljs-title\">rbenv</span></span>() {\"{\"}<br />{\"  \"}RUBY={props.rubycontent}<br />{\"}\"}<br /></code></pre>
      <h2>Here\'s an unhinted code snippet</h2>
      <pre><code><span className=\"hljs-keyword\">the</span> quick brown fox jumps over <span className=\"hljs-keyword\">the</span> lazy dog<br /></code></pre>
      <h2>Here\'s an unhinted snippet with no discernible language</h2>
      <pre><code>)<span className=\"hljs-comment\">()</span><span className=\"hljs-comment\">(()</span>)<br /></code></pre>
      <pre><code className=\"language-bash\">brew tap buildkite/buildkite<br />brew install --token=<span className=\"hljs-string\">\'{props.token || \'INSERT-YOUR-AGENT-TOKEN-HERE\'}\'</span> buildkite-agent<br /><br /><span className=\"hljs-function\"><span className=\"hljs-title\">function</span></span>() {\"{\"}<br />{\"  \"}ENV=<span className=\"hljs-string\">\"foo_bar\"</span><br />{\"}\"}<br /></code></pre>
      <p>Let\'s also test interpolation inside other elements. <code>{ \"foo bar\" }</code></p>
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a loader query of \`?implicitlyImportReact=false\` for component example 1 renders as expected within React 1`] = `
Array [
  "propTypes",
  "title",
  "myArray",
  "anObject",
]
`;

exports[`Webpack loader with a loader query of \`?implicitlyImportReact=false\` for component example 1 renders as expected within React 2`] = `
<div
  className={undefined}
  style={undefined}>
  <h1>
    Markdown template with imports, static attributes and interpolations
  </h1>
  <p>
    This file includes some custom static attributes which should be reflected fine on the resultant object
  </p>
  <p>
    This is a 
    <em>
      Markdown Component
    </em>
     file. Here you can include JSX-style assignment expressions; this component was generated using version 
    0.7.1
     of 
    markdown-component-loader
    !
  </p>
  <p>
    We're importing foo, which is 
    bar
    .
  </p>
  <p>
    We're also adding a react component here: 
    <bar
      style={
        Object {
          "foo": "bar",
        }
      }
      url="https://github.com/ticky/markdown-component-loader/issues" />
  </p>
  <p>
    Another cool thing you can do is use JSX 
    <strong>
      directly
    </strong>
     - here’s an SVG element, used inline: 
    <svg
      style={
        Object {
          "display": "inline",
          "height": "1em",
        }
      }
      viewBox="0 0 304 290">
      <path
        d="M2,111 h300 l-242.7,176.3 92.7,-285.3 92.7,285.3 z"
        fill="none"
        stroke="currentColor"
        strokeWidth="16" />
    </svg>
    .
  </p>
</div>
`;

exports[`Webpack loader with a loader query of \`?implicitlyImportReact=false\` for component example 1 returns the expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.7.1
import foo from \'foo\';
import Bar from \'foo\';
import { bugs, name, version } from \'../package.json\';

MarkdownComponent.propTypes = {
  className: PropTypes.string,
  style: PropTypes.object
};

MarkdownComponent[\'title\'] = \'a custom title\';

MarkdownComponent[\'myArray\'] = [
  \'foo\',
  \'bar\'
];

MarkdownComponent[\'anObject\'] = {
  \'foo\': \'bar\'
};

function MarkdownComponent(props) {
  const {className, style} = props;

  return (
    <div className={className} style={style}>
      <h1>Markdown template with imports, static attributes and interpolations</h1>
      <p>This file includes some custom static attributes which should be reflected fine on the resultant object</p>
      <p>This is a <em>Markdown Component</em> file. Here you can include JSX-style assignment expressions; this component was generated using version { version } of { name }!</p>
      <p>We\'re importing foo, which is {foo}.</p>
      <p>We\'re also adding a react component here: {<Bar {...bugs} style={{ foo: \'bar\' }} />}</p>
      <p>Another cool thing you can do is use JSX <strong>directly</strong> - here’s an SVG element, used inline: { <svg style={{ display: \'inline\', height: \'1em\' }} viewBox=\"0 0 304 290\"><path fill=\"none\" stroke=\"currentColor\" strokeWidth=\"16\" d=\"M2,111 h300 l-242.7,176.3 92.7,-285.3 92.7,285.3 z\" /></svg> }.</p>
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a loader query of \`?implicitlyImportReact=false\` for component example 2 renders as expected within React 1`] = `
Array [
  "propTypes",
]
`;

exports[`Webpack loader with a loader query of \`?implicitlyImportReact=false\` for component example 2 renders as expected within React 2`] = `
<div
  className={undefined}
  style={undefined} />
`;

exports[`Webpack loader with a loader query of \`?implicitlyImportReact=false\` for component example 2 returns the expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.7.1

MarkdownComponent.propTypes = {
  className: PropTypes.string,
  style: PropTypes.object
};

function MarkdownComponent(props) {
  const {className, style} = props;

  return (
    <div className={className} style={style}>
      {/* no input given */}
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a loader query of \`?implicitlyImportReact=true&passElementProps=false\` for component example 0 renders as expected within React 1`] = `
Array [
  "propTypes",
]
`;

exports[`Webpack loader with a loader query of \`?implicitlyImportReact=true&passElementProps=false\` for component example 0 renders as expected within React 2`] = `
<div
  className={undefined}
  style={undefined}>
  <h1>
    Test Document
  </h1>
  <p>
    [[toc]]
  </p>
  <h2>
    Basic Markdown Template
  </h2>
  <p>
    This is a basic Markdown template, with no interpolations going on.
  </p>
  <p>
    This should be
  </p>
  <ul>
    <li>
      easy and;
    </li>
    <li>
      predictable!
    </li>
  </ul>
  <h2>
    Here\'s a couple of hyperlinks
  </h2>
  <p>
    <a
      href="https://duckduckgo.com">
      https://duckduckgo.com
    </a>
     
    <a
      href="https://github.com">
      GitHub
    </a>
  </p>
  <h2>
    Here\'s a code snippet with no interpolations
  </h2>
  <pre>
    <code
      className="language-bash">
      npm install -g yarn
      <br />
    </code>
  </pre>
  <h2>
    Here\'s a code snippet with things which shouldn\'t be treated as interpolations
  </h2>
  <pre>
    <code
      className="language-bash">
      <span
        className="hljs-keyword">
        function
      </span>
       
      <span
        className="hljs-function">
        <span
          className="hljs-title">
          rbenv
        </span>
      </span>
      () 
      {
      <br />
        
      RUBY=blah
      <br />
      }
      <br />
    </code>
  </pre>
  <h2>
    Here\'s a paragraph with a simple interpolation
  </h2>
  <p>
    There are 
    0
     props being supplied to this component.
  </p>
  <h2>
    Here\'s a code snippet with a simple interpolation
  </h2>
  <pre>
    <code
      className="language-bash">
      <span
        className="hljs-keyword">
        function
      </span>
       
      <span
        className="hljs-function">
        <span
          className="hljs-title">
          rbenv
        </span>
      </span>
      () 
      {
      <br />
        
      RUBY=
      <br />
      }
      <br />
    </code>
  </pre>
  <h2>
    Here\'s an unhinted code snippet
  </h2>
  <pre>
    <code>
      <span
        className="hljs-keyword">
        the
      </span>
       quick brown fox jumps over 
      <span
        className="hljs-keyword">
        the
      </span>
       lazy dog
      <br />
    </code>
  </pre>
  <h2>
    Here\'s an unhinted snippet with no discernible language
  </h2>
  <pre>
    <code>
      )
      <span
        className="hljs-comment">
        ()
      </span>
      <span
        className="hljs-comment">
        (()
      </span>
      )
      <br />
    </code>
  </pre>
  <pre>
    <code
      className="language-bash">
      brew tap buildkite/buildkite
      <br />
      brew install --token=
      <span
        className="hljs-string">
        \'
        INSERT-YOUR-AGENT-TOKEN-HERE
        \'
      </span>
       buildkite-agent
      <br />
      <br />
      <span
        className="hljs-function">
        <span
          className="hljs-title">
          function
        </span>
      </span>
      () 
      {
      <br />
        
      ENV=
      <span
        className="hljs-string">
        \"foo_bar\"
      </span>
      <br />
      }
      <br />
    </code>
  </pre>
  <p>
    Let\'s also test interpolation inside other elements. 
    <code>
      foo bar
    </code>
  </p>
</div>
`;

exports[`Webpack loader with a loader query of \`?implicitlyImportReact=true&passElementProps=false\` for component example 0 returns the expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.7.1
import React from \'react\';
import PropTypes from \'prop-types\';

MarkdownComponent.propTypes = {
  className: PropTypes.string,
  style: PropTypes.object
};

function MarkdownComponent(props) {
  const {className, style} = props;

  return (
    <div className={className} style={style}>
      <h1>Test Document</h1>
      <p>[[toc]]</p>
      <h2>Basic Markdown Template</h2>
      <p>This is a basic Markdown template, with no interpolations going on.</p>
      <p>This should be</p>
      <ul>
        <li>easy and;</li>
        <li>predictable!</li>
      </ul>
      <h2>Here\'s a couple of hyperlinks</h2>
      <p><a href=\"https://duckduckgo.com\">https://duckduckgo.com</a> <a href=\"https://github.com\">GitHub</a></p>
      <h2>Here\'s a code snippet with no interpolations</h2>
      <pre><code className=\"language-bash\">npm install -g yarn<br /></code></pre>
      <h2>Here\'s a code snippet with things which shouldn\'t be treated as interpolations</h2>
      <pre><code className=\"language-bash\"><span className=\"hljs-keyword\">function</span> <span className=\"hljs-function\"><span className=\"hljs-title\">rbenv</span></span>() {\"{\"}<br />{\"  \"}RUBY=blah<br />{\"}\"}<br /></code></pre>
      <h2>Here\'s a paragraph with a simple interpolation</h2>
      <p>There are {Object.keys(props).length} props being supplied to this component.</p>
      <h2>Here\'s a code snippet with a simple interpolation</h2>
      <pre><code className=\"language-bash\"><span className=\"hljs-keyword\">function</span> <span className=\"hljs-function\"><span className=\"hljs-title\">rbenv</span></span>() {\"{\"}<br />{\"  \"}RUBY={props.rubycontent}<br />{\"}\"}<br /></code></pre>
      <h2>Here\'s an unhinted code snippet</h2>
      <pre><code><span className=\"hljs-keyword\">the</span> quick brown fox jumps over <span className=\"hljs-keyword\">the</span> lazy dog<br /></code></pre>
      <h2>Here\'s an unhinted snippet with no discernible language</h2>
      <pre><code>)<span className=\"hljs-comment\">()</span><span className=\"hljs-comment\">(()</span>)<br /></code></pre>
      <pre><code className=\"language-bash\">brew tap buildkite/buildkite<br />brew install --token=<span className=\"hljs-string\">\'{props.token || \'INSERT-YOUR-AGENT-TOKEN-HERE\'}\'</span> buildkite-agent<br /><br /><span className=\"hljs-function\"><span className=\"hljs-title\">function</span></span>() {\"{\"}<br />{\"  \"}ENV=<span className=\"hljs-string\">\"foo_bar\"</span><br />{\"}\"}<br /></code></pre>
      <p>Let\'s also test interpolation inside other elements. <code>{ \"foo bar\" }</code></p>
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a loader query of \`?implicitlyImportReact=true&passElementProps=false\` for component example 1 renders as expected within React 1`] = `
Array [
  "propTypes",
  "title",
  "myArray",
  "anObject",
]
`;

exports[`Webpack loader with a loader query of \`?implicitlyImportReact=true&passElementProps=false\` for component example 1 renders as expected within React 2`] = `
<div
  className={undefined}
  style={undefined}>
  <h1>
    Markdown template with imports, static attributes and interpolations
  </h1>
  <p>
    This file includes some custom static attributes which should be reflected fine on the resultant object
  </p>
  <p>
    This is a 
    <em>
      Markdown Component
    </em>
     file. Here you can include JSX-style assignment expressions; this component was generated using version 
    0.7.1
     of 
    markdown-component-loader
    !
  </p>
  <p>
    We\'re importing foo, which is 
    bar
    .
  </p>
  <p>
    We\'re also adding a react component here: 
    <bar
      style={
        Object {
          "foo": "bar",
        }
      }
      url="https://github.com/ticky/markdown-component-loader/issues" />
  </p>
  <p>
    Another cool thing you can do is use JSX 
    <strong>
      directly
    </strong>
     - here’s an SVG element, used inline: 
    <svg
      style={
        Object {
          "display": "inline",
          "height": "1em",
        }
      }
      viewBox="0 0 304 290">
      <path
        d="M2,111 h300 l-242.7,176.3 92.7,-285.3 92.7,285.3 z"
        fill="none"
        stroke="currentColor"
        strokeWidth="16" />
    </svg>
    .
  </p>
</div>
`;

exports[`Webpack loader with a loader query of \`?implicitlyImportReact=true&passElementProps=false\` for component example 1 returns the expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.7.1
import React from \'react\';
import PropTypes from \'prop-types\';
import foo from \'foo\';
import Bar from \'foo\';
import { bugs, name, version } from \'../package.json\';

MarkdownComponent.propTypes = {
  className: PropTypes.string,
  style: PropTypes.object
};

MarkdownComponent[\'title\'] = \'a custom title\';

MarkdownComponent[\'myArray\'] = [
  \'foo\',
  \'bar\'
];

MarkdownComponent[\'anObject\'] = {
  \'foo\': \'bar\'
};

function MarkdownComponent(props) {
  const {className, style} = props;

  return (
    <div className={className} style={style}>
      <h1>Markdown template with imports, static attributes and interpolations</h1>
      <p>This file includes some custom static attributes which should be reflected fine on the resultant object</p>
      <p>This is a <em>Markdown Component</em> file. Here you can include JSX-style assignment expressions; this component was generated using version { version } of { name }!</p>
      <p>We\'re importing foo, which is {foo}.</p>
      <p>We\'re also adding a react component here: {<Bar {...bugs} style={{ foo: \'bar\' }} />}</p>
      <p>Another cool thing you can do is use JSX <strong>directly</strong> - here’s an SVG element, used inline: { <svg style={{ display: \'inline\', height: \'1em\' }} viewBox=\"0 0 304 290\"><path fill=\"none\" stroke=\"currentColor\" strokeWidth=\"16\" d=\"M2,111 h300 l-242.7,176.3 92.7,-285.3 92.7,285.3 z\" /></svg> }.</p>
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a loader query of \`?implicitlyImportReact=true&passElementProps=false\` for component example 2 renders as expected within React 1`] = `
Array [
  "propTypes",
]
`;

exports[`Webpack loader with a loader query of \`?implicitlyImportReact=true&passElementProps=false\` for component example 2 renders as expected within React 2`] = `
<div
  className={undefined}
  style={undefined} />
`;

exports[`Webpack loader with a loader query of \`?implicitlyImportReact=true&passElementProps=false\` for component example 2 returns the expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.7.1
import React from \'react\';
import PropTypes from \'prop-types\';

MarkdownComponent.propTypes = {
  className: PropTypes.string,
  style: PropTypes.object
};

function MarkdownComponent(props) {
  const {className, style} = props;

  return (
    <div className={className} style={style}>
      {/* no input given */}
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a loader query of \`?implicitlyImportReact=true&passElementProps=true\` for component example 0 renders as expected within React 1`] = `
Array [
  "propTypes",
  "defaultProps",
]
`;

exports[`Webpack loader with a loader query of \`?implicitlyImportReact=true&passElementProps=true\` for component example 0 renders as expected within React 2`] = `
<div
  className={undefined}
  style={undefined}>
  <h1>
    Test Document
  </h1>
  <p>
    [[toc]]
  </p>
  <h2>
    Basic Markdown Template
  </h2>
  <p>
    This is a basic Markdown template, with no interpolations going on.
  </p>
  <p>
    This should be
  </p>
  <ul>
    <li>
      easy and;
    </li>
    <li>
      predictable!
    </li>
  </ul>
  <h2>
    Here\'s a couple of hyperlinks
  </h2>
  <p>
    <a
      href="https://duckduckgo.com">
      https://duckduckgo.com
    </a>
     
    <a
      href="https://github.com">
      GitHub
    </a>
  </p>
  <h2>
    Here\'s a code snippet with no interpolations
  </h2>
  <pre>
    <code
      className="language-bash">
      npm install -g yarn
      <br />
    </code>
  </pre>
  <h2>
    Here\'s a code snippet with things which shouldn\'t be treated as interpolations
  </h2>
  <pre>
    <code
      className="language-bash">
      <span
        className="hljs-keyword">
        function
      </span>
       
      <span
        className="hljs-function">
        <span
          className="hljs-title">
          rbenv
        </span>
      </span>
      () 
      {
      <br />
        
      RUBY=blah
      <br />
      }
      <br />
    </code>
  </pre>
  <h2>
    Here\'s a paragraph with a simple interpolation
  </h2>
  <p>
    There are 
    1
     props being supplied to this component.
  </p>
  <h2>
    Here\'s a code snippet with a simple interpolation
  </h2>
  <pre>
    <code
      className="language-bash">
      <span
        className="hljs-keyword">
        function
      </span>
       
      <span
        className="hljs-function">
        <span
          className="hljs-title">
          rbenv
        </span>
      </span>
      () 
      {
      <br />
        
      RUBY=
      <br />
      }
      <br />
    </code>
  </pre>
  <h2>
    Here\'s an unhinted code snippet
  </h2>
  <pre>
    <code>
      <span
        className="hljs-keyword">
        the
      </span>
       quick brown fox jumps over 
      <span
        className="hljs-keyword">
        the
      </span>
       lazy dog
      <br />
    </code>
  </pre>
  <h2>
    Here\'s an unhinted snippet with no discernible language
  </h2>
  <pre>
    <code>
      )
      <span
        className="hljs-comment">
        ()
      </span>
      <span
        className="hljs-comment">
        (()
      </span>
      )
      <br />
    </code>
  </pre>
  <pre>
    <code
      className="language-bash">
      brew tap buildkite/buildkite
      <br />
      brew install --token=
      <span
        className="hljs-string">
        \'
        INSERT-YOUR-AGENT-TOKEN-HERE
        \'
      </span>
       buildkite-agent
      <br />
      <br />
      <span
        className="hljs-function">
        <span
          className="hljs-title">
          function
        </span>
      </span>
      () 
      {
      <br />
        
      ENV=
      <span
        className="hljs-string">
        \"foo_bar\"
      </span>
      <br />
      }
      <br />
    </code>
  </pre>
  <p>
    Let\'s also test interpolation inside other elements. 
    <code>
      foo bar
    </code>
  </p>
</div>
`;

exports[`Webpack loader with a loader query of \`?implicitlyImportReact=true&passElementProps=true\` for component example 0 returns the expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.7.1
import React from \'react\';
import PropTypes from \'prop-types\';

MarkdownComponent.propTypes = {
  className: PropTypes.string,
  style: PropTypes.object,
  elementProps: PropTypes.object
};

MarkdownComponent.defaultProps = {
  elementProps: {}
};

function MarkdownComponent(props) {
  const {className, style, elementProps} = props;

  return (
    <div className={className} style={style}>
      <h1 {...elementProps[\'h1\']}>Test Document</h1>
      <p {...elementProps[\'p\']}>[[toc]]</p>
      <h2 {...elementProps[\'h2\']}>Basic Markdown Template</h2>
      <p {...elementProps[\'p\']}>This is a basic Markdown template, with no interpolations going on.</p>
      <p {...elementProps[\'p\']}>This should be</p>
      <ul {...elementProps[\'ul\']}>
        <li {...elementProps[\'li\']}>easy and;</li>
        <li {...elementProps[\'li\']}>predictable!</li>
      </ul>
      <h2 {...elementProps[\'h2\']}>Here\'s a couple of hyperlinks</h2>
      <p {...elementProps[\'p\']}><a {...elementProps[\'a\']} href=\"https://duckduckgo.com\">https://duckduckgo.com</a> <a {...elementProps[\'a\']} href=\"https://github.com\">GitHub</a></p>
      <h2 {...elementProps[\'h2\']}>Here\'s a code snippet with no interpolations</h2>
      <pre {...elementProps[\'pre\']}><code {...elementProps[\'code\']} className=\"language-bash\">npm install -g yarn<br {...elementProps[\'br\']} /></code></pre>
      <h2 {...elementProps[\'h2\']}>Here\'s a code snippet with things which shouldn\'t be treated as interpolations</h2>
      <pre {...elementProps[\'pre\']}><code {...elementProps[\'code\']} className=\"language-bash\"><span {...elementProps[\'span\']} className=\"hljs-keyword\">function</span> <span {...elementProps[\'span\']} className=\"hljs-function\"><span {...elementProps[\'span\']} className=\"hljs-title\">rbenv</span></span>() {\"{\"}<br {...elementProps[\'br\']} />{\"  \"}RUBY=blah<br {...elementProps[\'br\']} />{\"}\"}<br {...elementProps[\'br\']} /></code></pre>
      <h2 {...elementProps[\'h2\']}>Here\'s a paragraph with a simple interpolation</h2>
      <p {...elementProps[\'p\']}>There are {Object.keys(props).length} props being supplied to this component.</p>
      <h2 {...elementProps[\'h2\']}>Here\'s a code snippet with a simple interpolation</h2>
      <pre {...elementProps[\'pre\']}><code {...elementProps[\'code\']} className=\"language-bash\"><span {...elementProps[\'span\']} className=\"hljs-keyword\">function</span> <span {...elementProps[\'span\']} className=\"hljs-function\"><span {...elementProps[\'span\']} className=\"hljs-title\">rbenv</span></span>() {\"{\"}<br {...elementProps[\'br\']} />{\"  \"}RUBY={props.rubycontent}<br {...elementProps[\'br\']} />{\"}\"}<br {...elementProps[\'br\']} /></code></pre>
      <h2 {...elementProps[\'h2\']}>Here\'s an unhinted code snippet</h2>
      <pre {...elementProps[\'pre\']}><code {...elementProps[\'code\']}><span {...elementProps[\'span\']} className=\"hljs-keyword\">the</span> quick brown fox jumps over <span {...elementProps[\'span\']} className=\"hljs-keyword\">the</span> lazy dog<br {...elementProps[\'br\']} /></code></pre>
      <h2 {...elementProps[\'h2\']}>Here\'s an unhinted snippet with no discernible language</h2>
      <pre {...elementProps[\'pre\']}><code {...elementProps[\'code\']}>)<span {...elementProps[\'span\']} className=\"hljs-comment\">()</span><span {...elementProps[\'span\']} className=\"hljs-comment\">(()</span>)<br {...elementProps[\'br\']} /></code></pre>
      <pre {...elementProps[\'pre\']}><code {...elementProps[\'code\']} className=\"language-bash\">brew tap buildkite/buildkite<br {...elementProps[\'br\']} />brew install --token=<span {...elementProps[\'span\']} className=\"hljs-string\">\'{props.token || \'INSERT-YOUR-AGENT-TOKEN-HERE\'}\'</span> buildkite-agent<br {...elementProps[\'br\']} /><br {...elementProps[\'br\']} /><span {...elementProps[\'span\']} className=\"hljs-function\"><span {...elementProps[\'span\']} className=\"hljs-title\">function</span></span>() {\"{\"}<br {...elementProps[\'br\']} />{\"  \"}ENV=<span {...elementProps[\'span\']} className=\"hljs-string\">\"foo_bar\"</span><br {...elementProps[\'br\']} />{\"}\"}<br {...elementProps[\'br\']} /></code></pre>
      <p {...elementProps[\'p\']}>Let\'s also test interpolation inside other elements. <code {...elementProps[\'code\']}>{ \"foo bar\" }</code></p>
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a loader query of \`?implicitlyImportReact=true&passElementProps=true\` for component example 1 renders as expected within React 1`] = `
Array [
  "propTypes",
  "defaultProps",
  "title",
  "myArray",
  "anObject",
]
`;

exports[`Webpack loader with a loader query of \`?implicitlyImportReact=true&passElementProps=true\` for component example 1 renders as expected within React 2`] = `
<div
  className={undefined}
  style={undefined}>
  <h1>
    Markdown template with imports, static attributes and interpolations
  </h1>
  <p>
    This file includes some custom static attributes which should be reflected fine on the resultant object
  </p>
  <p>
    This is a 
    <em>
      Markdown Component
    </em>
     file. Here you can include JSX-style assignment expressions; this component was generated using version 
    0.7.1
     of 
    markdown-component-loader
    !
  </p>
  <p>
    We\'re importing foo, which is 
    bar
    .
  </p>
  <p>
    We\'re also adding a react component here: 
    <bar
      style={
        Object {
          "foo": "bar",
        }
      }
      url="https://github.com/ticky/markdown-component-loader/issues" />
  </p>
  <p>
    Another cool thing you can do is use JSX 
    <strong>
      directly
    </strong>
     - here’s an SVG element, used inline: 
    <svg
      style={
        Object {
          "display": "inline",
          "height": "1em",
        }
      }
      viewBox="0 0 304 290">
      <path
        d="M2,111 h300 l-242.7,176.3 92.7,-285.3 92.7,285.3 z"
        fill="none"
        stroke="currentColor"
        strokeWidth="16" />
    </svg>
    .
  </p>
</div>
`;

exports[`Webpack loader with a loader query of \`?implicitlyImportReact=true&passElementProps=true\` for component example 1 returns the expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.7.1
import React from \'react\';
import PropTypes from \'prop-types\';
import foo from \'foo\';
import Bar from \'foo\';
import { bugs, name, version } from \'../package.json\';

MarkdownComponent.propTypes = {
  className: PropTypes.string,
  style: PropTypes.object,
  elementProps: PropTypes.object
};

MarkdownComponent.defaultProps = {
  elementProps: {}
};

MarkdownComponent[\'title\'] = \'a custom title\';

MarkdownComponent[\'myArray\'] = [
  \'foo\',
  \'bar\'
];

MarkdownComponent[\'anObject\'] = {
  \'foo\': \'bar\'
};

function MarkdownComponent(props) {
  const {className, style, elementProps} = props;

  return (
    <div className={className} style={style}>
      <h1 {...elementProps[\'h1\']}>Markdown template with imports, static attributes and interpolations</h1>
      <p {...elementProps[\'p\']}>This file includes some custom static attributes which should be reflected fine on the resultant object</p>
      <p {...elementProps[\'p\']}>This is a <em {...elementProps[\'em\']}>Markdown Component</em> file. Here you can include JSX-style assignment expressions; this component was generated using version { version } of { name }!</p>
      <p {...elementProps[\'p\']}>We\'re importing foo, which is {foo}.</p>
      <p {...elementProps[\'p\']}>We\'re also adding a react component here: {<Bar {...bugs} style={{ foo: \'bar\' }} />}</p>
      <p {...elementProps[\'p\']}>Another cool thing you can do is use JSX <strong {...elementProps[\'strong\']}>directly</strong> - here’s an SVG element, used inline: { <svg {...elementProps[\'svg\']} style={{ display: \'inline\', height: \'1em\' }} viewBox=\"0 0 304 290\"><path {...elementProps[\'path\']} fill=\"none\" stroke=\"currentColor\" strokeWidth=\"16\" d=\"M2,111 h300 l-242.7,176.3 92.7,-285.3 92.7,285.3 z\" /></svg> }.</p>
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a loader query of \`?implicitlyImportReact=true&passElementProps=true\` for component example 2 renders as expected within React 1`] = `
Array [
  "propTypes",
  "defaultProps",
]
`;

exports[`Webpack loader with a loader query of \`?implicitlyImportReact=true&passElementProps=true\` for component example 2 renders as expected within React 2`] = `
<div
  className={undefined}
  style={undefined} />
`;

exports[`Webpack loader with a loader query of \`?implicitlyImportReact=true&passElementProps=true\` for component example 2 returns the expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.7.1
import React from \'react\';
import PropTypes from \'prop-types\';

MarkdownComponent.propTypes = {
  className: PropTypes.string,
  style: PropTypes.object,
  elementProps: PropTypes.object
};

MarkdownComponent.defaultProps = {
  elementProps: {}
};

function MarkdownComponent(props) {
  const {className, style, elementProps} = props;

  return (
    <div className={className} style={style}>
      {/* no input given */}
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a loader query of \`?implicitlyImportReact=true\` for component example 0 renders as expected within React 1`] = `
Array [
  "propTypes",
]
`;

exports[`Webpack loader with a loader query of \`?implicitlyImportReact=true\` for component example 0 renders as expected within React 2`] = `
<div
  className={undefined}
  style={undefined}>
  <h1>
    Test Document
  </h1>
  <p>
    [[toc]]
  </p>
  <h2>
    Basic Markdown Template
  </h2>
  <p>
    This is a basic Markdown template, with no interpolations going on.
  </p>
  <p>
    This should be
  </p>
  <ul>
    <li>
      easy and;
    </li>
    <li>
      predictable!
    </li>
  </ul>
  <h2>
    Here\'s a couple of hyperlinks
  </h2>
  <p>
    <a
      href="https://duckduckgo.com">
      https://duckduckgo.com
    </a>
     
    <a
      href="https://github.com">
      GitHub
    </a>
  </p>
  <h2>
    Here\'s a code snippet with no interpolations
  </h2>
  <pre>
    <code
      className="language-bash">
      npm install -g yarn
      <br />
    </code>
  </pre>
  <h2>
    Here\'s a code snippet with things which shouldn\'t be treated as interpolations
  </h2>
  <pre>
    <code
      className="language-bash">
      <span
        className="hljs-keyword">
        function
      </span>
       
      <span
        className="hljs-function">
        <span
          className="hljs-title">
          rbenv
        </span>
      </span>
      () 
      {
      <br />
        
      RUBY=blah
      <br />
      }
      <br />
    </code>
  </pre>
  <h2>
    Here\'s a paragraph with a simple interpolation
  </h2>
  <p>
    There are 
    0
     props being supplied to this component.
  </p>
  <h2>
    Here\'s a code snippet with a simple interpolation
  </h2>
  <pre>
    <code
      className="language-bash">
      <span
        className="hljs-keyword">
        function
      </span>
       
      <span
        className="hljs-function">
        <span
          className="hljs-title">
          rbenv
        </span>
      </span>
      () 
      {
      <br />
        
      RUBY=
      <br />
      }
      <br />
    </code>
  </pre>
  <h2>
    Here\'s an unhinted code snippet
  </h2>
  <pre>
    <code>
      <span
        className="hljs-keyword">
        the
      </span>
       quick brown fox jumps over 
      <span
        className="hljs-keyword">
        the
      </span>
       lazy dog
      <br />
    </code>
  </pre>
  <h2>
    Here\'s an unhinted snippet with no discernible language
  </h2>
  <pre>
    <code>
      )
      <span
        className="hljs-comment">
        ()
      </span>
      <span
        className="hljs-comment">
        (()
      </span>
      )
      <br />
    </code>
  </pre>
  <pre>
    <code
      className="language-bash">
      brew tap buildkite/buildkite
      <br />
      brew install --token=
      <span
        className="hljs-string">
        \'
        INSERT-YOUR-AGENT-TOKEN-HERE
        \'
      </span>
       buildkite-agent
      <br />
      <br />
      <span
        className="hljs-function">
        <span
          className="hljs-title">
          function
        </span>
      </span>
      () 
      {
      <br />
        
      ENV=
      <span
        className="hljs-string">
        \"foo_bar\"
      </span>
      <br />
      }
      <br />
    </code>
  </pre>
  <p>
    Let\'s also test interpolation inside other elements. 
    <code>
      foo bar
    </code>
  </p>
</div>
`;

exports[`Webpack loader with a loader query of \`?implicitlyImportReact=true\` for component example 0 returns the expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.7.1
import React from \'react\';
import PropTypes from \'prop-types\';

MarkdownComponent.propTypes = {
  className: PropTypes.string,
  style: PropTypes.object
};

function MarkdownComponent(props) {
  const {className, style} = props;

  return (
    <div className={className} style={style}>
      <h1>Test Document</h1>
      <p>[[toc]]</p>
      <h2>Basic Markdown Template</h2>
      <p>This is a basic Markdown template, with no interpolations going on.</p>
      <p>This should be</p>
      <ul>
        <li>easy and;</li>
        <li>predictable!</li>
      </ul>
      <h2>Here\'s a couple of hyperlinks</h2>
      <p><a href=\"https://duckduckgo.com\">https://duckduckgo.com</a> <a href=\"https://github.com\">GitHub</a></p>
      <h2>Here\'s a code snippet with no interpolations</h2>
      <pre><code className=\"language-bash\">npm install -g yarn<br /></code></pre>
      <h2>Here\'s a code snippet with things which shouldn\'t be treated as interpolations</h2>
      <pre><code className=\"language-bash\"><span className=\"hljs-keyword\">function</span> <span className=\"hljs-function\"><span className=\"hljs-title\">rbenv</span></span>() {\"{\"}<br />{\"  \"}RUBY=blah<br />{\"}\"}<br /></code></pre>
      <h2>Here\'s a paragraph with a simple interpolation</h2>
      <p>There are {Object.keys(props).length} props being supplied to this component.</p>
      <h2>Here\'s a code snippet with a simple interpolation</h2>
      <pre><code className=\"language-bash\"><span className=\"hljs-keyword\">function</span> <span className=\"hljs-function\"><span className=\"hljs-title\">rbenv</span></span>() {\"{\"}<br />{\"  \"}RUBY={props.rubycontent}<br />{\"}\"}<br /></code></pre>
      <h2>Here\'s an unhinted code snippet</h2>
      <pre><code><span className=\"hljs-keyword\">the</span> quick brown fox jumps over <span className=\"hljs-keyword\">the</span> lazy dog<br /></code></pre>
      <h2>Here\'s an unhinted snippet with no discernible language</h2>
      <pre><code>)<span className=\"hljs-comment\">()</span><span className=\"hljs-comment\">(()</span>)<br /></code></pre>
      <pre><code className=\"language-bash\">brew tap buildkite/buildkite<br />brew install --token=<span className=\"hljs-string\">\'{props.token || \'INSERT-YOUR-AGENT-TOKEN-HERE\'}\'</span> buildkite-agent<br /><br /><span className=\"hljs-function\"><span className=\"hljs-title\">function</span></span>() {\"{\"}<br />{\"  \"}ENV=<span className=\"hljs-string\">\"foo_bar\"</span><br />{\"}\"}<br /></code></pre>
      <p>Let\'s also test interpolation inside other elements. <code>{ \"foo bar\" }</code></p>
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a loader query of \`?implicitlyImportReact=true\` for component example 1 renders as expected within React 1`] = `
Array [
  "propTypes",
  "title",
  "myArray",
  "anObject",
]
`;

exports[`Webpack loader with a loader query of \`?implicitlyImportReact=true\` for component example 1 renders as expected within React 2`] = `
<div
  className={undefined}
  style={undefined}>
  <h1>
    Markdown template with imports, static attributes and interpolations
  </h1>
  <p>
    This file includes some custom static attributes which should be reflected fine on the resultant object
  </p>
  <p>
    This is a 
    <em>
      Markdown Component
    </em>
     file. Here you can include JSX-style assignment expressions; this component was generated using version 
    0.7.1
     of 
    markdown-component-loader
    !
  </p>
  <p>
    We\'re importing foo, which is 
    bar
    .
  </p>
  <p>
    We\'re also adding a react component here: 
    <bar
      style={
        Object {
          "foo": "bar",
        }
      }
      url="https://github.com/ticky/markdown-component-loader/issues" />
  </p>
  <p>
    Another cool thing you can do is use JSX 
    <strong>
      directly
    </strong>
     - here’s an SVG element, used inline: 
    <svg
      style={
        Object {
          "display": "inline",
          "height": "1em",
        }
      }
      viewBox="0 0 304 290">
      <path
        d="M2,111 h300 l-242.7,176.3 92.7,-285.3 92.7,285.3 z"
        fill="none"
        stroke="currentColor"
        strokeWidth="16" />
    </svg>
    .
  </p>
</div>
`;

exports[`Webpack loader with a loader query of \`?implicitlyImportReact=true\` for component example 1 returns the expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.7.1
import React from \'react\';
import PropTypes from \'prop-types\';
import foo from \'foo\';
import Bar from \'foo\';
import { bugs, name, version } from \'../package.json\';

MarkdownComponent.propTypes = {
  className: PropTypes.string,
  style: PropTypes.object
};

MarkdownComponent[\'title\'] = \'a custom title\';

MarkdownComponent[\'myArray\'] = [
  \'foo\',
  \'bar\'
];

MarkdownComponent[\'anObject\'] = {
  \'foo\': \'bar\'
};

function MarkdownComponent(props) {
  const {className, style} = props;

  return (
    <div className={className} style={style}>
      <h1>Markdown template with imports, static attributes and interpolations</h1>
      <p>This file includes some custom static attributes which should be reflected fine on the resultant object</p>
      <p>This is a <em>Markdown Component</em> file. Here you can include JSX-style assignment expressions; this component was generated using version { version } of { name }!</p>
      <p>We\'re importing foo, which is {foo}.</p>
      <p>We\'re also adding a react component here: {<Bar {...bugs} style={{ foo: \'bar\' }} />}</p>
      <p>Another cool thing you can do is use JSX <strong>directly</strong> - here’s an SVG element, used inline: { <svg style={{ display: \'inline\', height: \'1em\' }} viewBox=\"0 0 304 290\"><path fill=\"none\" stroke=\"currentColor\" strokeWidth=\"16\" d=\"M2,111 h300 l-242.7,176.3 92.7,-285.3 92.7,285.3 z\" /></svg> }.</p>
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a loader query of \`?implicitlyImportReact=true\` for component example 2 renders as expected within React 1`] = `
Array [
  "propTypes",
]
`;

exports[`Webpack loader with a loader query of \`?implicitlyImportReact=true\` for component example 2 renders as expected within React 2`] = `
<div
  className={undefined}
  style={undefined} />
`;

exports[`Webpack loader with a loader query of \`?implicitlyImportReact=true\` for component example 2 returns the expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.7.1
import React from \'react\';
import PropTypes from \'prop-types\';

MarkdownComponent.propTypes = {
  className: PropTypes.string,
  style: PropTypes.object
};

function MarkdownComponent(props) {
  const {className, style} = props;

  return (
    <div className={className} style={style}>
      {/* no input given */}
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a loader query of \`?passElementProps=false\` for component example 0 renders as expected within React 1`] = `
Array [
  "propTypes",
]
`;

exports[`Webpack loader with a loader query of \`?passElementProps=false\` for component example 0 renders as expected within React 2`] = `
<div
  className={undefined}
  style={undefined}>
  <h1>
    Test Document
  </h1>
  <p>
    [[toc]]
  </p>
  <h2>
    Basic Markdown Template
  </h2>
  <p>
    This is a basic Markdown template, with no interpolations going on.
  </p>
  <p>
    This should be
  </p>
  <ul>
    <li>
      easy and;
    </li>
    <li>
      predictable!
    </li>
  </ul>
  <h2>
    Here\'s a couple of hyperlinks
  </h2>
  <p>
    <a
      href="https://duckduckgo.com">
      https://duckduckgo.com
    </a>
     
    <a
      href="https://github.com">
      GitHub
    </a>
  </p>
  <h2>
    Here\'s a code snippet with no interpolations
  </h2>
  <pre>
    <code
      className="language-bash">
      npm install -g yarn
      <br />
    </code>
  </pre>
  <h2>
    Here\'s a code snippet with things which shouldn\'t be treated as interpolations
  </h2>
  <pre>
    <code
      className="language-bash">
      <span
        className="hljs-keyword">
        function
      </span>
       
      <span
        className="hljs-function">
        <span
          className="hljs-title">
          rbenv
        </span>
      </span>
      () 
      {
      <br />
        
      RUBY=blah
      <br />
      }
      <br />
    </code>
  </pre>
  <h2>
    Here\'s a paragraph with a simple interpolation
  </h2>
  <p>
    There are 
    0
     props being supplied to this component.
  </p>
  <h2>
    Here\'s a code snippet with a simple interpolation
  </h2>
  <pre>
    <code
      className="language-bash">
      <span
        className="hljs-keyword">
        function
      </span>
       
      <span
        className="hljs-function">
        <span
          className="hljs-title">
          rbenv
        </span>
      </span>
      () 
      {
      <br />
        
      RUBY=
      <br />
      }
      <br />
    </code>
  </pre>
  <h2>
    Here\'s an unhinted code snippet
  </h2>
  <pre>
    <code>
      <span
        className="hljs-keyword">
        the
      </span>
       quick brown fox jumps over 
      <span
        className="hljs-keyword">
        the
      </span>
       lazy dog
      <br />
    </code>
  </pre>
  <h2>
    Here\'s an unhinted snippet with no discernible language
  </h2>
  <pre>
    <code>
      )
      <span
        className="hljs-comment">
        ()
      </span>
      <span
        className="hljs-comment">
        (()
      </span>
      )
      <br />
    </code>
  </pre>
  <pre>
    <code
      className="language-bash">
      brew tap buildkite/buildkite
      <br />
      brew install --token=
      <span
        className="hljs-string">
        \'
        INSERT-YOUR-AGENT-TOKEN-HERE
        \'
      </span>
       buildkite-agent
      <br />
      <br />
      <span
        className="hljs-function">
        <span
          className="hljs-title">
          function
        </span>
      </span>
      () 
      {
      <br />
        
      ENV=
      <span
        className="hljs-string">
        \"foo_bar\"
      </span>
      <br />
      }
      <br />
    </code>
  </pre>
  <p>
    Let\'s also test interpolation inside other elements. 
    <code>
      foo bar
    </code>
  </p>
</div>
`;

exports[`Webpack loader with a loader query of \`?passElementProps=false\` for component example 0 returns the expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.7.1
import React from \'react\';
import PropTypes from \'prop-types\';

MarkdownComponent.propTypes = {
  className: PropTypes.string,
  style: PropTypes.object
};

function MarkdownComponent(props) {
  const {className, style} = props;

  return (
    <div className={className} style={style}>
      <h1>Test Document</h1>
      <p>[[toc]]</p>
      <h2>Basic Markdown Template</h2>
      <p>This is a basic Markdown template, with no interpolations going on.</p>
      <p>This should be</p>
      <ul>
        <li>easy and;</li>
        <li>predictable!</li>
      </ul>
      <h2>Here\'s a couple of hyperlinks</h2>
      <p><a href=\"https://duckduckgo.com\">https://duckduckgo.com</a> <a href=\"https://github.com\">GitHub</a></p>
      <h2>Here\'s a code snippet with no interpolations</h2>
      <pre><code className=\"language-bash\">npm install -g yarn<br /></code></pre>
      <h2>Here\'s a code snippet with things which shouldn\'t be treated as interpolations</h2>
      <pre><code className=\"language-bash\"><span className=\"hljs-keyword\">function</span> <span className=\"hljs-function\"><span className=\"hljs-title\">rbenv</span></span>() {\"{\"}<br />{\"  \"}RUBY=blah<br />{\"}\"}<br /></code></pre>
      <h2>Here\'s a paragraph with a simple interpolation</h2>
      <p>There are {Object.keys(props).length} props being supplied to this component.</p>
      <h2>Here\'s a code snippet with a simple interpolation</h2>
      <pre><code className=\"language-bash\"><span className=\"hljs-keyword\">function</span> <span className=\"hljs-function\"><span className=\"hljs-title\">rbenv</span></span>() {\"{\"}<br />{\"  \"}RUBY={props.rubycontent}<br />{\"}\"}<br /></code></pre>
      <h2>Here\'s an unhinted code snippet</h2>
      <pre><code><span className=\"hljs-keyword\">the</span> quick brown fox jumps over <span className=\"hljs-keyword\">the</span> lazy dog<br /></code></pre>
      <h2>Here\'s an unhinted snippet with no discernible language</h2>
      <pre><code>)<span className=\"hljs-comment\">()</span><span className=\"hljs-comment\">(()</span>)<br /></code></pre>
      <pre><code className=\"language-bash\">brew tap buildkite/buildkite<br />brew install --token=<span className=\"hljs-string\">\'{props.token || \'INSERT-YOUR-AGENT-TOKEN-HERE\'}\'</span> buildkite-agent<br /><br /><span className=\"hljs-function\"><span className=\"hljs-title\">function</span></span>() {\"{\"}<br />{\"  \"}ENV=<span className=\"hljs-string\">\"foo_bar\"</span><br />{\"}\"}<br /></code></pre>
      <p>Let\'s also test interpolation inside other elements. <code>{ \"foo bar\" }</code></p>
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a loader query of \`?passElementProps=false\` for component example 1 renders as expected within React 1`] = `
Array [
  "propTypes",
  "title",
  "myArray",
  "anObject",
]
`;

exports[`Webpack loader with a loader query of \`?passElementProps=false\` for component example 1 renders as expected within React 2`] = `
<div
  className={undefined}
  style={undefined}>
  <h1>
    Markdown template with imports, static attributes and interpolations
  </h1>
  <p>
    This file includes some custom static attributes which should be reflected fine on the resultant object
  </p>
  <p>
    This is a 
    <em>
      Markdown Component
    </em>
     file. Here you can include JSX-style assignment expressions; this component was generated using version 
    0.7.1
     of 
    markdown-component-loader
    !
  </p>
  <p>
    We\'re importing foo, which is 
    bar
    .
  </p>
  <p>
    We\'re also adding a react component here: 
    <bar
      style={
        Object {
          "foo": "bar",
        }
      }
      url="https://github.com/ticky/markdown-component-loader/issues" />
  </p>
  <p>
    Another cool thing you can do is use JSX 
    <strong>
      directly
    </strong>
     - here’s an SVG element, used inline: 
    <svg
      style={
        Object {
          "display": "inline",
          "height": "1em",
        }
      }
      viewBox="0 0 304 290">
      <path
        d="M2,111 h300 l-242.7,176.3 92.7,-285.3 92.7,285.3 z"
        fill="none"
        stroke="currentColor"
        strokeWidth="16" />
    </svg>
    .
  </p>
</div>
`;

exports[`Webpack loader with a loader query of \`?passElementProps=false\` for component example 1 returns the expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.7.1
import React from \'react\';
import PropTypes from \'prop-types\';
import foo from \'foo\';
import Bar from \'foo\';
import { bugs, name, version } from \'../package.json\';

MarkdownComponent.propTypes = {
  className: PropTypes.string,
  style: PropTypes.object
};

MarkdownComponent[\'title\'] = \'a custom title\';

MarkdownComponent[\'myArray\'] = [
  \'foo\',
  \'bar\'
];

MarkdownComponent[\'anObject\'] = {
  \'foo\': \'bar\'
};

function MarkdownComponent(props) {
  const {className, style} = props;

  return (
    <div className={className} style={style}>
      <h1>Markdown template with imports, static attributes and interpolations</h1>
      <p>This file includes some custom static attributes which should be reflected fine on the resultant object</p>
      <p>This is a <em>Markdown Component</em> file. Here you can include JSX-style assignment expressions; this component was generated using version { version } of { name }!</p>
      <p>We\'re importing foo, which is {foo}.</p>
      <p>We\'re also adding a react component here: {<Bar {...bugs} style={{ foo: \'bar\' }} />}</p>
      <p>Another cool thing you can do is use JSX <strong>directly</strong> - here’s an SVG element, used inline: { <svg style={{ display: \'inline\', height: \'1em\' }} viewBox=\"0 0 304 290\"><path fill=\"none\" stroke=\"currentColor\" strokeWidth=\"16\" d=\"M2,111 h300 l-242.7,176.3 92.7,-285.3 92.7,285.3 z\" /></svg> }.</p>
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a loader query of \`?passElementProps=false\` for component example 2 renders as expected within React 1`] = `
Array [
  "propTypes",
]
`;

exports[`Webpack loader with a loader query of \`?passElementProps=false\` for component example 2 renders as expected within React 2`] = `
<div
  className={undefined}
  style={undefined} />
`;

exports[`Webpack loader with a loader query of \`?passElementProps=false\` for component example 2 returns the expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.7.1
import React from \'react\';
import PropTypes from \'prop-types\';

MarkdownComponent.propTypes = {
  className: PropTypes.string,
  style: PropTypes.object
};

function MarkdownComponent(props) {
  const {className, style} = props;

  return (
    <div className={className} style={style}>
      {/* no input given */}
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a loader query of \`?passElementProps=true\` for component example 0 renders as expected within React 1`] = `
Array [
  "propTypes",
  "defaultProps",
]
`;

exports[`Webpack loader with a loader query of \`?passElementProps=true\` for component example 0 renders as expected within React 2`] = `
<div
  className={undefined}
  style={undefined}>
  <h1>
    Test Document
  </h1>
  <p>
    [[toc]]
  </p>
  <h2>
    Basic Markdown Template
  </h2>
  <p>
    This is a basic Markdown template, with no interpolations going on.
  </p>
  <p>
    This should be
  </p>
  <ul>
    <li>
      easy and;
    </li>
    <li>
      predictable!
    </li>
  </ul>
  <h2>
    Here\'s a couple of hyperlinks
  </h2>
  <p>
    <a
      href="https://duckduckgo.com">
      https://duckduckgo.com
    </a>
     
    <a
      href="https://github.com">
      GitHub
    </a>
  </p>
  <h2>
    Here\'s a code snippet with no interpolations
  </h2>
  <pre>
    <code
      className="language-bash">
      npm install -g yarn
      <br />
    </code>
  </pre>
  <h2>
    Here\'s a code snippet with things which shouldn\'t be treated as interpolations
  </h2>
  <pre>
    <code
      className="language-bash">
      <span
        className="hljs-keyword">
        function
      </span>
       
      <span
        className="hljs-function">
        <span
          className="hljs-title">
          rbenv
        </span>
      </span>
      () 
      {
      <br />
        
      RUBY=blah
      <br />
      }
      <br />
    </code>
  </pre>
  <h2>
    Here\'s a paragraph with a simple interpolation
  </h2>
  <p>
    There are 
    1
     props being supplied to this component.
  </p>
  <h2>
    Here\'s a code snippet with a simple interpolation
  </h2>
  <pre>
    <code
      className="language-bash">
      <span
        className="hljs-keyword">
        function
      </span>
       
      <span
        className="hljs-function">
        <span
          className="hljs-title">
          rbenv
        </span>
      </span>
      () 
      {
      <br />
        
      RUBY=
      <br />
      }
      <br />
    </code>
  </pre>
  <h2>
    Here\'s an unhinted code snippet
  </h2>
  <pre>
    <code>
      <span
        className="hljs-keyword">
        the
      </span>
       quick brown fox jumps over 
      <span
        className="hljs-keyword">
        the
      </span>
       lazy dog
      <br />
    </code>
  </pre>
  <h2>
    Here\'s an unhinted snippet with no discernible language
  </h2>
  <pre>
    <code>
      )
      <span
        className="hljs-comment">
        ()
      </span>
      <span
        className="hljs-comment">
        (()
      </span>
      )
      <br />
    </code>
  </pre>
  <pre>
    <code
      className="language-bash">
      brew tap buildkite/buildkite
      <br />
      brew install --token=
      <span
        className="hljs-string">
        \'
        INSERT-YOUR-AGENT-TOKEN-HERE
        \'
      </span>
       buildkite-agent
      <br />
      <br />
      <span
        className="hljs-function">
        <span
          className="hljs-title">
          function
        </span>
      </span>
      () 
      {
      <br />
        
      ENV=
      <span
        className="hljs-string">
        \"foo_bar\"
      </span>
      <br />
      }
      <br />
    </code>
  </pre>
  <p>
    Let\'s also test interpolation inside other elements. 
    <code>
      foo bar
    </code>
  </p>
</div>
`;

exports[`Webpack loader with a loader query of \`?passElementProps=true\` for component example 0 returns the expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.7.1
import React from \'react\';
import PropTypes from \'prop-types\';

MarkdownComponent.propTypes = {
  className: PropTypes.string,
  style: PropTypes.object,
  elementProps: PropTypes.object
};

MarkdownComponent.defaultProps = {
  elementProps: {}
};

function MarkdownComponent(props) {
  const {className, style, elementProps} = props;

  return (
    <div className={className} style={style}>
      <h1 {...elementProps[\'h1\']}>Test Document</h1>
      <p {...elementProps[\'p\']}>[[toc]]</p>
      <h2 {...elementProps[\'h2\']}>Basic Markdown Template</h2>
      <p {...elementProps[\'p\']}>This is a basic Markdown template, with no interpolations going on.</p>
      <p {...elementProps[\'p\']}>This should be</p>
      <ul {...elementProps[\'ul\']}>
        <li {...elementProps[\'li\']}>easy and;</li>
        <li {...elementProps[\'li\']}>predictable!</li>
      </ul>
      <h2 {...elementProps[\'h2\']}>Here\'s a couple of hyperlinks</h2>
      <p {...elementProps[\'p\']}><a {...elementProps[\'a\']} href=\"https://duckduckgo.com\">https://duckduckgo.com</a> <a {...elementProps[\'a\']} href=\"https://github.com\">GitHub</a></p>
      <h2 {...elementProps[\'h2\']}>Here\'s a code snippet with no interpolations</h2>
      <pre {...elementProps[\'pre\']}><code {...elementProps[\'code\']} className=\"language-bash\">npm install -g yarn<br {...elementProps[\'br\']} /></code></pre>
      <h2 {...elementProps[\'h2\']}>Here\'s a code snippet with things which shouldn\'t be treated as interpolations</h2>
      <pre {...elementProps[\'pre\']}><code {...elementProps[\'code\']} className=\"language-bash\"><span {...elementProps[\'span\']} className=\"hljs-keyword\">function</span> <span {...elementProps[\'span\']} className=\"hljs-function\"><span {...elementProps[\'span\']} className=\"hljs-title\">rbenv</span></span>() {\"{\"}<br {...elementProps[\'br\']} />{\"  \"}RUBY=blah<br {...elementProps[\'br\']} />{\"}\"}<br {...elementProps[\'br\']} /></code></pre>
      <h2 {...elementProps[\'h2\']}>Here\'s a paragraph with a simple interpolation</h2>
      <p {...elementProps[\'p\']}>There are {Object.keys(props).length} props being supplied to this component.</p>
      <h2 {...elementProps[\'h2\']}>Here\'s a code snippet with a simple interpolation</h2>
      <pre {...elementProps[\'pre\']}><code {...elementProps[\'code\']} className=\"language-bash\"><span {...elementProps[\'span\']} className=\"hljs-keyword\">function</span> <span {...elementProps[\'span\']} className=\"hljs-function\"><span {...elementProps[\'span\']} className=\"hljs-title\">rbenv</span></span>() {\"{\"}<br {...elementProps[\'br\']} />{\"  \"}RUBY={props.rubycontent}<br {...elementProps[\'br\']} />{\"}\"}<br {...elementProps[\'br\']} /></code></pre>
      <h2 {...elementProps[\'h2\']}>Here\'s an unhinted code snippet</h2>
      <pre {...elementProps[\'pre\']}><code {...elementProps[\'code\']}><span {...elementProps[\'span\']} className=\"hljs-keyword\">the</span> quick brown fox jumps over <span {...elementProps[\'span\']} className=\"hljs-keyword\">the</span> lazy dog<br {...elementProps[\'br\']} /></code></pre>
      <h2 {...elementProps[\'h2\']}>Here\'s an unhinted snippet with no discernible language</h2>
      <pre {...elementProps[\'pre\']}><code {...elementProps[\'code\']}>)<span {...elementProps[\'span\']} className=\"hljs-comment\">()</span><span {...elementProps[\'span\']} className=\"hljs-comment\">(()</span>)<br {...elementProps[\'br\']} /></code></pre>
      <pre {...elementProps[\'pre\']}><code {...elementProps[\'code\']} className=\"language-bash\">brew tap buildkite/buildkite<br {...elementProps[\'br\']} />brew install --token=<span {...elementProps[\'span\']} className=\"hljs-string\">\'{props.token || \'INSERT-YOUR-AGENT-TOKEN-HERE\'}\'</span> buildkite-agent<br {...elementProps[\'br\']} /><br {...elementProps[\'br\']} /><span {...elementProps[\'span\']} className=\"hljs-function\"><span {...elementProps[\'span\']} className=\"hljs-title\">function</span></span>() {\"{\"}<br {...elementProps[\'br\']} />{\"  \"}ENV=<span {...elementProps[\'span\']} className=\"hljs-string\">\"foo_bar\"</span><br {...elementProps[\'br\']} />{\"}\"}<br {...elementProps[\'br\']} /></code></pre>
      <p {...elementProps[\'p\']}>Let\'s also test interpolation inside other elements. <code {...elementProps[\'code\']}>{ \"foo bar\" }</code></p>
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a loader query of \`?passElementProps=true\` for component example 1 renders as expected within React 1`] = `
Array [
  "propTypes",
  "defaultProps",
  "title",
  "myArray",
  "anObject",
]
`;

exports[`Webpack loader with a loader query of \`?passElementProps=true\` for component example 1 renders as expected within React 2`] = `
<div
  className={undefined}
  style={undefined}>
  <h1>
    Markdown template with imports, static attributes and interpolations
  </h1>
  <p>
    This file includes some custom static attributes which should be reflected fine on the resultant object
  </p>
  <p>
    This is a 
    <em>
      Markdown Component
    </em>
     file. Here you can include JSX-style assignment expressions; this component was generated using version 
    0.7.1
     of 
    markdown-component-loader
    !
  </p>
  <p>
    We\'re importing foo, which is 
    bar
    .
  </p>
  <p>
    We\'re also adding a react component here: 
    <bar
      style={
        Object {
          "foo": "bar",
        }
      }
      url="https://github.com/ticky/markdown-component-loader/issues" />
  </p>
  <p>
    Another cool thing you can do is use JSX 
    <strong>
      directly
    </strong>
     - here’s an SVG element, used inline: 
    <svg
      style={
        Object {
          "display": "inline",
          "height": "1em",
        }
      }
      viewBox="0 0 304 290">
      <path
        d="M2,111 h300 l-242.7,176.3 92.7,-285.3 92.7,285.3 z"
        fill="none"
        stroke="currentColor"
        strokeWidth="16" />
    </svg>
    .
  </p>
</div>
`;

exports[`Webpack loader with a loader query of \`?passElementProps=true\` for component example 1 returns the expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.7.1
import React from \'react\';
import PropTypes from \'prop-types\';
import foo from \'foo\';
import Bar from \'foo\';
import { bugs, name, version } from \'../package.json\';

MarkdownComponent.propTypes = {
  className: PropTypes.string,
  style: PropTypes.object,
  elementProps: PropTypes.object
};

MarkdownComponent.defaultProps = {
  elementProps: {}
};

MarkdownComponent[\'title\'] = \'a custom title\';

MarkdownComponent[\'myArray\'] = [
  \'foo\',
  \'bar\'
];

MarkdownComponent[\'anObject\'] = {
  \'foo\': \'bar\'
};

function MarkdownComponent(props) {
  const {className, style, elementProps} = props;

  return (
    <div className={className} style={style}>
      <h1 {...elementProps[\'h1\']}>Markdown template with imports, static attributes and interpolations</h1>
      <p {...elementProps[\'p\']}>This file includes some custom static attributes which should be reflected fine on the resultant object</p>
      <p {...elementProps[\'p\']}>This is a <em {...elementProps[\'em\']}>Markdown Component</em> file. Here you can include JSX-style assignment expressions; this component was generated using version { version } of { name }!</p>
      <p {...elementProps[\'p\']}>We\'re importing foo, which is {foo}.</p>
      <p {...elementProps[\'p\']}>We\'re also adding a react component here: {<Bar {...bugs} style={{ foo: \'bar\' }} />}</p>
      <p {...elementProps[\'p\']}>Another cool thing you can do is use JSX <strong {...elementProps[\'strong\']}>directly</strong> - here’s an SVG element, used inline: { <svg {...elementProps[\'svg\']} style={{ display: \'inline\', height: \'1em\' }} viewBox=\"0 0 304 290\"><path {...elementProps[\'path\']} fill=\"none\" stroke=\"currentColor\" strokeWidth=\"16\" d=\"M2,111 h300 l-242.7,176.3 92.7,-285.3 92.7,285.3 z\" /></svg> }.</p>
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a loader query of \`?passElementProps=true\` for component example 2 renders as expected within React 1`] = `
Array [
  "propTypes",
  "defaultProps",
]
`;

exports[`Webpack loader with a loader query of \`?passElementProps=true\` for component example 2 renders as expected within React 2`] = `
<div
  className={undefined}
  style={undefined} />
`;

exports[`Webpack loader with a loader query of \`?passElementProps=true\` for component example 2 returns the expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.7.1
import React from \'react\';
import PropTypes from \'prop-types\';

MarkdownComponent.propTypes = {
  className: PropTypes.string,
  style: PropTypes.object,
  elementProps: PropTypes.object
};

MarkdownComponent.defaultProps = {
  elementProps: {}
};

function MarkdownComponent(props) {
  const {className, style, elementProps} = props;

  return (
    <div className={className} style={style}>
      {/* no input given */}
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"markdownItPlugins":"somenonsensevalue"}\` for component example 0 renders as expected within React 1`] = `
Array [
  "propTypes",
]
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"markdownItPlugins":"somenonsensevalue"}\` for component example 0 renders as expected within React 2`] = `
<div
  className={undefined}
  style={undefined}>
  <h1>
    Test Document
  </h1>
  <p>
    [[toc]]
  </p>
  <h2>
    Basic Markdown Template
  </h2>
  <p>
    This is a basic Markdown template, with no interpolations going on.
  </p>
  <p>
    This should be
  </p>
  <ul>
    <li>
      easy and;
    </li>
    <li>
      predictable!
    </li>
  </ul>
  <h2>
    Here's a couple of hyperlinks
  </h2>
  <p>
    <a
      href="https://duckduckgo.com">
      https://duckduckgo.com
    </a>
     
    <a
      href="https://github.com">
      GitHub
    </a>
  </p>
  <h2>
    Here's a code snippet with no interpolations
  </h2>
  <pre>
    <code
      className="language-bash">
      npm install -g yarn
      <br />
    </code>
  </pre>
  <h2>
    Here's a code snippet with things which shouldn't be treated as interpolations
  </h2>
  <pre>
    <code
      className="language-bash">
      <span
        className="hljs-keyword">
        function
      </span>
       
      <span
        className="hljs-function">
        <span
          className="hljs-title">
          rbenv
        </span>
      </span>
      () 
      {
      <br />
        
      RUBY=blah
      <br />
      }
      <br />
    </code>
  </pre>
  <h2>
    Here's a paragraph with a simple interpolation
  </h2>
  <p>
    There are 
    0
     props being supplied to this component.
  </p>
  <h2>
    Here's a code snippet with a simple interpolation
  </h2>
  <pre>
    <code
      className="language-bash">
      <span
        className="hljs-keyword">
        function
      </span>
       
      <span
        className="hljs-function">
        <span
          className="hljs-title">
          rbenv
        </span>
      </span>
      () 
      {
      <br />
        
      RUBY=
      <br />
      }
      <br />
    </code>
  </pre>
  <h2>
    Here's an unhinted code snippet
  </h2>
  <pre>
    <code>
      <span
        className="hljs-keyword">
        the
      </span>
       quick brown fox jumps over 
      <span
        className="hljs-keyword">
        the
      </span>
       lazy dog
      <br />
    </code>
  </pre>
  <h2>
    Here's an unhinted snippet with no discernible language
  </h2>
  <pre>
    <code>
      )
      <span
        className="hljs-comment">
        ()
      </span>
      <span
        className="hljs-comment">
        (()
      </span>
      )
      <br />
    </code>
  </pre>
  <pre>
    <code
      className="language-bash">
      brew tap buildkite/buildkite
      <br />
      brew install --token=
      <span
        className="hljs-string">
        '
        INSERT-YOUR-AGENT-TOKEN-HERE
        '
      </span>
       buildkite-agent
      <br />
      <br />
      <span
        className="hljs-function">
        <span
          className="hljs-title">
          function
        </span>
      </span>
      () 
      {
      <br />
        
      ENV=
      <span
        className="hljs-string">
        "foo_bar"
      </span>
      <br />
      }
      <br />
    </code>
  </pre>
  <p>
    Let's also test interpolation inside other elements. 
    <code>
      foo bar
    </code>
  </p>
</div>
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"markdownItPlugins":"somenonsensevalue"}\` for component example 0 returns the expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.7.1

MarkdownComponent.propTypes = {
  className: PropTypes.string,
  style: PropTypes.object
};

function MarkdownComponent(props) {
  const {className, style} = props;

  return (
    <div className={className} style={style}>
      <h1>Test Document</h1>
      <p>[[toc]]</p>
      <h2>Basic Markdown Template</h2>
      <p>This is a basic Markdown template, with no interpolations going on.</p>
      <p>This should be</p>
      <ul>
        <li>easy and;</li>
        <li>predictable!</li>
      </ul>
      <h2>Here\'s a couple of hyperlinks</h2>
      <p><a href=\"https://duckduckgo.com\">https://duckduckgo.com</a> <a href=\"https://github.com\">GitHub</a></p>
      <h2>Here\'s a code snippet with no interpolations</h2>
      <pre><code className=\"language-bash\">npm install -g yarn<br /></code></pre>
      <h2>Here\'s a code snippet with things which shouldn\'t be treated as interpolations</h2>
      <pre><code className=\"language-bash\"><span className=\"hljs-keyword\">function</span> <span className=\"hljs-function\"><span className=\"hljs-title\">rbenv</span></span>() {\"{\"}<br />{\"  \"}RUBY=blah<br />{\"}\"}<br /></code></pre>
      <h2>Here\'s a paragraph with a simple interpolation</h2>
      <p>There are {Object.keys(props).length} props being supplied to this component.</p>
      <h2>Here\'s a code snippet with a simple interpolation</h2>
      <pre><code className=\"language-bash\"><span className=\"hljs-keyword\">function</span> <span className=\"hljs-function\"><span className=\"hljs-title\">rbenv</span></span>() {\"{\"}<br />{\"  \"}RUBY={props.rubycontent}<br />{\"}\"}<br /></code></pre>
      <h2>Here\'s an unhinted code snippet</h2>
      <pre><code><span className=\"hljs-keyword\">the</span> quick brown fox jumps over <span className=\"hljs-keyword\">the</span> lazy dog<br /></code></pre>
      <h2>Here\'s an unhinted snippet with no discernible language</h2>
      <pre><code>)<span className=\"hljs-comment\">()</span><span className=\"hljs-comment\">(()</span>)<br /></code></pre>
      <pre><code className=\"language-bash\">brew tap buildkite/buildkite<br />brew install --token=<span className=\"hljs-string\">\'{props.token || \'INSERT-YOUR-AGENT-TOKEN-HERE\'}\'</span> buildkite-agent<br /><br /><span className=\"hljs-function\"><span className=\"hljs-title\">function</span></span>() {\"{\"}<br />{\"  \"}ENV=<span className=\"hljs-string\">\"foo_bar\"</span><br />{\"}\"}<br /></code></pre>
      <p>Let\'s also test interpolation inside other elements. <code>{ \"foo bar\" }</code></p>
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"markdownItPlugins":"somenonsensevalue"}\` for component example 1 renders as expected within React 1`] = `
Array [
  "propTypes",
  "title",
  "myArray",
  "anObject",
]
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"markdownItPlugins":"somenonsensevalue"}\` for component example 1 renders as expected within React 2`] = `
<div
  className={undefined}
  style={undefined}>
  <h1>
    Markdown template with imports, static attributes and interpolations
  </h1>
  <p>
    This file includes some custom static attributes which should be reflected fine on the resultant object
  </p>
  <p>
    This is a 
    <em>
      Markdown Component
    </em>
     file. Here you can include JSX-style assignment expressions; this component was generated using version 
    0.7.1
     of 
    markdown-component-loader
    !
  </p>
  <p>
    We're importing foo, which is 
    bar
    .
  </p>
  <p>
    We're also adding a react component here: 
    <bar
      style={
        Object {
          "foo": "bar",
        }
      }
      url="https://github.com/ticky/markdown-component-loader/issues" />
  </p>
  <p>
    Another cool thing you can do is use JSX 
    <strong>
      directly
    </strong>
     - here’s an SVG element, used inline: 
    <svg
      style={
        Object {
          "display": "inline",
          "height": "1em",
        }
      }
      viewBox="0 0 304 290">
      <path
        d="M2,111 h300 l-242.7,176.3 92.7,-285.3 92.7,285.3 z"
        fill="none"
        stroke="currentColor"
        strokeWidth="16" />
    </svg>
    .
  </p>
</div>
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"markdownItPlugins":"somenonsensevalue"}\` for component example 1 returns the expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.7.1
import foo from \'foo\';
import Bar from \'foo\';
import { bugs, name, version } from \'../package.json\';

MarkdownComponent.propTypes = {
  className: PropTypes.string,
  style: PropTypes.object
};

MarkdownComponent[\'title\'] = \'a custom title\';

MarkdownComponent[\'myArray\'] = [
  \'foo\',
  \'bar\'
];

MarkdownComponent[\'anObject\'] = {
  \'foo\': \'bar\'
};

function MarkdownComponent(props) {
  const {className, style} = props;

  return (
    <div className={className} style={style}>
      <h1>Markdown template with imports, static attributes and interpolations</h1>
      <p>This file includes some custom static attributes which should be reflected fine on the resultant object</p>
      <p>This is a <em>Markdown Component</em> file. Here you can include JSX-style assignment expressions; this component was generated using version { version } of { name }!</p>
      <p>We\'re importing foo, which is {foo}.</p>
      <p>We\'re also adding a react component here: {<Bar {...bugs} style={{ foo: \'bar\' }} />}</p>
      <p>Another cool thing you can do is use JSX <strong>directly</strong> - here’s an SVG element, used inline: { <svg style={{ display: \'inline\', height: \'1em\' }} viewBox=\"0 0 304 290\"><path fill=\"none\" stroke=\"currentColor\" strokeWidth=\"16\" d=\"M2,111 h300 l-242.7,176.3 92.7,-285.3 92.7,285.3 z\" /></svg> }.</p>
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"markdownItPlugins":"somenonsensevalue"}\` for component example 2 renders as expected within React 1`] = `
Array [
  "propTypes",
]
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"markdownItPlugins":"somenonsensevalue"}\` for component example 2 renders as expected within React 2`] = `
<div
  className={undefined}
  style={undefined} />
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"markdownItPlugins":"somenonsensevalue"}\` for component example 2 returns the expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.7.1

MarkdownComponent.propTypes = {
  className: PropTypes.string,
  style: PropTypes.object
};

function MarkdownComponent(props) {
  const {className, style} = props;

  return (
    <div className={className} style={style}>
      {/* no input given */}
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 0 renders as expected within React 1`] = `
Array [
  "propTypes",
]
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 0 renders as expected within React 2`] = `
<div
  className={undefined}
  style={undefined}>
  <h1
    id="test-document">
    Test Document
  </h1>
  <p />
  <div
    className="my-container-class">
    <ul>
      <li>
        <a
          href="#test-document">
          Test Document
        </a>
        <ul>
          <li>
            <a
              href="#basic-markdown-template">
              Basic Markdown Template
            </a>
          </li>
          <li>
            <a
              href="#heres-a-couple-of-hyperlinks">
              Here's a couple of hyperlinks
            </a>
          </li>
          <li>
            <a
              href="#heres-a-code-snippet-with-no-interpolations">
              Here's a code snippet with no interpolations
            </a>
          </li>
          <li>
            <a
              href="#heres-a-code-snippet-with-things-which-shouldnt-be-treated-as-interpolations">
              Here's a code snippet with things which shouldn't be treated as interpolations
            </a>
          </li>
          <li>
            <a
              href="#heres-a-paragraph-with-a-simple-interpolation">
              Here's a paragraph with a simple interpolation
            </a>
          </li>
          <li>
            <a
              href="#heres-a-code-snippet-with-a-simple-interpolation">
              Here's a code snippet with a simple interpolation
            </a>
          </li>
          <li>
            <a
              href="#heres-an-unhinted-code-snippet">
              Here's an unhinted code snippet
            </a>
          </li>
          <li>
            <a
              href="#heres-an-unhinted-snippet-with-no-discernible-language">
              Here's an unhinted snippet with no discernible language
            </a>
          </li>
        </ul>
      </li>
    </ul>
  </div>
  <p />
  <h2
    id="basic-markdown-template">
    Basic Markdown Template
  </h2>
  <p>
    This is a basic Markdown template, with no interpolations going on.
  </p>
  <p>
    This should be
  </p>
  <ul>
    <li>
      easy and;
    </li>
    <li>
      predictable!
    </li>
  </ul>
  <h2
    id="heres-a-couple-of-hyperlinks">
    Here's a couple of hyperlinks
  </h2>
  <p>
    <a
      href="https://duckduckgo.com">
      https://duckduckgo.com
    </a>
     
    <a
      href="https://github.com">
      GitHub
    </a>
  </p>
  <h2
    id="heres-a-code-snippet-with-no-interpolations">
    Here's a code snippet with no interpolations
  </h2>
  <pre>
    <code
      className="language-bash">
      npm install -g yarn
      <br />
    </code>
  </pre>
  <h2
    id="heres-a-code-snippet-with-things-which-shouldnt-be-treated-as-interpolations">
    Here's a code snippet with things which shouldn't be treated as interpolations
  </h2>
  <pre>
    <code
      className="language-bash">
      <span
        className="hljs-keyword">
        function
      </span>
       
      <span
        className="hljs-function">
        <span
          className="hljs-title">
          rbenv
        </span>
      </span>
      () 
      {
      <br />
        
      RUBY=blah
      <br />
      }
      <br />
    </code>
  </pre>
  <h2
    id="heres-a-paragraph-with-a-simple-interpolation">
    Here's a paragraph with a simple interpolation
  </h2>
  <p>
    There are 
    0
     props being supplied to this component.
  </p>
  <h2
    id="heres-a-code-snippet-with-a-simple-interpolation">
    Here's a code snippet with a simple interpolation
  </h2>
  <pre>
    <code
      className="language-bash">
      <span
        className="hljs-keyword">
        function
      </span>
       
      <span
        className="hljs-function">
        <span
          className="hljs-title">
          rbenv
        </span>
      </span>
      () 
      {
      <br />
        
      RUBY=
      <br />
      }
      <br />
    </code>
  </pre>
  <h2
    id="heres-an-unhinted-code-snippet">
    Here's an unhinted code snippet
  </h2>
  <pre>
    <code>
      <span
        className="hljs-keyword">
        the
      </span>
       quick brown fox jumps over 
      <span
        className="hljs-keyword">
        the
      </span>
       lazy dog
      <br />
    </code>
  </pre>
  <h2
    id="heres-an-unhinted-snippet-with-no-discernible-language">
    Here's an unhinted snippet with no discernible language
  </h2>
  <pre>
    <code>
      )
      <span
        className="hljs-comment">
        ()
      </span>
      <span
        className="hljs-comment">
        (()
      </span>
      )
      <br />
    </code>
  </pre>
  <pre>
    <code
      className="language-bash">
      brew tap buildkite/buildkite
      <br />
      brew install --token=
      <span
        className="hljs-string">
        '
        INSERT-YOUR-AGENT-TOKEN-HERE
        '
      </span>
       buildkite-agent
      <br />
      <br />
      <span
        className="hljs-function">
        <span
          className="hljs-title">
          function
        </span>
      </span>
      () 
      {
      <br />
        
      ENV=
      <span
        className="hljs-string">
        "foo_bar"
      </span>
      <br />
      }
      <br />
    </code>
  </pre>
  <p>
    Let's also test interpolation inside other elements. 
    <code>
      foo bar
    </code>
  </p>
</div>
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 0 returns the expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.7.1

MarkdownComponent.propTypes = {
  className: PropTypes.string,
  style: PropTypes.object
};

function MarkdownComponent(props) {
  const {className, style} = props;

  return (
    <div className={className} style={style}>
      <h1 id=\"test-document\">Test Document</h1>
      <p /><div className=\"my-container-class\"><ul><li><a href=\"#test-document\">Test Document</a><ul><li><a href=\"#basic-markdown-template\">Basic Markdown Template</a></li><li><a href=\"#heres-a-couple-of-hyperlinks\">Here\'s a couple of hyperlinks</a></li><li><a href=\"#heres-a-code-snippet-with-no-interpolations\">Here\'s a code snippet with no interpolations</a></li><li><a href=\"#heres-a-code-snippet-with-things-which-shouldnt-be-treated-as-interpolations\">Here\'s a code snippet with things which shouldn\'t be treated as interpolations</a></li><li><a href=\"#heres-a-paragraph-with-a-simple-interpolation\">Here\'s a paragraph with a simple interpolation</a></li><li><a href=\"#heres-a-code-snippet-with-a-simple-interpolation\">Here\'s a code snippet with a simple interpolation</a></li><li><a href=\"#heres-an-unhinted-code-snippet\">Here\'s an unhinted code snippet</a></li><li><a href=\"#heres-an-unhinted-snippet-with-no-discernible-language\">Here\'s an unhinted snippet with no discernible language</a></li></ul></li></ul></div><p />
      <h2 id=\"basic-markdown-template\">Basic Markdown Template</h2>
      <p>This is a basic Markdown template, with no interpolations going on.</p>
      <p>This should be</p>
      <ul>
        <li>easy and;</li>
        <li>predictable!</li>
      </ul>
      <h2 id=\"heres-a-couple-of-hyperlinks\">Here\'s a couple of hyperlinks</h2>
      <p><a href=\"https://duckduckgo.com\">https://duckduckgo.com</a> <a href=\"https://github.com\">GitHub</a></p>
      <h2 id=\"heres-a-code-snippet-with-no-interpolations\">Here\'s a code snippet with no interpolations</h2>
      <pre><code className=\"language-bash\">npm install -g yarn<br /></code></pre>
      <h2 id=\"heres-a-code-snippet-with-things-which-shouldnt-be-treated-as-interpolations\">Here\'s a code snippet with things which shouldn\'t be treated as interpolations</h2>
      <pre><code className=\"language-bash\"><span className=\"hljs-keyword\">function</span> <span className=\"hljs-function\"><span className=\"hljs-title\">rbenv</span></span>() {\"{\"}<br />{\"  \"}RUBY=blah<br />{\"}\"}<br /></code></pre>
      <h2 id=\"heres-a-paragraph-with-a-simple-interpolation\">Here\'s a paragraph with a simple interpolation</h2>
      <p>There are {Object.keys(props).length} props being supplied to this component.</p>
      <h2 id=\"heres-a-code-snippet-with-a-simple-interpolation\">Here\'s a code snippet with a simple interpolation</h2>
      <pre><code className=\"language-bash\"><span className=\"hljs-keyword\">function</span> <span className=\"hljs-function\"><span className=\"hljs-title\">rbenv</span></span>() {\"{\"}<br />{\"  \"}RUBY={props.rubycontent}<br />{\"}\"}<br /></code></pre>
      <h2 id=\"heres-an-unhinted-code-snippet\">Here\'s an unhinted code snippet</h2>
      <pre><code><span className=\"hljs-keyword\">the</span> quick brown fox jumps over <span className=\"hljs-keyword\">the</span> lazy dog<br /></code></pre>
      <h2 id=\"heres-an-unhinted-snippet-with-no-discernible-language\">Here\'s an unhinted snippet with no discernible language</h2>
      <pre><code>)<span className=\"hljs-comment\">()</span><span className=\"hljs-comment\">(()</span>)<br /></code></pre>
      <pre><code className=\"language-bash\">brew tap buildkite/buildkite<br />brew install --token=<span className=\"hljs-string\">\'{props.token || \'INSERT-YOUR-AGENT-TOKEN-HERE\'}\'</span> buildkite-agent<br /><br /><span className=\"hljs-function\"><span className=\"hljs-title\">function</span></span>() {\"{\"}<br />{\"  \"}ENV=<span className=\"hljs-string\">\"foo_bar\"</span><br />{\"}\"}<br /></code></pre>
      <p>Let\'s also test interpolation inside other elements. <code>{ \"foo bar\" }</code></p>
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 1 renders as expected within React 1`] = `
Array [
  "propTypes",
  "title",
  "myArray",
  "anObject",
]
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 1 renders as expected within React 2`] = `
<div
  className={undefined}
  style={undefined}>
  <h1
    id="markdown-template-with-imports-static-attributes-and-interpolations">
    Markdown template with imports, static attributes and interpolations
  </h1>
  <p>
    This file includes some custom static attributes which should be reflected fine on the resultant object
  </p>
  <p>
    This is a 
    <em>
      Markdown Component
    </em>
     file. Here you can include JSX-style assignment expressions; this component was generated using version 
    0.7.1
     of 
    markdown-component-loader
    !
  </p>
  <p>
    We're importing foo, which is 
    bar
    .
  </p>
  <p>
    We're also adding a react component here: 
    <bar
      style={
        Object {
          "foo": "bar",
        }
      }
      url="https://github.com/ticky/markdown-component-loader/issues" />
  </p>
  <p>
    Another cool thing you can do is use JSX 
    <strong>
      directly
    </strong>
     - here’s an SVG element, used inline: 
    <svg
      style={
        Object {
          "display": "inline",
          "height": "1em",
        }
      }
      viewBox="0 0 304 290">
      <path
        d="M2,111 h300 l-242.7,176.3 92.7,-285.3 92.7,285.3 z"
        fill="none"
        stroke="currentColor"
        strokeWidth="16" />
    </svg>
    .
  </p>
</div>
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 1 returns the expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.7.1
import foo from \'foo\';
import Bar from \'foo\';
import { bugs, name, version } from \'../package.json\';

MarkdownComponent.propTypes = {
  className: PropTypes.string,
  style: PropTypes.object
};

MarkdownComponent[\'title\'] = \'a custom title\';

MarkdownComponent[\'myArray\'] = [
  \'foo\',
  \'bar\'
];

MarkdownComponent[\'anObject\'] = {
  \'foo\': \'bar\'
};

function MarkdownComponent(props) {
  const {className, style} = props;

  return (
    <div className={className} style={style}>
      <h1 id=\"markdown-template-with-imports-static-attributes-and-interpolations\">Markdown template with imports, static attributes and interpolations</h1>
      <p>This file includes some custom static attributes which should be reflected fine on the resultant object</p>
      <p>This is a <em>Markdown Component</em> file. Here you can include JSX-style assignment expressions; this component was generated using version { version } of { name }!</p>
      <p>We\'re importing foo, which is {foo}.</p>
      <p>We\'re also adding a react component here: {<Bar {...bugs} style={{ foo: \'bar\' }} />}</p>
      <p>Another cool thing you can do is use JSX <strong>directly</strong> - here’s an SVG element, used inline: { <svg style={{ display: \'inline\', height: \'1em\' }} viewBox=\"0 0 304 290\"><path fill=\"none\" stroke=\"currentColor\" strokeWidth=\"16\" d=\"M2,111 h300 l-242.7,176.3 92.7,-285.3 92.7,285.3 z\" /></svg> }.</p>
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 2 renders as expected within React 1`] = `
Array [
  "propTypes",
]
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 2 renders as expected within React 2`] = `
<div
  className={undefined}
  style={undefined} />
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 2 returns the expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.7.1

MarkdownComponent.propTypes = {
  className: PropTypes.string,
  style: PropTypes.object
};

function MarkdownComponent(props) {
  const {className, style} = props;

  return (
    <div className={className} style={style}>
      {/* no input given */}
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"markdownItPlugins":[null]}\` for component example 0 renders as expected within React 1`] = `
Array [
  "propTypes",
]
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"markdownItPlugins":[null]}\` for component example 0 renders as expected within React 2`] = `
<div
  className={undefined}
  style={undefined}>
  <h1
    id="test-document">
    Test Document
  </h1>
  <p>
    [[toc]]
  </p>
  <h2
    id="basic-markdown-template">
    Basic Markdown Template
  </h2>
  <p>
    This is a basic Markdown template, with no interpolations going on.
  </p>
  <p>
    This should be
  </p>
  <ul>
    <li>
      easy and;
    </li>
    <li>
      predictable!
    </li>
  </ul>
  <h2
    id="heres-a-couple-of-hyperlinks">
    Here's a couple of hyperlinks
  </h2>
  <p>
    <a
      href="https://duckduckgo.com">
      https://duckduckgo.com
    </a>
     
    <a
      href="https://github.com">
      GitHub
    </a>
  </p>
  <h2
    id="heres-a-code-snippet-with-no-interpolations">
    Here's a code snippet with no interpolations
  </h2>
  <pre>
    <code
      className="language-bash">
      npm install -g yarn
      <br />
    </code>
  </pre>
  <h2
    id="heres-a-code-snippet-with-things-which-shouldnt-be-treated-as-interpolations">
    Here's a code snippet with things which shouldn't be treated as interpolations
  </h2>
  <pre>
    <code
      className="language-bash">
      <span
        className="hljs-keyword">
        function
      </span>
       
      <span
        className="hljs-function">
        <span
          className="hljs-title">
          rbenv
        </span>
      </span>
      () 
      {
      <br />
        
      RUBY=blah
      <br />
      }
      <br />
    </code>
  </pre>
  <h2
    id="heres-a-paragraph-with-a-simple-interpolation">
    Here's a paragraph with a simple interpolation
  </h2>
  <p>
    There are 
    0
     props being supplied to this component.
  </p>
  <h2
    id="heres-a-code-snippet-with-a-simple-interpolation">
    Here's a code snippet with a simple interpolation
  </h2>
  <pre>
    <code
      className="language-bash">
      <span
        className="hljs-keyword">
        function
      </span>
       
      <span
        className="hljs-function">
        <span
          className="hljs-title">
          rbenv
        </span>
      </span>
      () 
      {
      <br />
        
      RUBY=
      <br />
      }
      <br />
    </code>
  </pre>
  <h2
    id="heres-an-unhinted-code-snippet">
    Here's an unhinted code snippet
  </h2>
  <pre>
    <code>
      <span
        className="hljs-keyword">
        the
      </span>
       quick brown fox jumps over 
      <span
        className="hljs-keyword">
        the
      </span>
       lazy dog
      <br />
    </code>
  </pre>
  <h2
    id="heres-an-unhinted-snippet-with-no-discernible-language">
    Here's an unhinted snippet with no discernible language
  </h2>
  <pre>
    <code>
      )
      <span
        className="hljs-comment">
        ()
      </span>
      <span
        className="hljs-comment">
        (()
      </span>
      )
      <br />
    </code>
  </pre>
  <pre>
    <code
      className="language-bash">
      brew tap buildkite/buildkite
      <br />
      brew install --token=
      <span
        className="hljs-string">
        '
        INSERT-YOUR-AGENT-TOKEN-HERE
        '
      </span>
       buildkite-agent
      <br />
      <br />
      <span
        className="hljs-function">
        <span
          className="hljs-title">
          function
        </span>
      </span>
      () 
      {
      <br />
        
      ENV=
      <span
        className="hljs-string">
        "foo_bar"
      </span>
      <br />
      }
      <br />
    </code>
  </pre>
  <p>
    Let's also test interpolation inside other elements. 
    <code>
      foo bar
    </code>
  </p>
</div>
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"markdownItPlugins":[null]}\` for component example 0 returns the expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.7.1

MarkdownComponent.propTypes = {
  className: PropTypes.string,
  style: PropTypes.object
};

function MarkdownComponent(props) {
  const {className, style} = props;

  return (
    <div className={className} style={style}>
      <h1 id=\"test-document\">Test Document</h1>
      <p>[[toc]]</p>
      <h2 id=\"basic-markdown-template\">Basic Markdown Template</h2>
      <p>This is a basic Markdown template, with no interpolations going on.</p>
      <p>This should be</p>
      <ul>
        <li>easy and;</li>
        <li>predictable!</li>
      </ul>
      <h2 id=\"heres-a-couple-of-hyperlinks\">Here\'s a couple of hyperlinks</h2>
      <p><a href=\"https://duckduckgo.com\">https://duckduckgo.com</a> <a href=\"https://github.com\">GitHub</a></p>
      <h2 id=\"heres-a-code-snippet-with-no-interpolations\">Here\'s a code snippet with no interpolations</h2>
      <pre><code className=\"language-bash\">npm install -g yarn<br /></code></pre>
      <h2 id=\"heres-a-code-snippet-with-things-which-shouldnt-be-treated-as-interpolations\">Here\'s a code snippet with things which shouldn\'t be treated as interpolations</h2>
      <pre><code className=\"language-bash\"><span className=\"hljs-keyword\">function</span> <span className=\"hljs-function\"><span className=\"hljs-title\">rbenv</span></span>() {\"{\"}<br />{\"  \"}RUBY=blah<br />{\"}\"}<br /></code></pre>
      <h2 id=\"heres-a-paragraph-with-a-simple-interpolation\">Here\'s a paragraph with a simple interpolation</h2>
      <p>There are {Object.keys(props).length} props being supplied to this component.</p>
      <h2 id=\"heres-a-code-snippet-with-a-simple-interpolation\">Here\'s a code snippet with a simple interpolation</h2>
      <pre><code className=\"language-bash\"><span className=\"hljs-keyword\">function</span> <span className=\"hljs-function\"><span className=\"hljs-title\">rbenv</span></span>() {\"{\"}<br />{\"  \"}RUBY={props.rubycontent}<br />{\"}\"}<br /></code></pre>
      <h2 id=\"heres-an-unhinted-code-snippet\">Here\'s an unhinted code snippet</h2>
      <pre><code><span className=\"hljs-keyword\">the</span> quick brown fox jumps over <span className=\"hljs-keyword\">the</span> lazy dog<br /></code></pre>
      <h2 id=\"heres-an-unhinted-snippet-with-no-discernible-language\">Here\'s an unhinted snippet with no discernible language</h2>
      <pre><code>)<span className=\"hljs-comment\">()</span><span className=\"hljs-comment\">(()</span>)<br /></code></pre>
      <pre><code className=\"language-bash\">brew tap buildkite/buildkite<br />brew install --token=<span className=\"hljs-string\">\'{props.token || \'INSERT-YOUR-AGENT-TOKEN-HERE\'}\'</span> buildkite-agent<br /><br /><span className=\"hljs-function\"><span className=\"hljs-title\">function</span></span>() {\"{\"}<br />{\"  \"}ENV=<span className=\"hljs-string\">\"foo_bar\"</span><br />{\"}\"}<br /></code></pre>
      <p>Let\'s also test interpolation inside other elements. <code>{ \"foo bar\" }</code></p>
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"markdownItPlugins":[null]}\` for component example 1 renders as expected within React 1`] = `
Array [
  "propTypes",
  "title",
  "myArray",
  "anObject",
]
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"markdownItPlugins":[null]}\` for component example 1 renders as expected within React 2`] = `
<div
  className={undefined}
  style={undefined}>
  <h1
    id="markdown-template-with-imports-static-attributes-and-interpolations">
    Markdown template with imports, static attributes and interpolations
  </h1>
  <p>
    This file includes some custom static attributes which should be reflected fine on the resultant object
  </p>
  <p>
    This is a 
    <em>
      Markdown Component
    </em>
     file. Here you can include JSX-style assignment expressions; this component was generated using version 
    0.7.1
     of 
    markdown-component-loader
    !
  </p>
  <p>
    We're importing foo, which is 
    bar
    .
  </p>
  <p>
    We're also adding a react component here: 
    <bar
      style={
        Object {
          "foo": "bar",
        }
      }
      url="https://github.com/ticky/markdown-component-loader/issues" />
  </p>
  <p>
    Another cool thing you can do is use JSX 
    <strong>
      directly
    </strong>
     - here’s an SVG element, used inline: 
    <svg
      style={
        Object {
          "display": "inline",
          "height": "1em",
        }
      }
      viewBox="0 0 304 290">
      <path
        d="M2,111 h300 l-242.7,176.3 92.7,-285.3 92.7,285.3 z"
        fill="none"
        stroke="currentColor"
        strokeWidth="16" />
    </svg>
    .
  </p>
</div>
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"markdownItPlugins":[null]}\` for component example 1 returns the expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.7.1
import foo from \'foo\';
import Bar from \'foo\';
import { bugs, name, version } from \'../package.json\';

MarkdownComponent.propTypes = {
  className: PropTypes.string,
  style: PropTypes.object
};

MarkdownComponent[\'title\'] = \'a custom title\';

MarkdownComponent[\'myArray\'] = [
  \'foo\',
  \'bar\'
];

MarkdownComponent[\'anObject\'] = {
  \'foo\': \'bar\'
};

function MarkdownComponent(props) {
  const {className, style} = props;

  return (
    <div className={className} style={style}>
      <h1 id=\"markdown-template-with-imports-static-attributes-and-interpolations\">Markdown template with imports, static attributes and interpolations</h1>
      <p>This file includes some custom static attributes which should be reflected fine on the resultant object</p>
      <p>This is a <em>Markdown Component</em> file. Here you can include JSX-style assignment expressions; this component was generated using version { version } of { name }!</p>
      <p>We\'re importing foo, which is {foo}.</p>
      <p>We\'re also adding a react component here: {<Bar {...bugs} style={{ foo: \'bar\' }} />}</p>
      <p>Another cool thing you can do is use JSX <strong>directly</strong> - here’s an SVG element, used inline: { <svg style={{ display: \'inline\', height: \'1em\' }} viewBox=\"0 0 304 290\"><path fill=\"none\" stroke=\"currentColor\" strokeWidth=\"16\" d=\"M2,111 h300 l-242.7,176.3 92.7,-285.3 92.7,285.3 z\" /></svg> }.</p>
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"markdownItPlugins":[null]}\` for component example 2 renders as expected within React 1`] = `
Array [
  "propTypes",
]
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"markdownItPlugins":[null]}\` for component example 2 renders as expected within React 2`] = `
<div
  className={undefined}
  style={undefined} />
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"markdownItPlugins":[null]}\` for component example 2 returns the expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.7.1

MarkdownComponent.propTypes = {
  className: PropTypes.string,
  style: PropTypes.object
};

function MarkdownComponent(props) {
  const {className, style} = props;

  return (
    <div className={className} style={style}>
      {/* no input given */}
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"passElementProps":false,"markdownItPlugins":"somenonsensevalue"}\` for component example 0 renders as expected within React 1`] = `
Array [
  "propTypes",
]
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"passElementProps":false,"markdownItPlugins":"somenonsensevalue"}\` for component example 0 renders as expected within React 2`] = `
<div
  className={undefined}
  style={undefined}>
  <h1>
    Test Document
  </h1>
  <p>
    [[toc]]
  </p>
  <h2>
    Basic Markdown Template
  </h2>
  <p>
    This is a basic Markdown template, with no interpolations going on.
  </p>
  <p>
    This should be
  </p>
  <ul>
    <li>
      easy and;
    </li>
    <li>
      predictable!
    </li>
  </ul>
  <h2>
    Here's a couple of hyperlinks
  </h2>
  <p>
    <a
      href="https://duckduckgo.com">
      https://duckduckgo.com
    </a>
     
    <a
      href="https://github.com">
      GitHub
    </a>
  </p>
  <h2>
    Here's a code snippet with no interpolations
  </h2>
  <pre>
    <code
      className="language-bash">
      npm install -g yarn
      <br />
    </code>
  </pre>
  <h2>
    Here's a code snippet with things which shouldn't be treated as interpolations
  </h2>
  <pre>
    <code
      className="language-bash">
      <span
        className="hljs-keyword">
        function
      </span>
       
      <span
        className="hljs-function">
        <span
          className="hljs-title">
          rbenv
        </span>
      </span>
      () 
      {
      <br />
        
      RUBY=blah
      <br />
      }
      <br />
    </code>
  </pre>
  <h2>
    Here's a paragraph with a simple interpolation
  </h2>
  <p>
    There are 
    0
     props being supplied to this component.
  </p>
  <h2>
    Here's a code snippet with a simple interpolation
  </h2>
  <pre>
    <code
      className="language-bash">
      <span
        className="hljs-keyword">
        function
      </span>
       
      <span
        className="hljs-function">
        <span
          className="hljs-title">
          rbenv
        </span>
      </span>
      () 
      {
      <br />
        
      RUBY=
      <br />
      }
      <br />
    </code>
  </pre>
  <h2>
    Here's an unhinted code snippet
  </h2>
  <pre>
    <code>
      <span
        className="hljs-keyword">
        the
      </span>
       quick brown fox jumps over 
      <span
        className="hljs-keyword">
        the
      </span>
       lazy dog
      <br />
    </code>
  </pre>
  <h2>
    Here's an unhinted snippet with no discernible language
  </h2>
  <pre>
    <code>
      )
      <span
        className="hljs-comment">
        ()
      </span>
      <span
        className="hljs-comment">
        (()
      </span>
      )
      <br />
    </code>
  </pre>
  <pre>
    <code
      className="language-bash">
      brew tap buildkite/buildkite
      <br />
      brew install --token=
      <span
        className="hljs-string">
        '
        INSERT-YOUR-AGENT-TOKEN-HERE
        '
      </span>
       buildkite-agent
      <br />
      <br />
      <span
        className="hljs-function">
        <span
          className="hljs-title">
          function
        </span>
      </span>
      () 
      {
      <br />
        
      ENV=
      <span
        className="hljs-string">
        "foo_bar"
      </span>
      <br />
      }
      <br />
    </code>
  </pre>
  <p>
    Let's also test interpolation inside other elements. 
    <code>
      foo bar
    </code>
  </p>
</div>
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"passElementProps":false,"markdownItPlugins":"somenonsensevalue"}\` for component example 0 returns the expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.7.1

MarkdownComponent.propTypes = {
  className: PropTypes.string,
  style: PropTypes.object
};

function MarkdownComponent(props) {
  const {className, style} = props;

  return (
    <div className={className} style={style}>
      <h1>Test Document</h1>
      <p>[[toc]]</p>
      <h2>Basic Markdown Template</h2>
      <p>This is a basic Markdown template, with no interpolations going on.</p>
      <p>This should be</p>
      <ul>
        <li>easy and;</li>
        <li>predictable!</li>
      </ul>
      <h2>Here\'s a couple of hyperlinks</h2>
      <p><a href=\"https://duckduckgo.com\">https://duckduckgo.com</a> <a href=\"https://github.com\">GitHub</a></p>
      <h2>Here\'s a code snippet with no interpolations</h2>
      <pre><code className=\"language-bash\">npm install -g yarn<br /></code></pre>
      <h2>Here\'s a code snippet with things which shouldn\'t be treated as interpolations</h2>
      <pre><code className=\"language-bash\"><span className=\"hljs-keyword\">function</span> <span className=\"hljs-function\"><span className=\"hljs-title\">rbenv</span></span>() {\"{\"}<br />{\"  \"}RUBY=blah<br />{\"}\"}<br /></code></pre>
      <h2>Here\'s a paragraph with a simple interpolation</h2>
      <p>There are {Object.keys(props).length} props being supplied to this component.</p>
      <h2>Here\'s a code snippet with a simple interpolation</h2>
      <pre><code className=\"language-bash\"><span className=\"hljs-keyword\">function</span> <span className=\"hljs-function\"><span className=\"hljs-title\">rbenv</span></span>() {\"{\"}<br />{\"  \"}RUBY={props.rubycontent}<br />{\"}\"}<br /></code></pre>
      <h2>Here\'s an unhinted code snippet</h2>
      <pre><code><span className=\"hljs-keyword\">the</span> quick brown fox jumps over <span className=\"hljs-keyword\">the</span> lazy dog<br /></code></pre>
      <h2>Here\'s an unhinted snippet with no discernible language</h2>
      <pre><code>)<span className=\"hljs-comment\">()</span><span className=\"hljs-comment\">(()</span>)<br /></code></pre>
      <pre><code className=\"language-bash\">brew tap buildkite/buildkite<br />brew install --token=<span className=\"hljs-string\">\'{props.token || \'INSERT-YOUR-AGENT-TOKEN-HERE\'}\'</span> buildkite-agent<br /><br /><span className=\"hljs-function\"><span className=\"hljs-title\">function</span></span>() {\"{\"}<br />{\"  \"}ENV=<span className=\"hljs-string\">\"foo_bar\"</span><br />{\"}\"}<br /></code></pre>
      <p>Let\'s also test interpolation inside other elements. <code>{ \"foo bar\" }</code></p>
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"passElementProps":false,"markdownItPlugins":"somenonsensevalue"}\` for component example 1 renders as expected within React 1`] = `
Array [
  "propTypes",
  "title",
  "myArray",
  "anObject",
]
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"passElementProps":false,"markdownItPlugins":"somenonsensevalue"}\` for component example 1 renders as expected within React 2`] = `
<div
  className={undefined}
  style={undefined}>
  <h1>
    Markdown template with imports, static attributes and interpolations
  </h1>
  <p>
    This file includes some custom static attributes which should be reflected fine on the resultant object
  </p>
  <p>
    This is a 
    <em>
      Markdown Component
    </em>
     file. Here you can include JSX-style assignment expressions; this component was generated using version 
    0.7.1
     of 
    markdown-component-loader
    !
  </p>
  <p>
    We're importing foo, which is 
    bar
    .
  </p>
  <p>
    We're also adding a react component here: 
    <bar
      style={
        Object {
          "foo": "bar",
        }
      }
      url="https://github.com/ticky/markdown-component-loader/issues" />
  </p>
  <p>
    Another cool thing you can do is use JSX 
    <strong>
      directly
    </strong>
     - here’s an SVG element, used inline: 
    <svg
      style={
        Object {
          "display": "inline",
          "height": "1em",
        }
      }
      viewBox="0 0 304 290">
      <path
        d="M2,111 h300 l-242.7,176.3 92.7,-285.3 92.7,285.3 z"
        fill="none"
        stroke="currentColor"
        strokeWidth="16" />
    </svg>
    .
  </p>
</div>
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"passElementProps":false,"markdownItPlugins":"somenonsensevalue"}\` for component example 1 returns the expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.7.1
import foo from \'foo\';
import Bar from \'foo\';
import { bugs, name, version } from \'../package.json\';

MarkdownComponent.propTypes = {
  className: PropTypes.string,
  style: PropTypes.object
};

MarkdownComponent[\'title\'] = \'a custom title\';

MarkdownComponent[\'myArray\'] = [
  \'foo\',
  \'bar\'
];

MarkdownComponent[\'anObject\'] = {
  \'foo\': \'bar\'
};

function MarkdownComponent(props) {
  const {className, style} = props;

  return (
    <div className={className} style={style}>
      <h1>Markdown template with imports, static attributes and interpolations</h1>
      <p>This file includes some custom static attributes which should be reflected fine on the resultant object</p>
      <p>This is a <em>Markdown Component</em> file. Here you can include JSX-style assignment expressions; this component was generated using version { version } of { name }!</p>
      <p>We\'re importing foo, which is {foo}.</p>
      <p>We\'re also adding a react component here: {<Bar {...bugs} style={{ foo: \'bar\' }} />}</p>
      <p>Another cool thing you can do is use JSX <strong>directly</strong> - here’s an SVG element, used inline: { <svg style={{ display: \'inline\', height: \'1em\' }} viewBox=\"0 0 304 290\"><path fill=\"none\" stroke=\"currentColor\" strokeWidth=\"16\" d=\"M2,111 h300 l-242.7,176.3 92.7,-285.3 92.7,285.3 z\" /></svg> }.</p>
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"passElementProps":false,"markdownItPlugins":"somenonsensevalue"}\` for component example 2 renders as expected within React 1`] = `
Array [
  "propTypes",
]
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"passElementProps":false,"markdownItPlugins":"somenonsensevalue"}\` for component example 2 renders as expected within React 2`] = `
<div
  className={undefined}
  style={undefined} />
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"passElementProps":false,"markdownItPlugins":"somenonsensevalue"}\` for component example 2 returns the expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.7.1

MarkdownComponent.propTypes = {
  className: PropTypes.string,
  style: PropTypes.object
};

function MarkdownComponent(props) {
  const {className, style} = props;

  return (
    <div className={className} style={style}>
      {/* no input given */}
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"passElementProps":false,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 0 renders as expected within React 1`] = `
Array [
  "propTypes",
]
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"passElementProps":false,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 0 renders as expected within React 2`] = `
<div
  className={undefined}
  style={undefined}>
  <h1
    id="test-document">
    Test Document
  </h1>
  <p />
  <div
    className="my-container-class">
    <ul>
      <li>
        <a
          href="#test-document">
          Test Document
        </a>
        <ul>
          <li>
            <a
              href="#basic-markdown-template">
              Basic Markdown Template
            </a>
          </li>
          <li>
            <a
              href="#heres-a-couple-of-hyperlinks">
              Here's a couple of hyperlinks
            </a>
          </li>
          <li>
            <a
              href="#heres-a-code-snippet-with-no-interpolations">
              Here's a code snippet with no interpolations
            </a>
          </li>
          <li>
            <a
              href="#heres-a-code-snippet-with-things-which-shouldnt-be-treated-as-interpolations">
              Here's a code snippet with things which shouldn't be treated as interpolations
            </a>
          </li>
          <li>
            <a
              href="#heres-a-paragraph-with-a-simple-interpolation">
              Here's a paragraph with a simple interpolation
            </a>
          </li>
          <li>
            <a
              href="#heres-a-code-snippet-with-a-simple-interpolation">
              Here's a code snippet with a simple interpolation
            </a>
          </li>
          <li>
            <a
              href="#heres-an-unhinted-code-snippet">
              Here's an unhinted code snippet
            </a>
          </li>
          <li>
            <a
              href="#heres-an-unhinted-snippet-with-no-discernible-language">
              Here's an unhinted snippet with no discernible language
            </a>
          </li>
        </ul>
      </li>
    </ul>
  </div>
  <p />
  <h2
    id="basic-markdown-template">
    Basic Markdown Template
  </h2>
  <p>
    This is a basic Markdown template, with no interpolations going on.
  </p>
  <p>
    This should be
  </p>
  <ul>
    <li>
      easy and;
    </li>
    <li>
      predictable!
    </li>
  </ul>
  <h2
    id="heres-a-couple-of-hyperlinks">
    Here's a couple of hyperlinks
  </h2>
  <p>
    <a
      href="https://duckduckgo.com">
      https://duckduckgo.com
    </a>
     
    <a
      href="https://github.com">
      GitHub
    </a>
  </p>
  <h2
    id="heres-a-code-snippet-with-no-interpolations">
    Here's a code snippet with no interpolations
  </h2>
  <pre>
    <code
      className="language-bash">
      npm install -g yarn
      <br />
    </code>
  </pre>
  <h2
    id="heres-a-code-snippet-with-things-which-shouldnt-be-treated-as-interpolations">
    Here's a code snippet with things which shouldn't be treated as interpolations
  </h2>
  <pre>
    <code
      className="language-bash">
      <span
        className="hljs-keyword">
        function
      </span>
       
      <span
        className="hljs-function">
        <span
          className="hljs-title">
          rbenv
        </span>
      </span>
      () 
      {
      <br />
        
      RUBY=blah
      <br />
      }
      <br />
    </code>
  </pre>
  <h2
    id="heres-a-paragraph-with-a-simple-interpolation">
    Here's a paragraph with a simple interpolation
  </h2>
  <p>
    There are 
    0
     props being supplied to this component.
  </p>
  <h2
    id="heres-a-code-snippet-with-a-simple-interpolation">
    Here's a code snippet with a simple interpolation
  </h2>
  <pre>
    <code
      className="language-bash">
      <span
        className="hljs-keyword">
        function
      </span>
       
      <span
        className="hljs-function">
        <span
          className="hljs-title">
          rbenv
        </span>
      </span>
      () 
      {
      <br />
        
      RUBY=
      <br />
      }
      <br />
    </code>
  </pre>
  <h2
    id="heres-an-unhinted-code-snippet">
    Here's an unhinted code snippet
  </h2>
  <pre>
    <code>
      <span
        className="hljs-keyword">
        the
      </span>
       quick brown fox jumps over 
      <span
        className="hljs-keyword">
        the
      </span>
       lazy dog
      <br />
    </code>
  </pre>
  <h2
    id="heres-an-unhinted-snippet-with-no-discernible-language">
    Here's an unhinted snippet with no discernible language
  </h2>
  <pre>
    <code>
      )
      <span
        className="hljs-comment">
        ()
      </span>
      <span
        className="hljs-comment">
        (()
      </span>
      )
      <br />
    </code>
  </pre>
  <pre>
    <code
      className="language-bash">
      brew tap buildkite/buildkite
      <br />
      brew install --token=
      <span
        className="hljs-string">
        '
        INSERT-YOUR-AGENT-TOKEN-HERE
        '
      </span>
       buildkite-agent
      <br />
      <br />
      <span
        className="hljs-function">
        <span
          className="hljs-title">
          function
        </span>
      </span>
      () 
      {
      <br />
        
      ENV=
      <span
        className="hljs-string">
        "foo_bar"
      </span>
      <br />
      }
      <br />
    </code>
  </pre>
  <p>
    Let's also test interpolation inside other elements. 
    <code>
      foo bar
    </code>
  </p>
</div>
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"passElementProps":false,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 0 returns the expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.7.1

MarkdownComponent.propTypes = {
  className: PropTypes.string,
  style: PropTypes.object
};

function MarkdownComponent(props) {
  const {className, style} = props;

  return (
    <div className={className} style={style}>
      <h1 id=\"test-document\">Test Document</h1>
      <p /><div className=\"my-container-class\"><ul><li><a href=\"#test-document\">Test Document</a><ul><li><a href=\"#basic-markdown-template\">Basic Markdown Template</a></li><li><a href=\"#heres-a-couple-of-hyperlinks\">Here\'s a couple of hyperlinks</a></li><li><a href=\"#heres-a-code-snippet-with-no-interpolations\">Here\'s a code snippet with no interpolations</a></li><li><a href=\"#heres-a-code-snippet-with-things-which-shouldnt-be-treated-as-interpolations\">Here\'s a code snippet with things which shouldn\'t be treated as interpolations</a></li><li><a href=\"#heres-a-paragraph-with-a-simple-interpolation\">Here\'s a paragraph with a simple interpolation</a></li><li><a href=\"#heres-a-code-snippet-with-a-simple-interpolation\">Here\'s a code snippet with a simple interpolation</a></li><li><a href=\"#heres-an-unhinted-code-snippet\">Here\'s an unhinted code snippet</a></li><li><a href=\"#heres-an-unhinted-snippet-with-no-discernible-language\">Here\'s an unhinted snippet with no discernible language</a></li></ul></li></ul></div><p />
      <h2 id=\"basic-markdown-template\">Basic Markdown Template</h2>
      <p>This is a basic Markdown template, with no interpolations going on.</p>
      <p>This should be</p>
      <ul>
        <li>easy and;</li>
        <li>predictable!</li>
      </ul>
      <h2 id=\"heres-a-couple-of-hyperlinks\">Here\'s a couple of hyperlinks</h2>
      <p><a href=\"https://duckduckgo.com\">https://duckduckgo.com</a> <a href=\"https://github.com\">GitHub</a></p>
      <h2 id=\"heres-a-code-snippet-with-no-interpolations\">Here\'s a code snippet with no interpolations</h2>
      <pre><code className=\"language-bash\">npm install -g yarn<br /></code></pre>
      <h2 id=\"heres-a-code-snippet-with-things-which-shouldnt-be-treated-as-interpolations\">Here\'s a code snippet with things which shouldn\'t be treated as interpolations</h2>
      <pre><code className=\"language-bash\"><span className=\"hljs-keyword\">function</span> <span className=\"hljs-function\"><span className=\"hljs-title\">rbenv</span></span>() {\"{\"}<br />{\"  \"}RUBY=blah<br />{\"}\"}<br /></code></pre>
      <h2 id=\"heres-a-paragraph-with-a-simple-interpolation\">Here\'s a paragraph with a simple interpolation</h2>
      <p>There are {Object.keys(props).length} props being supplied to this component.</p>
      <h2 id=\"heres-a-code-snippet-with-a-simple-interpolation\">Here\'s a code snippet with a simple interpolation</h2>
      <pre><code className=\"language-bash\"><span className=\"hljs-keyword\">function</span> <span className=\"hljs-function\"><span className=\"hljs-title\">rbenv</span></span>() {\"{\"}<br />{\"  \"}RUBY={props.rubycontent}<br />{\"}\"}<br /></code></pre>
      <h2 id=\"heres-an-unhinted-code-snippet\">Here\'s an unhinted code snippet</h2>
      <pre><code><span className=\"hljs-keyword\">the</span> quick brown fox jumps over <span className=\"hljs-keyword\">the</span> lazy dog<br /></code></pre>
      <h2 id=\"heres-an-unhinted-snippet-with-no-discernible-language\">Here\'s an unhinted snippet with no discernible language</h2>
      <pre><code>)<span className=\"hljs-comment\">()</span><span className=\"hljs-comment\">(()</span>)<br /></code></pre>
      <pre><code className=\"language-bash\">brew tap buildkite/buildkite<br />brew install --token=<span className=\"hljs-string\">\'{props.token || \'INSERT-YOUR-AGENT-TOKEN-HERE\'}\'</span> buildkite-agent<br /><br /><span className=\"hljs-function\"><span className=\"hljs-title\">function</span></span>() {\"{\"}<br />{\"  \"}ENV=<span className=\"hljs-string\">\"foo_bar\"</span><br />{\"}\"}<br /></code></pre>
      <p>Let\'s also test interpolation inside other elements. <code>{ \"foo bar\" }</code></p>
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"passElementProps":false,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 1 renders as expected within React 1`] = `
Array [
  "propTypes",
  "title",
  "myArray",
  "anObject",
]
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"passElementProps":false,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 1 renders as expected within React 2`] = `
<div
  className={undefined}
  style={undefined}>
  <h1
    id="markdown-template-with-imports-static-attributes-and-interpolations">
    Markdown template with imports, static attributes and interpolations
  </h1>
  <p>
    This file includes some custom static attributes which should be reflected fine on the resultant object
  </p>
  <p>
    This is a 
    <em>
      Markdown Component
    </em>
     file. Here you can include JSX-style assignment expressions; this component was generated using version 
    0.7.1
     of 
    markdown-component-loader
    !
  </p>
  <p>
    We're importing foo, which is 
    bar
    .
  </p>
  <p>
    We're also adding a react component here: 
    <bar
      style={
        Object {
          "foo": "bar",
        }
      }
      url="https://github.com/ticky/markdown-component-loader/issues" />
  </p>
  <p>
    Another cool thing you can do is use JSX 
    <strong>
      directly
    </strong>
     - here’s an SVG element, used inline: 
    <svg
      style={
        Object {
          "display": "inline",
          "height": "1em",
        }
      }
      viewBox="0 0 304 290">
      <path
        d="M2,111 h300 l-242.7,176.3 92.7,-285.3 92.7,285.3 z"
        fill="none"
        stroke="currentColor"
        strokeWidth="16" />
    </svg>
    .
  </p>
</div>
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"passElementProps":false,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 1 returns the expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.7.1
import foo from \'foo\';
import Bar from \'foo\';
import { bugs, name, version } from \'../package.json\';

MarkdownComponent.propTypes = {
  className: PropTypes.string,
  style: PropTypes.object
};

MarkdownComponent[\'title\'] = \'a custom title\';

MarkdownComponent[\'myArray\'] = [
  \'foo\',
  \'bar\'
];

MarkdownComponent[\'anObject\'] = {
  \'foo\': \'bar\'
};

function MarkdownComponent(props) {
  const {className, style} = props;

  return (
    <div className={className} style={style}>
      <h1 id=\"markdown-template-with-imports-static-attributes-and-interpolations\">Markdown template with imports, static attributes and interpolations</h1>
      <p>This file includes some custom static attributes which should be reflected fine on the resultant object</p>
      <p>This is a <em>Markdown Component</em> file. Here you can include JSX-style assignment expressions; this component was generated using version { version } of { name }!</p>
      <p>We\'re importing foo, which is {foo}.</p>
      <p>We\'re also adding a react component here: {<Bar {...bugs} style={{ foo: \'bar\' }} />}</p>
      <p>Another cool thing you can do is use JSX <strong>directly</strong> - here’s an SVG element, used inline: { <svg style={{ display: \'inline\', height: \'1em\' }} viewBox=\"0 0 304 290\"><path fill=\"none\" stroke=\"currentColor\" strokeWidth=\"16\" d=\"M2,111 h300 l-242.7,176.3 92.7,-285.3 92.7,285.3 z\" /></svg> }.</p>
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"passElementProps":false,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 2 renders as expected within React 1`] = `
Array [
  "propTypes",
]
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"passElementProps":false,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 2 renders as expected within React 2`] = `
<div
  className={undefined}
  style={undefined} />
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"passElementProps":false,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 2 returns the expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.7.1

MarkdownComponent.propTypes = {
  className: PropTypes.string,
  style: PropTypes.object
};

function MarkdownComponent(props) {
  const {className, style} = props;

  return (
    <div className={className} style={style}>
      {/* no input given */}
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"passElementProps":false,"markdownItPlugins":[null]}\` for component example 0 renders as expected within React 1`] = `
Array [
  "propTypes",
]
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"passElementProps":false,"markdownItPlugins":[null]}\` for component example 0 renders as expected within React 2`] = `
<div
  className={undefined}
  style={undefined}>
  <h1
    id="test-document">
    Test Document
  </h1>
  <p>
    [[toc]]
  </p>
  <h2
    id="basic-markdown-template">
    Basic Markdown Template
  </h2>
  <p>
    This is a basic Markdown template, with no interpolations going on.
  </p>
  <p>
    This should be
  </p>
  <ul>
    <li>
      easy and;
    </li>
    <li>
      predictable!
    </li>
  </ul>
  <h2
    id="heres-a-couple-of-hyperlinks">
    Here's a couple of hyperlinks
  </h2>
  <p>
    <a
      href="https://duckduckgo.com">
      https://duckduckgo.com
    </a>
     
    <a
      href="https://github.com">
      GitHub
    </a>
  </p>
  <h2
    id="heres-a-code-snippet-with-no-interpolations">
    Here's a code snippet with no interpolations
  </h2>
  <pre>
    <code
      className="language-bash">
      npm install -g yarn
      <br />
    </code>
  </pre>
  <h2
    id="heres-a-code-snippet-with-things-which-shouldnt-be-treated-as-interpolations">
    Here's a code snippet with things which shouldn't be treated as interpolations
  </h2>
  <pre>
    <code
      className="language-bash">
      <span
        className="hljs-keyword">
        function
      </span>
       
      <span
        className="hljs-function">
        <span
          className="hljs-title">
          rbenv
        </span>
      </span>
      () 
      {
      <br />
        
      RUBY=blah
      <br />
      }
      <br />
    </code>
  </pre>
  <h2
    id="heres-a-paragraph-with-a-simple-interpolation">
    Here's a paragraph with a simple interpolation
  </h2>
  <p>
    There are 
    0
     props being supplied to this component.
  </p>
  <h2
    id="heres-a-code-snippet-with-a-simple-interpolation">
    Here's a code snippet with a simple interpolation
  </h2>
  <pre>
    <code
      className="language-bash">
      <span
        className="hljs-keyword">
        function
      </span>
       
      <span
        className="hljs-function">
        <span
          className="hljs-title">
          rbenv
        </span>
      </span>
      () 
      {
      <br />
        
      RUBY=
      <br />
      }
      <br />
    </code>
  </pre>
  <h2
    id="heres-an-unhinted-code-snippet">
    Here's an unhinted code snippet
  </h2>
  <pre>
    <code>
      <span
        className="hljs-keyword">
        the
      </span>
       quick brown fox jumps over 
      <span
        className="hljs-keyword">
        the
      </span>
       lazy dog
      <br />
    </code>
  </pre>
  <h2
    id="heres-an-unhinted-snippet-with-no-discernible-language">
    Here's an unhinted snippet with no discernible language
  </h2>
  <pre>
    <code>
      )
      <span
        className="hljs-comment">
        ()
      </span>
      <span
        className="hljs-comment">
        (()
      </span>
      )
      <br />
    </code>
  </pre>
  <pre>
    <code
      className="language-bash">
      brew tap buildkite/buildkite
      <br />
      brew install --token=
      <span
        className="hljs-string">
        '
        INSERT-YOUR-AGENT-TOKEN-HERE
        '
      </span>
       buildkite-agent
      <br />
      <br />
      <span
        className="hljs-function">
        <span
          className="hljs-title">
          function
        </span>
      </span>
      () 
      {
      <br />
        
      ENV=
      <span
        className="hljs-string">
        "foo_bar"
      </span>
      <br />
      }
      <br />
    </code>
  </pre>
  <p>
    Let's also test interpolation inside other elements. 
    <code>
      foo bar
    </code>
  </p>
</div>
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"passElementProps":false,"markdownItPlugins":[null]}\` for component example 0 returns the expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.7.1

MarkdownComponent.propTypes = {
  className: PropTypes.string,
  style: PropTypes.object
};

function MarkdownComponent(props) {
  const {className, style} = props;

  return (
    <div className={className} style={style}>
      <h1 id=\"test-document\">Test Document</h1>
      <p>[[toc]]</p>
      <h2 id=\"basic-markdown-template\">Basic Markdown Template</h2>
      <p>This is a basic Markdown template, with no interpolations going on.</p>
      <p>This should be</p>
      <ul>
        <li>easy and;</li>
        <li>predictable!</li>
      </ul>
      <h2 id=\"heres-a-couple-of-hyperlinks\">Here\'s a couple of hyperlinks</h2>
      <p><a href=\"https://duckduckgo.com\">https://duckduckgo.com</a> <a href=\"https://github.com\">GitHub</a></p>
      <h2 id=\"heres-a-code-snippet-with-no-interpolations\">Here\'s a code snippet with no interpolations</h2>
      <pre><code className=\"language-bash\">npm install -g yarn<br /></code></pre>
      <h2 id=\"heres-a-code-snippet-with-things-which-shouldnt-be-treated-as-interpolations\">Here\'s a code snippet with things which shouldn\'t be treated as interpolations</h2>
      <pre><code className=\"language-bash\"><span className=\"hljs-keyword\">function</span> <span className=\"hljs-function\"><span className=\"hljs-title\">rbenv</span></span>() {\"{\"}<br />{\"  \"}RUBY=blah<br />{\"}\"}<br /></code></pre>
      <h2 id=\"heres-a-paragraph-with-a-simple-interpolation\">Here\'s a paragraph with a simple interpolation</h2>
      <p>There are {Object.keys(props).length} props being supplied to this component.</p>
      <h2 id=\"heres-a-code-snippet-with-a-simple-interpolation\">Here\'s a code snippet with a simple interpolation</h2>
      <pre><code className=\"language-bash\"><span className=\"hljs-keyword\">function</span> <span className=\"hljs-function\"><span className=\"hljs-title\">rbenv</span></span>() {\"{\"}<br />{\"  \"}RUBY={props.rubycontent}<br />{\"}\"}<br /></code></pre>
      <h2 id=\"heres-an-unhinted-code-snippet\">Here\'s an unhinted code snippet</h2>
      <pre><code><span className=\"hljs-keyword\">the</span> quick brown fox jumps over <span className=\"hljs-keyword\">the</span> lazy dog<br /></code></pre>
      <h2 id=\"heres-an-unhinted-snippet-with-no-discernible-language\">Here\'s an unhinted snippet with no discernible language</h2>
      <pre><code>)<span className=\"hljs-comment\">()</span><span className=\"hljs-comment\">(()</span>)<br /></code></pre>
      <pre><code className=\"language-bash\">brew tap buildkite/buildkite<br />brew install --token=<span className=\"hljs-string\">\'{props.token || \'INSERT-YOUR-AGENT-TOKEN-HERE\'}\'</span> buildkite-agent<br /><br /><span className=\"hljs-function\"><span className=\"hljs-title\">function</span></span>() {\"{\"}<br />{\"  \"}ENV=<span className=\"hljs-string\">\"foo_bar\"</span><br />{\"}\"}<br /></code></pre>
      <p>Let\'s also test interpolation inside other elements. <code>{ \"foo bar\" }</code></p>
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"passElementProps":false,"markdownItPlugins":[null]}\` for component example 1 renders as expected within React 1`] = `
Array [
  "propTypes",
  "title",
  "myArray",
  "anObject",
]
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"passElementProps":false,"markdownItPlugins":[null]}\` for component example 1 renders as expected within React 2`] = `
<div
  className={undefined}
  style={undefined}>
  <h1
    id="markdown-template-with-imports-static-attributes-and-interpolations">
    Markdown template with imports, static attributes and interpolations
  </h1>
  <p>
    This file includes some custom static attributes which should be reflected fine on the resultant object
  </p>
  <p>
    This is a 
    <em>
      Markdown Component
    </em>
     file. Here you can include JSX-style assignment expressions; this component was generated using version 
    0.7.1
     of 
    markdown-component-loader
    !
  </p>
  <p>
    We're importing foo, which is 
    bar
    .
  </p>
  <p>
    We're also adding a react component here: 
    <bar
      style={
        Object {
          "foo": "bar",
        }
      }
      url="https://github.com/ticky/markdown-component-loader/issues" />
  </p>
  <p>
    Another cool thing you can do is use JSX 
    <strong>
      directly
    </strong>
     - here’s an SVG element, used inline: 
    <svg
      style={
        Object {
          "display": "inline",
          "height": "1em",
        }
      }
      viewBox="0 0 304 290">
      <path
        d="M2,111 h300 l-242.7,176.3 92.7,-285.3 92.7,285.3 z"
        fill="none"
        stroke="currentColor"
        strokeWidth="16" />
    </svg>
    .
  </p>
</div>
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"passElementProps":false,"markdownItPlugins":[null]}\` for component example 1 returns the expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.7.1
import foo from \'foo\';
import Bar from \'foo\';
import { bugs, name, version } from \'../package.json\';

MarkdownComponent.propTypes = {
  className: PropTypes.string,
  style: PropTypes.object
};

MarkdownComponent[\'title\'] = \'a custom title\';

MarkdownComponent[\'myArray\'] = [
  \'foo\',
  \'bar\'
];

MarkdownComponent[\'anObject\'] = {
  \'foo\': \'bar\'
};

function MarkdownComponent(props) {
  const {className, style} = props;

  return (
    <div className={className} style={style}>
      <h1 id=\"markdown-template-with-imports-static-attributes-and-interpolations\">Markdown template with imports, static attributes and interpolations</h1>
      <p>This file includes some custom static attributes which should be reflected fine on the resultant object</p>
      <p>This is a <em>Markdown Component</em> file. Here you can include JSX-style assignment expressions; this component was generated using version { version } of { name }!</p>
      <p>We\'re importing foo, which is {foo}.</p>
      <p>We\'re also adding a react component here: {<Bar {...bugs} style={{ foo: \'bar\' }} />}</p>
      <p>Another cool thing you can do is use JSX <strong>directly</strong> - here’s an SVG element, used inline: { <svg style={{ display: \'inline\', height: \'1em\' }} viewBox=\"0 0 304 290\"><path fill=\"none\" stroke=\"currentColor\" strokeWidth=\"16\" d=\"M2,111 h300 l-242.7,176.3 92.7,-285.3 92.7,285.3 z\" /></svg> }.</p>
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"passElementProps":false,"markdownItPlugins":[null]}\` for component example 2 renders as expected within React 1`] = `
Array [
  "propTypes",
]
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"passElementProps":false,"markdownItPlugins":[null]}\` for component example 2 renders as expected within React 2`] = `
<div
  className={undefined}
  style={undefined} />
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"passElementProps":false,"markdownItPlugins":[null]}\` for component example 2 returns the expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.7.1

MarkdownComponent.propTypes = {
  className: PropTypes.string,
  style: PropTypes.object
};

function MarkdownComponent(props) {
  const {className, style} = props;

  return (
    <div className={className} style={style}>
      {/* no input given */}
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"passElementProps":false}\` for component example 0 renders as expected within React 1`] = `
Array [
  "propTypes",
]
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"passElementProps":false}\` for component example 0 renders as expected within React 2`] = `
<div
  className={undefined}
  style={undefined}>
  <h1>
    Test Document
  </h1>
  <p>
    [[toc]]
  </p>
  <h2>
    Basic Markdown Template
  </h2>
  <p>
    This is a basic Markdown template, with no interpolations going on.
  </p>
  <p>
    This should be
  </p>
  <ul>
    <li>
      easy and;
    </li>
    <li>
      predictable!
    </li>
  </ul>
  <h2>
    Here's a couple of hyperlinks
  </h2>
  <p>
    <a
      href="https://duckduckgo.com">
      https://duckduckgo.com
    </a>
     
    <a
      href="https://github.com">
      GitHub
    </a>
  </p>
  <h2>
    Here's a code snippet with no interpolations
  </h2>
  <pre>
    <code
      className="language-bash">
      npm install -g yarn
      <br />
    </code>
  </pre>
  <h2>
    Here's a code snippet with things which shouldn't be treated as interpolations
  </h2>
  <pre>
    <code
      className="language-bash">
      <span
        className="hljs-keyword">
        function
      </span>
       
      <span
        className="hljs-function">
        <span
          className="hljs-title">
          rbenv
        </span>
      </span>
      () 
      {
      <br />
        
      RUBY=blah
      <br />
      }
      <br />
    </code>
  </pre>
  <h2>
    Here's a paragraph with a simple interpolation
  </h2>
  <p>
    There are 
    0
     props being supplied to this component.
  </p>
  <h2>
    Here's a code snippet with a simple interpolation
  </h2>
  <pre>
    <code
      className="language-bash">
      <span
        className="hljs-keyword">
        function
      </span>
       
      <span
        className="hljs-function">
        <span
          className="hljs-title">
          rbenv
        </span>
      </span>
      () 
      {
      <br />
        
      RUBY=
      <br />
      }
      <br />
    </code>
  </pre>
  <h2>
    Here's an unhinted code snippet
  </h2>
  <pre>
    <code>
      <span
        className="hljs-keyword">
        the
      </span>
       quick brown fox jumps over 
      <span
        className="hljs-keyword">
        the
      </span>
       lazy dog
      <br />
    </code>
  </pre>
  <h2>
    Here's an unhinted snippet with no discernible language
  </h2>
  <pre>
    <code>
      )
      <span
        className="hljs-comment">
        ()
      </span>
      <span
        className="hljs-comment">
        (()
      </span>
      )
      <br />
    </code>
  </pre>
  <pre>
    <code
      className="language-bash">
      brew tap buildkite/buildkite
      <br />
      brew install --token=
      <span
        className="hljs-string">
        '
        INSERT-YOUR-AGENT-TOKEN-HERE
        '
      </span>
       buildkite-agent
      <br />
      <br />
      <span
        className="hljs-function">
        <span
          className="hljs-title">
          function
        </span>
      </span>
      () 
      {
      <br />
        
      ENV=
      <span
        className="hljs-string">
        "foo_bar"
      </span>
      <br />
      }
      <br />
    </code>
  </pre>
  <p>
    Let's also test interpolation inside other elements. 
    <code>
      foo bar
    </code>
  </p>
</div>
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"passElementProps":false}\` for component example 0 returns the expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.7.1

MarkdownComponent.propTypes = {
  className: PropTypes.string,
  style: PropTypes.object
};

function MarkdownComponent(props) {
  const {className, style} = props;

  return (
    <div className={className} style={style}>
      <h1>Test Document</h1>
      <p>[[toc]]</p>
      <h2>Basic Markdown Template</h2>
      <p>This is a basic Markdown template, with no interpolations going on.</p>
      <p>This should be</p>
      <ul>
        <li>easy and;</li>
        <li>predictable!</li>
      </ul>
      <h2>Here\'s a couple of hyperlinks</h2>
      <p><a href=\"https://duckduckgo.com\">https://duckduckgo.com</a> <a href=\"https://github.com\">GitHub</a></p>
      <h2>Here\'s a code snippet with no interpolations</h2>
      <pre><code className=\"language-bash\">npm install -g yarn<br /></code></pre>
      <h2>Here\'s a code snippet with things which shouldn\'t be treated as interpolations</h2>
      <pre><code className=\"language-bash\"><span className=\"hljs-keyword\">function</span> <span className=\"hljs-function\"><span className=\"hljs-title\">rbenv</span></span>() {\"{\"}<br />{\"  \"}RUBY=blah<br />{\"}\"}<br /></code></pre>
      <h2>Here\'s a paragraph with a simple interpolation</h2>
      <p>There are {Object.keys(props).length} props being supplied to this component.</p>
      <h2>Here\'s a code snippet with a simple interpolation</h2>
      <pre><code className=\"language-bash\"><span className=\"hljs-keyword\">function</span> <span className=\"hljs-function\"><span className=\"hljs-title\">rbenv</span></span>() {\"{\"}<br />{\"  \"}RUBY={props.rubycontent}<br />{\"}\"}<br /></code></pre>
      <h2>Here\'s an unhinted code snippet</h2>
      <pre><code><span className=\"hljs-keyword\">the</span> quick brown fox jumps over <span className=\"hljs-keyword\">the</span> lazy dog<br /></code></pre>
      <h2>Here\'s an unhinted snippet with no discernible language</h2>
      <pre><code>)<span className=\"hljs-comment\">()</span><span className=\"hljs-comment\">(()</span>)<br /></code></pre>
      <pre><code className=\"language-bash\">brew tap buildkite/buildkite<br />brew install --token=<span className=\"hljs-string\">\'{props.token || \'INSERT-YOUR-AGENT-TOKEN-HERE\'}\'</span> buildkite-agent<br /><br /><span className=\"hljs-function\"><span className=\"hljs-title\">function</span></span>() {\"{\"}<br />{\"  \"}ENV=<span className=\"hljs-string\">\"foo_bar\"</span><br />{\"}\"}<br /></code></pre>
      <p>Let\'s also test interpolation inside other elements. <code>{ \"foo bar\" }</code></p>
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"passElementProps":false}\` for component example 1 renders as expected within React 1`] = `
Array [
  "propTypes",
  "title",
  "myArray",
  "anObject",
]
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"passElementProps":false}\` for component example 1 renders as expected within React 2`] = `
<div
  className={undefined}
  style={undefined}>
  <h1>
    Markdown template with imports, static attributes and interpolations
  </h1>
  <p>
    This file includes some custom static attributes which should be reflected fine on the resultant object
  </p>
  <p>
    This is a 
    <em>
      Markdown Component
    </em>
     file. Here you can include JSX-style assignment expressions; this component was generated using version 
    0.7.1
     of 
    markdown-component-loader
    !
  </p>
  <p>
    We're importing foo, which is 
    bar
    .
  </p>
  <p>
    We're also adding a react component here: 
    <bar
      style={
        Object {
          "foo": "bar",
        }
      }
      url="https://github.com/ticky/markdown-component-loader/issues" />
  </p>
  <p>
    Another cool thing you can do is use JSX 
    <strong>
      directly
    </strong>
     - here’s an SVG element, used inline: 
    <svg
      style={
        Object {
          "display": "inline",
          "height": "1em",
        }
      }
      viewBox="0 0 304 290">
      <path
        d="M2,111 h300 l-242.7,176.3 92.7,-285.3 92.7,285.3 z"
        fill="none"
        stroke="currentColor"
        strokeWidth="16" />
    </svg>
    .
  </p>
</div>
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"passElementProps":false}\` for component example 1 returns the expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.7.1
import foo from \'foo\';
import Bar from \'foo\';
import { bugs, name, version } from \'../package.json\';

MarkdownComponent.propTypes = {
  className: PropTypes.string,
  style: PropTypes.object
};

MarkdownComponent[\'title\'] = \'a custom title\';

MarkdownComponent[\'myArray\'] = [
  \'foo\',
  \'bar\'
];

MarkdownComponent[\'anObject\'] = {
  \'foo\': \'bar\'
};

function MarkdownComponent(props) {
  const {className, style} = props;

  return (
    <div className={className} style={style}>
      <h1>Markdown template with imports, static attributes and interpolations</h1>
      <p>This file includes some custom static attributes which should be reflected fine on the resultant object</p>
      <p>This is a <em>Markdown Component</em> file. Here you can include JSX-style assignment expressions; this component was generated using version { version } of { name }!</p>
      <p>We\'re importing foo, which is {foo}.</p>
      <p>We\'re also adding a react component here: {<Bar {...bugs} style={{ foo: \'bar\' }} />}</p>
      <p>Another cool thing you can do is use JSX <strong>directly</strong> - here’s an SVG element, used inline: { <svg style={{ display: \'inline\', height: \'1em\' }} viewBox=\"0 0 304 290\"><path fill=\"none\" stroke=\"currentColor\" strokeWidth=\"16\" d=\"M2,111 h300 l-242.7,176.3 92.7,-285.3 92.7,285.3 z\" /></svg> }.</p>
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"passElementProps":false}\` for component example 2 renders as expected within React 1`] = `
Array [
  "propTypes",
]
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"passElementProps":false}\` for component example 2 renders as expected within React 2`] = `
<div
  className={undefined}
  style={undefined} />
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"passElementProps":false}\` for component example 2 returns the expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.7.1

MarkdownComponent.propTypes = {
  className: PropTypes.string,
  style: PropTypes.object
};

function MarkdownComponent(props) {
  const {className, style} = props;

  return (
    <div className={className} style={style}>
      {/* no input given */}
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"passElementProps":true,"markdownItPlugins":"somenonsensevalue"}\` for component example 0 renders as expected within React 1`] = `
Array [
  "propTypes",
  "defaultProps",
]
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"passElementProps":true,"markdownItPlugins":"somenonsensevalue"}\` for component example 0 renders as expected within React 2`] = `
<div
  className={undefined}
  style={undefined}>
  <h1>
    Test Document
  </h1>
  <p>
    [[toc]]
  </p>
  <h2>
    Basic Markdown Template
  </h2>
  <p>
    This is a basic Markdown template, with no interpolations going on.
  </p>
  <p>
    This should be
  </p>
  <ul>
    <li>
      easy and;
    </li>
    <li>
      predictable!
    </li>
  </ul>
  <h2>
    Here's a couple of hyperlinks
  </h2>
  <p>
    <a
      href="https://duckduckgo.com">
      https://duckduckgo.com
    </a>
     
    <a
      href="https://github.com">
      GitHub
    </a>
  </p>
  <h2>
    Here's a code snippet with no interpolations
  </h2>
  <pre>
    <code
      className="language-bash">
      npm install -g yarn
      <br />
    </code>
  </pre>
  <h2>
    Here's a code snippet with things which shouldn't be treated as interpolations
  </h2>
  <pre>
    <code
      className="language-bash">
      <span
        className="hljs-keyword">
        function
      </span>
       
      <span
        className="hljs-function">
        <span
          className="hljs-title">
          rbenv
        </span>
      </span>
      () 
      {
      <br />
        
      RUBY=blah
      <br />
      }
      <br />
    </code>
  </pre>
  <h2>
    Here's a paragraph with a simple interpolation
  </h2>
  <p>
    There are 
    1
     props being supplied to this component.
  </p>
  <h2>
    Here's a code snippet with a simple interpolation
  </h2>
  <pre>
    <code
      className="language-bash">
      <span
        className="hljs-keyword">
        function
      </span>
       
      <span
        className="hljs-function">
        <span
          className="hljs-title">
          rbenv
        </span>
      </span>
      () 
      {
      <br />
        
      RUBY=
      <br />
      }
      <br />
    </code>
  </pre>
  <h2>
    Here's an unhinted code snippet
  </h2>
  <pre>
    <code>
      <span
        className="hljs-keyword">
        the
      </span>
       quick brown fox jumps over 
      <span
        className="hljs-keyword">
        the
      </span>
       lazy dog
      <br />
    </code>
  </pre>
  <h2>
    Here's an unhinted snippet with no discernible language
  </h2>
  <pre>
    <code>
      )
      <span
        className="hljs-comment">
        ()
      </span>
      <span
        className="hljs-comment">
        (()
      </span>
      )
      <br />
    </code>
  </pre>
  <pre>
    <code
      className="language-bash">
      brew tap buildkite/buildkite
      <br />
      brew install --token=
      <span
        className="hljs-string">
        '
        INSERT-YOUR-AGENT-TOKEN-HERE
        '
      </span>
       buildkite-agent
      <br />
      <br />
      <span
        className="hljs-function">
        <span
          className="hljs-title">
          function
        </span>
      </span>
      () 
      {
      <br />
        
      ENV=
      <span
        className="hljs-string">
        "foo_bar"
      </span>
      <br />
      }
      <br />
    </code>
  </pre>
  <p>
    Let's also test interpolation inside other elements. 
    <code>
      foo bar
    </code>
  </p>
</div>
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"passElementProps":true,"markdownItPlugins":"somenonsensevalue"}\` for component example 0 returns the expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.7.1

MarkdownComponent.propTypes = {
  className: PropTypes.string,
  style: PropTypes.object,
  elementProps: PropTypes.object
};

MarkdownComponent.defaultProps = {
  elementProps: {}
};

function MarkdownComponent(props) {
  const {className, style, elementProps} = props;

  return (
    <div className={className} style={style}>
      <h1 {...elementProps[\'h1\']}>Test Document</h1>
      <p {...elementProps[\'p\']}>[[toc]]</p>
      <h2 {...elementProps[\'h2\']}>Basic Markdown Template</h2>
      <p {...elementProps[\'p\']}>This is a basic Markdown template, with no interpolations going on.</p>
      <p {...elementProps[\'p\']}>This should be</p>
      <ul {...elementProps[\'ul\']}>
        <li {...elementProps[\'li\']}>easy and;</li>
        <li {...elementProps[\'li\']}>predictable!</li>
      </ul>
      <h2 {...elementProps[\'h2\']}>Here\'s a couple of hyperlinks</h2>
      <p {...elementProps[\'p\']}><a {...elementProps[\'a\']} href=\"https://duckduckgo.com\">https://duckduckgo.com</a> <a {...elementProps[\'a\']} href=\"https://github.com\">GitHub</a></p>
      <h2 {...elementProps[\'h2\']}>Here\'s a code snippet with no interpolations</h2>
      <pre {...elementProps[\'pre\']}><code {...elementProps[\'code\']} className=\"language-bash\">npm install -g yarn<br {...elementProps[\'br\']} /></code></pre>
      <h2 {...elementProps[\'h2\']}>Here\'s a code snippet with things which shouldn\'t be treated as interpolations</h2>
      <pre {...elementProps[\'pre\']}><code {...elementProps[\'code\']} className=\"language-bash\"><span {...elementProps[\'span\']} className=\"hljs-keyword\">function</span> <span {...elementProps[\'span\']} className=\"hljs-function\"><span {...elementProps[\'span\']} className=\"hljs-title\">rbenv</span></span>() {\"{\"}<br {...elementProps[\'br\']} />{\"  \"}RUBY=blah<br {...elementProps[\'br\']} />{\"}\"}<br {...elementProps[\'br\']} /></code></pre>
      <h2 {...elementProps[\'h2\']}>Here\'s a paragraph with a simple interpolation</h2>
      <p {...elementProps[\'p\']}>There are {Object.keys(props).length} props being supplied to this component.</p>
      <h2 {...elementProps[\'h2\']}>Here\'s a code snippet with a simple interpolation</h2>
      <pre {...elementProps[\'pre\']}><code {...elementProps[\'code\']} className=\"language-bash\"><span {...elementProps[\'span\']} className=\"hljs-keyword\">function</span> <span {...elementProps[\'span\']} className=\"hljs-function\"><span {...elementProps[\'span\']} className=\"hljs-title\">rbenv</span></span>() {\"{\"}<br {...elementProps[\'br\']} />{\"  \"}RUBY={props.rubycontent}<br {...elementProps[\'br\']} />{\"}\"}<br {...elementProps[\'br\']} /></code></pre>
      <h2 {...elementProps[\'h2\']}>Here\'s an unhinted code snippet</h2>
      <pre {...elementProps[\'pre\']}><code {...elementProps[\'code\']}><span {...elementProps[\'span\']} className=\"hljs-keyword\">the</span> quick brown fox jumps over <span {...elementProps[\'span\']} className=\"hljs-keyword\">the</span> lazy dog<br {...elementProps[\'br\']} /></code></pre>
      <h2 {...elementProps[\'h2\']}>Here\'s an unhinted snippet with no discernible language</h2>
      <pre {...elementProps[\'pre\']}><code {...elementProps[\'code\']}>)<span {...elementProps[\'span\']} className=\"hljs-comment\">()</span><span {...elementProps[\'span\']} className=\"hljs-comment\">(()</span>)<br {...elementProps[\'br\']} /></code></pre>
      <pre {...elementProps[\'pre\']}><code {...elementProps[\'code\']} className=\"language-bash\">brew tap buildkite/buildkite<br {...elementProps[\'br\']} />brew install --token=<span {...elementProps[\'span\']} className=\"hljs-string\">\'{props.token || \'INSERT-YOUR-AGENT-TOKEN-HERE\'}\'</span> buildkite-agent<br {...elementProps[\'br\']} /><br {...elementProps[\'br\']} /><span {...elementProps[\'span\']} className=\"hljs-function\"><span {...elementProps[\'span\']} className=\"hljs-title\">function</span></span>() {\"{\"}<br {...elementProps[\'br\']} />{\"  \"}ENV=<span {...elementProps[\'span\']} className=\"hljs-string\">\"foo_bar\"</span><br {...elementProps[\'br\']} />{\"}\"}<br {...elementProps[\'br\']} /></code></pre>
      <p {...elementProps[\'p\']}>Let\'s also test interpolation inside other elements. <code {...elementProps[\'code\']}>{ \"foo bar\" }</code></p>
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"passElementProps":true,"markdownItPlugins":"somenonsensevalue"}\` for component example 1 renders as expected within React 1`] = `
Array [
  "propTypes",
  "defaultProps",
  "title",
  "myArray",
  "anObject",
]
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"passElementProps":true,"markdownItPlugins":"somenonsensevalue"}\` for component example 1 renders as expected within React 2`] = `
<div
  className={undefined}
  style={undefined}>
  <h1>
    Markdown template with imports, static attributes and interpolations
  </h1>
  <p>
    This file includes some custom static attributes which should be reflected fine on the resultant object
  </p>
  <p>
    This is a 
    <em>
      Markdown Component
    </em>
     file. Here you can include JSX-style assignment expressions; this component was generated using version 
    0.7.1
     of 
    markdown-component-loader
    !
  </p>
  <p>
    We're importing foo, which is 
    bar
    .
  </p>
  <p>
    We're also adding a react component here: 
    <bar
      style={
        Object {
          "foo": "bar",
        }
      }
      url="https://github.com/ticky/markdown-component-loader/issues" />
  </p>
  <p>
    Another cool thing you can do is use JSX 
    <strong>
      directly
    </strong>
     - here’s an SVG element, used inline: 
    <svg
      style={
        Object {
          "display": "inline",
          "height": "1em",
        }
      }
      viewBox="0 0 304 290">
      <path
        d="M2,111 h300 l-242.7,176.3 92.7,-285.3 92.7,285.3 z"
        fill="none"
        stroke="currentColor"
        strokeWidth="16" />
    </svg>
    .
  </p>
</div>
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"passElementProps":true,"markdownItPlugins":"somenonsensevalue"}\` for component example 1 returns the expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.7.1
import foo from \'foo\';
import Bar from \'foo\';
import { bugs, name, version } from \'../package.json\';

MarkdownComponent.propTypes = {
  className: PropTypes.string,
  style: PropTypes.object,
  elementProps: PropTypes.object
};

MarkdownComponent.defaultProps = {
  elementProps: {}
};

MarkdownComponent[\'title\'] = \'a custom title\';

MarkdownComponent[\'myArray\'] = [
  \'foo\',
  \'bar\'
];

MarkdownComponent[\'anObject\'] = {
  \'foo\': \'bar\'
};

function MarkdownComponent(props) {
  const {className, style, elementProps} = props;

  return (
    <div className={className} style={style}>
      <h1 {...elementProps[\'h1\']}>Markdown template with imports, static attributes and interpolations</h1>
      <p {...elementProps[\'p\']}>This file includes some custom static attributes which should be reflected fine on the resultant object</p>
      <p {...elementProps[\'p\']}>This is a <em {...elementProps[\'em\']}>Markdown Component</em> file. Here you can include JSX-style assignment expressions; this component was generated using version { version } of { name }!</p>
      <p {...elementProps[\'p\']}>We\'re importing foo, which is {foo}.</p>
      <p {...elementProps[\'p\']}>We\'re also adding a react component here: {<Bar {...bugs} style={{ foo: \'bar\' }} />}</p>
      <p {...elementProps[\'p\']}>Another cool thing you can do is use JSX <strong {...elementProps[\'strong\']}>directly</strong> - here’s an SVG element, used inline: { <svg {...elementProps[\'svg\']} style={{ display: \'inline\', height: \'1em\' }} viewBox=\"0 0 304 290\"><path {...elementProps[\'path\']} fill=\"none\" stroke=\"currentColor\" strokeWidth=\"16\" d=\"M2,111 h300 l-242.7,176.3 92.7,-285.3 92.7,285.3 z\" /></svg> }.</p>
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"passElementProps":true,"markdownItPlugins":"somenonsensevalue"}\` for component example 2 renders as expected within React 1`] = `
Array [
  "propTypes",
  "defaultProps",
]
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"passElementProps":true,"markdownItPlugins":"somenonsensevalue"}\` for component example 2 renders as expected within React 2`] = `
<div
  className={undefined}
  style={undefined} />
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"passElementProps":true,"markdownItPlugins":"somenonsensevalue"}\` for component example 2 returns the expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.7.1

MarkdownComponent.propTypes = {
  className: PropTypes.string,
  style: PropTypes.object,
  elementProps: PropTypes.object
};

MarkdownComponent.defaultProps = {
  elementProps: {}
};

function MarkdownComponent(props) {
  const {className, style, elementProps} = props;

  return (
    <div className={className} style={style}>
      {/* no input given */}
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"passElementProps":true,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 0 renders as expected within React 1`] = `
Array [
  "propTypes",
  "defaultProps",
]
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"passElementProps":true,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 0 renders as expected within React 2`] = `
<div
  className={undefined}
  style={undefined}>
  <h1
    id="test-document">
    Test Document
  </h1>
  <p />
  <div
    className="my-container-class">
    <ul>
      <li>
        <a
          href="#test-document">
          Test Document
        </a>
        <ul>
          <li>
            <a
              href="#basic-markdown-template">
              Basic Markdown Template
            </a>
          </li>
          <li>
            <a
              href="#heres-a-couple-of-hyperlinks">
              Here's a couple of hyperlinks
            </a>
          </li>
          <li>
            <a
              href="#heres-a-code-snippet-with-no-interpolations">
              Here's a code snippet with no interpolations
            </a>
          </li>
          <li>
            <a
              href="#heres-a-code-snippet-with-things-which-shouldnt-be-treated-as-interpolations">
              Here's a code snippet with things which shouldn't be treated as interpolations
            </a>
          </li>
          <li>
            <a
              href="#heres-a-paragraph-with-a-simple-interpolation">
              Here's a paragraph with a simple interpolation
            </a>
          </li>
          <li>
            <a
              href="#heres-a-code-snippet-with-a-simple-interpolation">
              Here's a code snippet with a simple interpolation
            </a>
          </li>
          <li>
            <a
              href="#heres-an-unhinted-code-snippet">
              Here's an unhinted code snippet
            </a>
          </li>
          <li>
            <a
              href="#heres-an-unhinted-snippet-with-no-discernible-language">
              Here's an unhinted snippet with no discernible language
            </a>
          </li>
        </ul>
      </li>
    </ul>
  </div>
  <p />
  <h2
    id="basic-markdown-template">
    Basic Markdown Template
  </h2>
  <p>
    This is a basic Markdown template, with no interpolations going on.
  </p>
  <p>
    This should be
  </p>
  <ul>
    <li>
      easy and;
    </li>
    <li>
      predictable!
    </li>
  </ul>
  <h2
    id="heres-a-couple-of-hyperlinks">
    Here's a couple of hyperlinks
  </h2>
  <p>
    <a
      href="https://duckduckgo.com">
      https://duckduckgo.com
    </a>
     
    <a
      href="https://github.com">
      GitHub
    </a>
  </p>
  <h2
    id="heres-a-code-snippet-with-no-interpolations">
    Here's a code snippet with no interpolations
  </h2>
  <pre>
    <code
      className="language-bash">
      npm install -g yarn
      <br />
    </code>
  </pre>
  <h2
    id="heres-a-code-snippet-with-things-which-shouldnt-be-treated-as-interpolations">
    Here's a code snippet with things which shouldn't be treated as interpolations
  </h2>
  <pre>
    <code
      className="language-bash">
      <span
        className="hljs-keyword">
        function
      </span>
       
      <span
        className="hljs-function">
        <span
          className="hljs-title">
          rbenv
        </span>
      </span>
      () 
      {
      <br />
        
      RUBY=blah
      <br />
      }
      <br />
    </code>
  </pre>
  <h2
    id="heres-a-paragraph-with-a-simple-interpolation">
    Here's a paragraph with a simple interpolation
  </h2>
  <p>
    There are 
    1
     props being supplied to this component.
  </p>
  <h2
    id="heres-a-code-snippet-with-a-simple-interpolation">
    Here's a code snippet with a simple interpolation
  </h2>
  <pre>
    <code
      className="language-bash">
      <span
        className="hljs-keyword">
        function
      </span>
       
      <span
        className="hljs-function">
        <span
          className="hljs-title">
          rbenv
        </span>
      </span>
      () 
      {
      <br />
        
      RUBY=
      <br />
      }
      <br />
    </code>
  </pre>
  <h2
    id="heres-an-unhinted-code-snippet">
    Here's an unhinted code snippet
  </h2>
  <pre>
    <code>
      <span
        className="hljs-keyword">
        the
      </span>
       quick brown fox jumps over 
      <span
        className="hljs-keyword">
        the
      </span>
       lazy dog
      <br />
    </code>
  </pre>
  <h2
    id="heres-an-unhinted-snippet-with-no-discernible-language">
    Here's an unhinted snippet with no discernible language
  </h2>
  <pre>
    <code>
      )
      <span
        className="hljs-comment">
        ()
      </span>
      <span
        className="hljs-comment">
        (()
      </span>
      )
      <br />
    </code>
  </pre>
  <pre>
    <code
      className="language-bash">
      brew tap buildkite/buildkite
      <br />
      brew install --token=
      <span
        className="hljs-string">
        '
        INSERT-YOUR-AGENT-TOKEN-HERE
        '
      </span>
       buildkite-agent
      <br />
      <br />
      <span
        className="hljs-function">
        <span
          className="hljs-title">
          function
        </span>
      </span>
      () 
      {
      <br />
        
      ENV=
      <span
        className="hljs-string">
        "foo_bar"
      </span>
      <br />
      }
      <br />
    </code>
  </pre>
  <p>
    Let's also test interpolation inside other elements. 
    <code>
      foo bar
    </code>
  </p>
</div>
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"passElementProps":true,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 0 returns the expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.7.1

MarkdownComponent.propTypes = {
  className: PropTypes.string,
  style: PropTypes.object,
  elementProps: PropTypes.object
};

MarkdownComponent.defaultProps = {
  elementProps: {}
};

function MarkdownComponent(props) {
  const {className, style, elementProps} = props;

  return (
    <div className={className} style={style}>
      <h1 {...elementProps[\'h1\']} id=\"test-document\">Test Document</h1>
      <p {...elementProps[\'p\']} /><div {...elementProps[\'div\']} className=\"my-container-class\"><ul {...elementProps[\'ul\']}><li {...elementProps[\'li\']}><a {...elementProps[\'a\']} href=\"#test-document\">Test Document</a><ul {...elementProps[\'ul\']}><li {...elementProps[\'li\']}><a {...elementProps[\'a\']} href=\"#basic-markdown-template\">Basic Markdown Template</a></li><li {...elementProps[\'li\']}><a {...elementProps[\'a\']} href=\"#heres-a-couple-of-hyperlinks\">Here\'s a couple of hyperlinks</a></li><li {...elementProps[\'li\']}><a {...elementProps[\'a\']} href=\"#heres-a-code-snippet-with-no-interpolations\">Here\'s a code snippet with no interpolations</a></li><li {...elementProps[\'li\']}><a {...elementProps[\'a\']} href=\"#heres-a-code-snippet-with-things-which-shouldnt-be-treated-as-interpolations\">Here\'s a code snippet with things which shouldn\'t be treated as interpolations</a></li><li {...elementProps[\'li\']}><a {...elementProps[\'a\']} href=\"#heres-a-paragraph-with-a-simple-interpolation\">Here\'s a paragraph with a simple interpolation</a></li><li {...elementProps[\'li\']}><a {...elementProps[\'a\']} href=\"#heres-a-code-snippet-with-a-simple-interpolation\">Here\'s a code snippet with a simple interpolation</a></li><li {...elementProps[\'li\']}><a {...elementProps[\'a\']} href=\"#heres-an-unhinted-code-snippet\">Here\'s an unhinted code snippet</a></li><li {...elementProps[\'li\']}><a {...elementProps[\'a\']} href=\"#heres-an-unhinted-snippet-with-no-discernible-language\">Here\'s an unhinted snippet with no discernible language</a></li></ul></li></ul></div><p {...elementProps[\'p\']} />
      <h2 {...elementProps[\'h2\']} id=\"basic-markdown-template\">Basic Markdown Template</h2>
      <p {...elementProps[\'p\']}>This is a basic Markdown template, with no interpolations going on.</p>
      <p {...elementProps[\'p\']}>This should be</p>
      <ul {...elementProps[\'ul\']}>
        <li {...elementProps[\'li\']}>easy and;</li>
        <li {...elementProps[\'li\']}>predictable!</li>
      </ul>
      <h2 {...elementProps[\'h2\']} id=\"heres-a-couple-of-hyperlinks\">Here\'s a couple of hyperlinks</h2>
      <p {...elementProps[\'p\']}><a {...elementProps[\'a\']} href=\"https://duckduckgo.com\">https://duckduckgo.com</a> <a {...elementProps[\'a\']} href=\"https://github.com\">GitHub</a></p>
      <h2 {...elementProps[\'h2\']} id=\"heres-a-code-snippet-with-no-interpolations\">Here\'s a code snippet with no interpolations</h2>
      <pre {...elementProps[\'pre\']}><code {...elementProps[\'code\']} className=\"language-bash\">npm install -g yarn<br {...elementProps[\'br\']} /></code></pre>
      <h2 {...elementProps[\'h2\']} id=\"heres-a-code-snippet-with-things-which-shouldnt-be-treated-as-interpolations\">Here\'s a code snippet with things which shouldn\'t be treated as interpolations</h2>
      <pre {...elementProps[\'pre\']}><code {...elementProps[\'code\']} className=\"language-bash\"><span {...elementProps[\'span\']} className=\"hljs-keyword\">function</span> <span {...elementProps[\'span\']} className=\"hljs-function\"><span {...elementProps[\'span\']} className=\"hljs-title\">rbenv</span></span>() {\"{\"}<br {...elementProps[\'br\']} />{\"  \"}RUBY=blah<br {...elementProps[\'br\']} />{\"}\"}<br {...elementProps[\'br\']} /></code></pre>
      <h2 {...elementProps[\'h2\']} id=\"heres-a-paragraph-with-a-simple-interpolation\">Here\'s a paragraph with a simple interpolation</h2>
      <p {...elementProps[\'p\']}>There are {Object.keys(props).length} props being supplied to this component.</p>
      <h2 {...elementProps[\'h2\']} id=\"heres-a-code-snippet-with-a-simple-interpolation\">Here\'s a code snippet with a simple interpolation</h2>
      <pre {...elementProps[\'pre\']}><code {...elementProps[\'code\']} className=\"language-bash\"><span {...elementProps[\'span\']} className=\"hljs-keyword\">function</span> <span {...elementProps[\'span\']} className=\"hljs-function\"><span {...elementProps[\'span\']} className=\"hljs-title\">rbenv</span></span>() {\"{\"}<br {...elementProps[\'br\']} />{\"  \"}RUBY={props.rubycontent}<br {...elementProps[\'br\']} />{\"}\"}<br {...elementProps[\'br\']} /></code></pre>
      <h2 {...elementProps[\'h2\']} id=\"heres-an-unhinted-code-snippet\">Here\'s an unhinted code snippet</h2>
      <pre {...elementProps[\'pre\']}><code {...elementProps[\'code\']}><span {...elementProps[\'span\']} className=\"hljs-keyword\">the</span> quick brown fox jumps over <span {...elementProps[\'span\']} className=\"hljs-keyword\">the</span> lazy dog<br {...elementProps[\'br\']} /></code></pre>
      <h2 {...elementProps[\'h2\']} id=\"heres-an-unhinted-snippet-with-no-discernible-language\">Here\'s an unhinted snippet with no discernible language</h2>
      <pre {...elementProps[\'pre\']}><code {...elementProps[\'code\']}>)<span {...elementProps[\'span\']} className=\"hljs-comment\">()</span><span {...elementProps[\'span\']} className=\"hljs-comment\">(()</span>)<br {...elementProps[\'br\']} /></code></pre>
      <pre {...elementProps[\'pre\']}><code {...elementProps[\'code\']} className=\"language-bash\">brew tap buildkite/buildkite<br {...elementProps[\'br\']} />brew install --token=<span {...elementProps[\'span\']} className=\"hljs-string\">\'{props.token || \'INSERT-YOUR-AGENT-TOKEN-HERE\'}\'</span> buildkite-agent<br {...elementProps[\'br\']} /><br {...elementProps[\'br\']} /><span {...elementProps[\'span\']} className=\"hljs-function\"><span {...elementProps[\'span\']} className=\"hljs-title\">function</span></span>() {\"{\"}<br {...elementProps[\'br\']} />{\"  \"}ENV=<span {...elementProps[\'span\']} className=\"hljs-string\">\"foo_bar\"</span><br {...elementProps[\'br\']} />{\"}\"}<br {...elementProps[\'br\']} /></code></pre>
      <p {...elementProps[\'p\']}>Let\'s also test interpolation inside other elements. <code {...elementProps[\'code\']}>{ \"foo bar\" }</code></p>
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"passElementProps":true,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 1 renders as expected within React 1`] = `
Array [
  "propTypes",
  "defaultProps",
  "title",
  "myArray",
  "anObject",
]
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"passElementProps":true,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 1 renders as expected within React 2`] = `
<div
  className={undefined}
  style={undefined}>
  <h1
    id="markdown-template-with-imports-static-attributes-and-interpolations">
    Markdown template with imports, static attributes and interpolations
  </h1>
  <p>
    This file includes some custom static attributes which should be reflected fine on the resultant object
  </p>
  <p>
    This is a 
    <em>
      Markdown Component
    </em>
     file. Here you can include JSX-style assignment expressions; this component was generated using version 
    0.7.1
     of 
    markdown-component-loader
    !
  </p>
  <p>
    We're importing foo, which is 
    bar
    .
  </p>
  <p>
    We're also adding a react component here: 
    <bar
      style={
        Object {
          "foo": "bar",
        }
      }
      url="https://github.com/ticky/markdown-component-loader/issues" />
  </p>
  <p>
    Another cool thing you can do is use JSX 
    <strong>
      directly
    </strong>
     - here’s an SVG element, used inline: 
    <svg
      style={
        Object {
          "display": "inline",
          "height": "1em",
        }
      }
      viewBox="0 0 304 290">
      <path
        d="M2,111 h300 l-242.7,176.3 92.7,-285.3 92.7,285.3 z"
        fill="none"
        stroke="currentColor"
        strokeWidth="16" />
    </svg>
    .
  </p>
</div>
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"passElementProps":true,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 1 returns the expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.7.1
import foo from \'foo\';
import Bar from \'foo\';
import { bugs, name, version } from \'../package.json\';

MarkdownComponent.propTypes = {
  className: PropTypes.string,
  style: PropTypes.object,
  elementProps: PropTypes.object
};

MarkdownComponent.defaultProps = {
  elementProps: {}
};

MarkdownComponent[\'title\'] = \'a custom title\';

MarkdownComponent[\'myArray\'] = [
  \'foo\',
  \'bar\'
];

MarkdownComponent[\'anObject\'] = {
  \'foo\': \'bar\'
};

function MarkdownComponent(props) {
  const {className, style, elementProps} = props;

  return (
    <div className={className} style={style}>
      <h1 {...elementProps[\'h1\']} id=\"markdown-template-with-imports-static-attributes-and-interpolations\">Markdown template with imports, static attributes and interpolations</h1>
      <p {...elementProps[\'p\']}>This file includes some custom static attributes which should be reflected fine on the resultant object</p>
      <p {...elementProps[\'p\']}>This is a <em {...elementProps[\'em\']}>Markdown Component</em> file. Here you can include JSX-style assignment expressions; this component was generated using version { version } of { name }!</p>
      <p {...elementProps[\'p\']}>We\'re importing foo, which is {foo}.</p>
      <p {...elementProps[\'p\']}>We\'re also adding a react component here: {<Bar {...bugs} style={{ foo: \'bar\' }} />}</p>
      <p {...elementProps[\'p\']}>Another cool thing you can do is use JSX <strong {...elementProps[\'strong\']}>directly</strong> - here’s an SVG element, used inline: { <svg {...elementProps[\'svg\']} style={{ display: \'inline\', height: \'1em\' }} viewBox=\"0 0 304 290\"><path {...elementProps[\'path\']} fill=\"none\" stroke=\"currentColor\" strokeWidth=\"16\" d=\"M2,111 h300 l-242.7,176.3 92.7,-285.3 92.7,285.3 z\" /></svg> }.</p>
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"passElementProps":true,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 2 renders as expected within React 1`] = `
Array [
  "propTypes",
  "defaultProps",
]
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"passElementProps":true,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 2 renders as expected within React 2`] = `
<div
  className={undefined}
  style={undefined} />
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"passElementProps":true,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 2 returns the expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.7.1

MarkdownComponent.propTypes = {
  className: PropTypes.string,
  style: PropTypes.object,
  elementProps: PropTypes.object
};

MarkdownComponent.defaultProps = {
  elementProps: {}
};

function MarkdownComponent(props) {
  const {className, style, elementProps} = props;

  return (
    <div className={className} style={style}>
      {/* no input given */}
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"passElementProps":true,"markdownItPlugins":[null]}\` for component example 0 renders as expected within React 1`] = `
Array [
  "propTypes",
  "defaultProps",
]
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"passElementProps":true,"markdownItPlugins":[null]}\` for component example 0 renders as expected within React 2`] = `
<div
  className={undefined}
  style={undefined}>
  <h1
    id="test-document">
    Test Document
  </h1>
  <p>
    [[toc]]
  </p>
  <h2
    id="basic-markdown-template">
    Basic Markdown Template
  </h2>
  <p>
    This is a basic Markdown template, with no interpolations going on.
  </p>
  <p>
    This should be
  </p>
  <ul>
    <li>
      easy and;
    </li>
    <li>
      predictable!
    </li>
  </ul>
  <h2
    id="heres-a-couple-of-hyperlinks">
    Here's a couple of hyperlinks
  </h2>
  <p>
    <a
      href="https://duckduckgo.com">
      https://duckduckgo.com
    </a>
     
    <a
      href="https://github.com">
      GitHub
    </a>
  </p>
  <h2
    id="heres-a-code-snippet-with-no-interpolations">
    Here's a code snippet with no interpolations
  </h2>
  <pre>
    <code
      className="language-bash">
      npm install -g yarn
      <br />
    </code>
  </pre>
  <h2
    id="heres-a-code-snippet-with-things-which-shouldnt-be-treated-as-interpolations">
    Here's a code snippet with things which shouldn't be treated as interpolations
  </h2>
  <pre>
    <code
      className="language-bash">
      <span
        className="hljs-keyword">
        function
      </span>
       
      <span
        className="hljs-function">
        <span
          className="hljs-title">
          rbenv
        </span>
      </span>
      () 
      {
      <br />
        
      RUBY=blah
      <br />
      }
      <br />
    </code>
  </pre>
  <h2
    id="heres-a-paragraph-with-a-simple-interpolation">
    Here's a paragraph with a simple interpolation
  </h2>
  <p>
    There are 
    1
     props being supplied to this component.
  </p>
  <h2
    id="heres-a-code-snippet-with-a-simple-interpolation">
    Here's a code snippet with a simple interpolation
  </h2>
  <pre>
    <code
      className="language-bash">
      <span
        className="hljs-keyword">
        function
      </span>
       
      <span
        className="hljs-function">
        <span
          className="hljs-title">
          rbenv
        </span>
      </span>
      () 
      {
      <br />
        
      RUBY=
      <br />
      }
      <br />
    </code>
  </pre>
  <h2
    id="heres-an-unhinted-code-snippet">
    Here's an unhinted code snippet
  </h2>
  <pre>
    <code>
      <span
        className="hljs-keyword">
        the
      </span>
       quick brown fox jumps over 
      <span
        className="hljs-keyword">
        the
      </span>
       lazy dog
      <br />
    </code>
  </pre>
  <h2
    id="heres-an-unhinted-snippet-with-no-discernible-language">
    Here's an unhinted snippet with no discernible language
  </h2>
  <pre>
    <code>
      )
      <span
        className="hljs-comment">
        ()
      </span>
      <span
        className="hljs-comment">
        (()
      </span>
      )
      <br />
    </code>
  </pre>
  <pre>
    <code
      className="language-bash">
      brew tap buildkite/buildkite
      <br />
      brew install --token=
      <span
        className="hljs-string">
        '
        INSERT-YOUR-AGENT-TOKEN-HERE
        '
      </span>
       buildkite-agent
      <br />
      <br />
      <span
        className="hljs-function">
        <span
          className="hljs-title">
          function
        </span>
      </span>
      () 
      {
      <br />
        
      ENV=
      <span
        className="hljs-string">
        "foo_bar"
      </span>
      <br />
      }
      <br />
    </code>
  </pre>
  <p>
    Let's also test interpolation inside other elements. 
    <code>
      foo bar
    </code>
  </p>
</div>
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"passElementProps":true,"markdownItPlugins":[null]}\` for component example 0 returns the expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.7.1

MarkdownComponent.propTypes = {
  className: PropTypes.string,
  style: PropTypes.object,
  elementProps: PropTypes.object
};

MarkdownComponent.defaultProps = {
  elementProps: {}
};

function MarkdownComponent(props) {
  const {className, style, elementProps} = props;

  return (
    <div className={className} style={style}>
      <h1 {...elementProps[\'h1\']} id=\"test-document\">Test Document</h1>
      <p {...elementProps[\'p\']}>[[toc]]</p>
      <h2 {...elementProps[\'h2\']} id=\"basic-markdown-template\">Basic Markdown Template</h2>
      <p {...elementProps[\'p\']}>This is a basic Markdown template, with no interpolations going on.</p>
      <p {...elementProps[\'p\']}>This should be</p>
      <ul {...elementProps[\'ul\']}>
        <li {...elementProps[\'li\']}>easy and;</li>
        <li {...elementProps[\'li\']}>predictable!</li>
      </ul>
      <h2 {...elementProps[\'h2\']} id=\"heres-a-couple-of-hyperlinks\">Here\'s a couple of hyperlinks</h2>
      <p {...elementProps[\'p\']}><a {...elementProps[\'a\']} href=\"https://duckduckgo.com\">https://duckduckgo.com</a> <a {...elementProps[\'a\']} href=\"https://github.com\">GitHub</a></p>
      <h2 {...elementProps[\'h2\']} id=\"heres-a-code-snippet-with-no-interpolations\">Here\'s a code snippet with no interpolations</h2>
      <pre {...elementProps[\'pre\']}><code {...elementProps[\'code\']} className=\"language-bash\">npm install -g yarn<br {...elementProps[\'br\']} /></code></pre>
      <h2 {...elementProps[\'h2\']} id=\"heres-a-code-snippet-with-things-which-shouldnt-be-treated-as-interpolations\">Here\'s a code snippet with things which shouldn\'t be treated as interpolations</h2>
      <pre {...elementProps[\'pre\']}><code {...elementProps[\'code\']} className=\"language-bash\"><span {...elementProps[\'span\']} className=\"hljs-keyword\">function</span> <span {...elementProps[\'span\']} className=\"hljs-function\"><span {...elementProps[\'span\']} className=\"hljs-title\">rbenv</span></span>() {\"{\"}<br {...elementProps[\'br\']} />{\"  \"}RUBY=blah<br {...elementProps[\'br\']} />{\"}\"}<br {...elementProps[\'br\']} /></code></pre>
      <h2 {...elementProps[\'h2\']} id=\"heres-a-paragraph-with-a-simple-interpolation\">Here\'s a paragraph with a simple interpolation</h2>
      <p {...elementProps[\'p\']}>There are {Object.keys(props).length} props being supplied to this component.</p>
      <h2 {...elementProps[\'h2\']} id=\"heres-a-code-snippet-with-a-simple-interpolation\">Here\'s a code snippet with a simple interpolation</h2>
      <pre {...elementProps[\'pre\']}><code {...elementProps[\'code\']} className=\"language-bash\"><span {...elementProps[\'span\']} className=\"hljs-keyword\">function</span> <span {...elementProps[\'span\']} className=\"hljs-function\"><span {...elementProps[\'span\']} className=\"hljs-title\">rbenv</span></span>() {\"{\"}<br {...elementProps[\'br\']} />{\"  \"}RUBY={props.rubycontent}<br {...elementProps[\'br\']} />{\"}\"}<br {...elementProps[\'br\']} /></code></pre>
      <h2 {...elementProps[\'h2\']} id=\"heres-an-unhinted-code-snippet\">Here\'s an unhinted code snippet</h2>
      <pre {...elementProps[\'pre\']}><code {...elementProps[\'code\']}><span {...elementProps[\'span\']} className=\"hljs-keyword\">the</span> quick brown fox jumps over <span {...elementProps[\'span\']} className=\"hljs-keyword\">the</span> lazy dog<br {...elementProps[\'br\']} /></code></pre>
      <h2 {...elementProps[\'h2\']} id=\"heres-an-unhinted-snippet-with-no-discernible-language\">Here\'s an unhinted snippet with no discernible language</h2>
      <pre {...elementProps[\'pre\']}><code {...elementProps[\'code\']}>)<span {...elementProps[\'span\']} className=\"hljs-comment\">()</span><span {...elementProps[\'span\']} className=\"hljs-comment\">(()</span>)<br {...elementProps[\'br\']} /></code></pre>
      <pre {...elementProps[\'pre\']}><code {...elementProps[\'code\']} className=\"language-bash\">brew tap buildkite/buildkite<br {...elementProps[\'br\']} />brew install --token=<span {...elementProps[\'span\']} className=\"hljs-string\">\'{props.token || \'INSERT-YOUR-AGENT-TOKEN-HERE\'}\'</span> buildkite-agent<br {...elementProps[\'br\']} /><br {...elementProps[\'br\']} /><span {...elementProps[\'span\']} className=\"hljs-function\"><span {...elementProps[\'span\']} className=\"hljs-title\">function</span></span>() {\"{\"}<br {...elementProps[\'br\']} />{\"  \"}ENV=<span {...elementProps[\'span\']} className=\"hljs-string\">\"foo_bar\"</span><br {...elementProps[\'br\']} />{\"}\"}<br {...elementProps[\'br\']} /></code></pre>
      <p {...elementProps[\'p\']}>Let\'s also test interpolation inside other elements. <code {...elementProps[\'code\']}>{ \"foo bar\" }</code></p>
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"passElementProps":true,"markdownItPlugins":[null]}\` for component example 1 renders as expected within React 1`] = `
Array [
  "propTypes",
  "defaultProps",
  "title",
  "myArray",
  "anObject",
]
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"passElementProps":true,"markdownItPlugins":[null]}\` for component example 1 renders as expected within React 2`] = `
<div
  className={undefined}
  style={undefined}>
  <h1
    id="markdown-template-with-imports-static-attributes-and-interpolations">
    Markdown template with imports, static attributes and interpolations
  </h1>
  <p>
    This file includes some custom static attributes which should be reflected fine on the resultant object
  </p>
  <p>
    This is a 
    <em>
      Markdown Component
    </em>
     file. Here you can include JSX-style assignment expressions; this component was generated using version 
    0.7.1
     of 
    markdown-component-loader
    !
  </p>
  <p>
    We're importing foo, which is 
    bar
    .
  </p>
  <p>
    We're also adding a react component here: 
    <bar
      style={
        Object {
          "foo": "bar",
        }
      }
      url="https://github.com/ticky/markdown-component-loader/issues" />
  </p>
  <p>
    Another cool thing you can do is use JSX 
    <strong>
      directly
    </strong>
     - here’s an SVG element, used inline: 
    <svg
      style={
        Object {
          "display": "inline",
          "height": "1em",
        }
      }
      viewBox="0 0 304 290">
      <path
        d="M2,111 h300 l-242.7,176.3 92.7,-285.3 92.7,285.3 z"
        fill="none"
        stroke="currentColor"
        strokeWidth="16" />
    </svg>
    .
  </p>
</div>
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"passElementProps":true,"markdownItPlugins":[null]}\` for component example 1 returns the expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.7.1
import foo from \'foo\';
import Bar from \'foo\';
import { bugs, name, version } from \'../package.json\';

MarkdownComponent.propTypes = {
  className: PropTypes.string,
  style: PropTypes.object,
  elementProps: PropTypes.object
};

MarkdownComponent.defaultProps = {
  elementProps: {}
};

MarkdownComponent[\'title\'] = \'a custom title\';

MarkdownComponent[\'myArray\'] = [
  \'foo\',
  \'bar\'
];

MarkdownComponent[\'anObject\'] = {
  \'foo\': \'bar\'
};

function MarkdownComponent(props) {
  const {className, style, elementProps} = props;

  return (
    <div className={className} style={style}>
      <h1 {...elementProps[\'h1\']} id=\"markdown-template-with-imports-static-attributes-and-interpolations\">Markdown template with imports, static attributes and interpolations</h1>
      <p {...elementProps[\'p\']}>This file includes some custom static attributes which should be reflected fine on the resultant object</p>
      <p {...elementProps[\'p\']}>This is a <em {...elementProps[\'em\']}>Markdown Component</em> file. Here you can include JSX-style assignment expressions; this component was generated using version { version } of { name }!</p>
      <p {...elementProps[\'p\']}>We\'re importing foo, which is {foo}.</p>
      <p {...elementProps[\'p\']}>We\'re also adding a react component here: {<Bar {...bugs} style={{ foo: \'bar\' }} />}</p>
      <p {...elementProps[\'p\']}>Another cool thing you can do is use JSX <strong {...elementProps[\'strong\']}>directly</strong> - here’s an SVG element, used inline: { <svg {...elementProps[\'svg\']} style={{ display: \'inline\', height: \'1em\' }} viewBox=\"0 0 304 290\"><path {...elementProps[\'path\']} fill=\"none\" stroke=\"currentColor\" strokeWidth=\"16\" d=\"M2,111 h300 l-242.7,176.3 92.7,-285.3 92.7,285.3 z\" /></svg> }.</p>
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"passElementProps":true,"markdownItPlugins":[null]}\` for component example 2 renders as expected within React 1`] = `
Array [
  "propTypes",
  "defaultProps",
]
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"passElementProps":true,"markdownItPlugins":[null]}\` for component example 2 renders as expected within React 2`] = `
<div
  className={undefined}
  style={undefined} />
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"passElementProps":true,"markdownItPlugins":[null]}\` for component example 2 returns the expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.7.1

MarkdownComponent.propTypes = {
  className: PropTypes.string,
  style: PropTypes.object,
  elementProps: PropTypes.object
};

MarkdownComponent.defaultProps = {
  elementProps: {}
};

function MarkdownComponent(props) {
  const {className, style, elementProps} = props;

  return (
    <div className={className} style={style}>
      {/* no input given */}
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"passElementProps":true}\` for component example 0 renders as expected within React 1`] = `
Array [
  "propTypes",
  "defaultProps",
]
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"passElementProps":true}\` for component example 0 renders as expected within React 2`] = `
<div
  className={undefined}
  style={undefined}>
  <h1>
    Test Document
  </h1>
  <p>
    [[toc]]
  </p>
  <h2>
    Basic Markdown Template
  </h2>
  <p>
    This is a basic Markdown template, with no interpolations going on.
  </p>
  <p>
    This should be
  </p>
  <ul>
    <li>
      easy and;
    </li>
    <li>
      predictable!
    </li>
  </ul>
  <h2>
    Here's a couple of hyperlinks
  </h2>
  <p>
    <a
      href="https://duckduckgo.com">
      https://duckduckgo.com
    </a>
     
    <a
      href="https://github.com">
      GitHub
    </a>
  </p>
  <h2>
    Here's a code snippet with no interpolations
  </h2>
  <pre>
    <code
      className="language-bash">
      npm install -g yarn
      <br />
    </code>
  </pre>
  <h2>
    Here's a code snippet with things which shouldn't be treated as interpolations
  </h2>
  <pre>
    <code
      className="language-bash">
      <span
        className="hljs-keyword">
        function
      </span>
       
      <span
        className="hljs-function">
        <span
          className="hljs-title">
          rbenv
        </span>
      </span>
      () 
      {
      <br />
        
      RUBY=blah
      <br />
      }
      <br />
    </code>
  </pre>
  <h2>
    Here's a paragraph with a simple interpolation
  </h2>
  <p>
    There are 
    1
     props being supplied to this component.
  </p>
  <h2>
    Here's a code snippet with a simple interpolation
  </h2>
  <pre>
    <code
      className="language-bash">
      <span
        className="hljs-keyword">
        function
      </span>
       
      <span
        className="hljs-function">
        <span
          className="hljs-title">
          rbenv
        </span>
      </span>
      () 
      {
      <br />
        
      RUBY=
      <br />
      }
      <br />
    </code>
  </pre>
  <h2>
    Here's an unhinted code snippet
  </h2>
  <pre>
    <code>
      <span
        className="hljs-keyword">
        the
      </span>
       quick brown fox jumps over 
      <span
        className="hljs-keyword">
        the
      </span>
       lazy dog
      <br />
    </code>
  </pre>
  <h2>
    Here's an unhinted snippet with no discernible language
  </h2>
  <pre>
    <code>
      )
      <span
        className="hljs-comment">
        ()
      </span>
      <span
        className="hljs-comment">
        (()
      </span>
      )
      <br />
    </code>
  </pre>
  <pre>
    <code
      className="language-bash">
      brew tap buildkite/buildkite
      <br />
      brew install --token=
      <span
        className="hljs-string">
        '
        INSERT-YOUR-AGENT-TOKEN-HERE
        '
      </span>
       buildkite-agent
      <br />
      <br />
      <span
        className="hljs-function">
        <span
          className="hljs-title">
          function
        </span>
      </span>
      () 
      {
      <br />
        
      ENV=
      <span
        className="hljs-string">
        "foo_bar"
      </span>
      <br />
      }
      <br />
    </code>
  </pre>
  <p>
    Let's also test interpolation inside other elements. 
    <code>
      foo bar
    </code>
  </p>
</div>
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"passElementProps":true}\` for component example 0 returns the expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.7.1

MarkdownComponent.propTypes = {
  className: PropTypes.string,
  style: PropTypes.object,
  elementProps: PropTypes.object
};

MarkdownComponent.defaultProps = {
  elementProps: {}
};

function MarkdownComponent(props) {
  const {className, style, elementProps} = props;

  return (
    <div className={className} style={style}>
      <h1 {...elementProps[\'h1\']}>Test Document</h1>
      <p {...elementProps[\'p\']}>[[toc]]</p>
      <h2 {...elementProps[\'h2\']}>Basic Markdown Template</h2>
      <p {...elementProps[\'p\']}>This is a basic Markdown template, with no interpolations going on.</p>
      <p {...elementProps[\'p\']}>This should be</p>
      <ul {...elementProps[\'ul\']}>
        <li {...elementProps[\'li\']}>easy and;</li>
        <li {...elementProps[\'li\']}>predictable!</li>
      </ul>
      <h2 {...elementProps[\'h2\']}>Here\'s a couple of hyperlinks</h2>
      <p {...elementProps[\'p\']}><a {...elementProps[\'a\']} href=\"https://duckduckgo.com\">https://duckduckgo.com</a> <a {...elementProps[\'a\']} href=\"https://github.com\">GitHub</a></p>
      <h2 {...elementProps[\'h2\']}>Here\'s a code snippet with no interpolations</h2>
      <pre {...elementProps[\'pre\']}><code {...elementProps[\'code\']} className=\"language-bash\">npm install -g yarn<br {...elementProps[\'br\']} /></code></pre>
      <h2 {...elementProps[\'h2\']}>Here\'s a code snippet with things which shouldn\'t be treated as interpolations</h2>
      <pre {...elementProps[\'pre\']}><code {...elementProps[\'code\']} className=\"language-bash\"><span {...elementProps[\'span\']} className=\"hljs-keyword\">function</span> <span {...elementProps[\'span\']} className=\"hljs-function\"><span {...elementProps[\'span\']} className=\"hljs-title\">rbenv</span></span>() {\"{\"}<br {...elementProps[\'br\']} />{\"  \"}RUBY=blah<br {...elementProps[\'br\']} />{\"}\"}<br {...elementProps[\'br\']} /></code></pre>
      <h2 {...elementProps[\'h2\']}>Here\'s a paragraph with a simple interpolation</h2>
      <p {...elementProps[\'p\']}>There are {Object.keys(props).length} props being supplied to this component.</p>
      <h2 {...elementProps[\'h2\']}>Here\'s a code snippet with a simple interpolation</h2>
      <pre {...elementProps[\'pre\']}><code {...elementProps[\'code\']} className=\"language-bash\"><span {...elementProps[\'span\']} className=\"hljs-keyword\">function</span> <span {...elementProps[\'span\']} className=\"hljs-function\"><span {...elementProps[\'span\']} className=\"hljs-title\">rbenv</span></span>() {\"{\"}<br {...elementProps[\'br\']} />{\"  \"}RUBY={props.rubycontent}<br {...elementProps[\'br\']} />{\"}\"}<br {...elementProps[\'br\']} /></code></pre>
      <h2 {...elementProps[\'h2\']}>Here\'s an unhinted code snippet</h2>
      <pre {...elementProps[\'pre\']}><code {...elementProps[\'code\']}><span {...elementProps[\'span\']} className=\"hljs-keyword\">the</span> quick brown fox jumps over <span {...elementProps[\'span\']} className=\"hljs-keyword\">the</span> lazy dog<br {...elementProps[\'br\']} /></code></pre>
      <h2 {...elementProps[\'h2\']}>Here\'s an unhinted snippet with no discernible language</h2>
      <pre {...elementProps[\'pre\']}><code {...elementProps[\'code\']}>)<span {...elementProps[\'span\']} className=\"hljs-comment\">()</span><span {...elementProps[\'span\']} className=\"hljs-comment\">(()</span>)<br {...elementProps[\'br\']} /></code></pre>
      <pre {...elementProps[\'pre\']}><code {...elementProps[\'code\']} className=\"language-bash\">brew tap buildkite/buildkite<br {...elementProps[\'br\']} />brew install --token=<span {...elementProps[\'span\']} className=\"hljs-string\">\'{props.token || \'INSERT-YOUR-AGENT-TOKEN-HERE\'}\'</span> buildkite-agent<br {...elementProps[\'br\']} /><br {...elementProps[\'br\']} /><span {...elementProps[\'span\']} className=\"hljs-function\"><span {...elementProps[\'span\']} className=\"hljs-title\">function</span></span>() {\"{\"}<br {...elementProps[\'br\']} />{\"  \"}ENV=<span {...elementProps[\'span\']} className=\"hljs-string\">\"foo_bar\"</span><br {...elementProps[\'br\']} />{\"}\"}<br {...elementProps[\'br\']} /></code></pre>
      <p {...elementProps[\'p\']}>Let\'s also test interpolation inside other elements. <code {...elementProps[\'code\']}>{ \"foo bar\" }</code></p>
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"passElementProps":true}\` for component example 1 renders as expected within React 1`] = `
Array [
  "propTypes",
  "defaultProps",
  "title",
  "myArray",
  "anObject",
]
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"passElementProps":true}\` for component example 1 renders as expected within React 2`] = `
<div
  className={undefined}
  style={undefined}>
  <h1>
    Markdown template with imports, static attributes and interpolations
  </h1>
  <p>
    This file includes some custom static attributes which should be reflected fine on the resultant object
  </p>
  <p>
    This is a 
    <em>
      Markdown Component
    </em>
     file. Here you can include JSX-style assignment expressions; this component was generated using version 
    0.7.1
     of 
    markdown-component-loader
    !
  </p>
  <p>
    We're importing foo, which is 
    bar
    .
  </p>
  <p>
    We're also adding a react component here: 
    <bar
      style={
        Object {
          "foo": "bar",
        }
      }
      url="https://github.com/ticky/markdown-component-loader/issues" />
  </p>
  <p>
    Another cool thing you can do is use JSX 
    <strong>
      directly
    </strong>
     - here’s an SVG element, used inline: 
    <svg
      style={
        Object {
          "display": "inline",
          "height": "1em",
        }
      }
      viewBox="0 0 304 290">
      <path
        d="M2,111 h300 l-242.7,176.3 92.7,-285.3 92.7,285.3 z"
        fill="none"
        stroke="currentColor"
        strokeWidth="16" />
    </svg>
    .
  </p>
</div>
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"passElementProps":true}\` for component example 1 returns the expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.7.1
import foo from \'foo\';
import Bar from \'foo\';
import { bugs, name, version } from \'../package.json\';

MarkdownComponent.propTypes = {
  className: PropTypes.string,
  style: PropTypes.object,
  elementProps: PropTypes.object
};

MarkdownComponent.defaultProps = {
  elementProps: {}
};

MarkdownComponent[\'title\'] = \'a custom title\';

MarkdownComponent[\'myArray\'] = [
  \'foo\',
  \'bar\'
];

MarkdownComponent[\'anObject\'] = {
  \'foo\': \'bar\'
};

function MarkdownComponent(props) {
  const {className, style, elementProps} = props;

  return (
    <div className={className} style={style}>
      <h1 {...elementProps[\'h1\']}>Markdown template with imports, static attributes and interpolations</h1>
      <p {...elementProps[\'p\']}>This file includes some custom static attributes which should be reflected fine on the resultant object</p>
      <p {...elementProps[\'p\']}>This is a <em {...elementProps[\'em\']}>Markdown Component</em> file. Here you can include JSX-style assignment expressions; this component was generated using version { version } of { name }!</p>
      <p {...elementProps[\'p\']}>We\'re importing foo, which is {foo}.</p>
      <p {...elementProps[\'p\']}>We\'re also adding a react component here: {<Bar {...bugs} style={{ foo: \'bar\' }} />}</p>
      <p {...elementProps[\'p\']}>Another cool thing you can do is use JSX <strong {...elementProps[\'strong\']}>directly</strong> - here’s an SVG element, used inline: { <svg {...elementProps[\'svg\']} style={{ display: \'inline\', height: \'1em\' }} viewBox=\"0 0 304 290\"><path {...elementProps[\'path\']} fill=\"none\" stroke=\"currentColor\" strokeWidth=\"16\" d=\"M2,111 h300 l-242.7,176.3 92.7,-285.3 92.7,285.3 z\" /></svg> }.</p>
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"passElementProps":true}\` for component example 2 renders as expected within React 1`] = `
Array [
  "propTypes",
  "defaultProps",
]
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"passElementProps":true}\` for component example 2 renders as expected within React 2`] = `
<div
  className={undefined}
  style={undefined} />
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"passElementProps":true}\` for component example 2 returns the expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.7.1

MarkdownComponent.propTypes = {
  className: PropTypes.string,
  style: PropTypes.object,
  elementProps: PropTypes.object
};

MarkdownComponent.defaultProps = {
  elementProps: {}
};

function MarkdownComponent(props) {
  const {className, style, elementProps} = props;

  return (
    <div className={className} style={style}>
      {/* no input given */}
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false}\` for component example 0 renders as expected within React 1`] = `
Array [
  "propTypes",
]
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false}\` for component example 0 renders as expected within React 2`] = `
<div
  className={undefined}
  style={undefined}>
  <h1>
    Test Document
  </h1>
  <p>
    [[toc]]
  </p>
  <h2>
    Basic Markdown Template
  </h2>
  <p>
    This is a basic Markdown template, with no interpolations going on.
  </p>
  <p>
    This should be
  </p>
  <ul>
    <li>
      easy and;
    </li>
    <li>
      predictable!
    </li>
  </ul>
  <h2>
    Here's a couple of hyperlinks
  </h2>
  <p>
    <a
      href="https://duckduckgo.com">
      https://duckduckgo.com
    </a>
     
    <a
      href="https://github.com">
      GitHub
    </a>
  </p>
  <h2>
    Here's a code snippet with no interpolations
  </h2>
  <pre>
    <code
      className="language-bash">
      npm install -g yarn
      <br />
    </code>
  </pre>
  <h2>
    Here's a code snippet with things which shouldn't be treated as interpolations
  </h2>
  <pre>
    <code
      className="language-bash">
      <span
        className="hljs-keyword">
        function
      </span>
       
      <span
        className="hljs-function">
        <span
          className="hljs-title">
          rbenv
        </span>
      </span>
      () 
      {
      <br />
        
      RUBY=blah
      <br />
      }
      <br />
    </code>
  </pre>
  <h2>
    Here's a paragraph with a simple interpolation
  </h2>
  <p>
    There are 
    0
     props being supplied to this component.
  </p>
  <h2>
    Here's a code snippet with a simple interpolation
  </h2>
  <pre>
    <code
      className="language-bash">
      <span
        className="hljs-keyword">
        function
      </span>
       
      <span
        className="hljs-function">
        <span
          className="hljs-title">
          rbenv
        </span>
      </span>
      () 
      {
      <br />
        
      RUBY=
      <br />
      }
      <br />
    </code>
  </pre>
  <h2>
    Here's an unhinted code snippet
  </h2>
  <pre>
    <code>
      <span
        className="hljs-keyword">
        the
      </span>
       quick brown fox jumps over 
      <span
        className="hljs-keyword">
        the
      </span>
       lazy dog
      <br />
    </code>
  </pre>
  <h2>
    Here's an unhinted snippet with no discernible language
  </h2>
  <pre>
    <code>
      )
      <span
        className="hljs-comment">
        ()
      </span>
      <span
        className="hljs-comment">
        (()
      </span>
      )
      <br />
    </code>
  </pre>
  <pre>
    <code
      className="language-bash">
      brew tap buildkite/buildkite
      <br />
      brew install --token=
      <span
        className="hljs-string">
        '
        INSERT-YOUR-AGENT-TOKEN-HERE
        '
      </span>
       buildkite-agent
      <br />
      <br />
      <span
        className="hljs-function">
        <span
          className="hljs-title">
          function
        </span>
      </span>
      () 
      {
      <br />
        
      ENV=
      <span
        className="hljs-string">
        "foo_bar"
      </span>
      <br />
      }
      <br />
    </code>
  </pre>
  <p>
    Let's also test interpolation inside other elements. 
    <code>
      foo bar
    </code>
  </p>
</div>
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false}\` for component example 0 returns the expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.7.1

MarkdownComponent.propTypes = {
  className: PropTypes.string,
  style: PropTypes.object
};

function MarkdownComponent(props) {
  const {className, style} = props;

  return (
    <div className={className} style={style}>
      <h1>Test Document</h1>
      <p>[[toc]]</p>
      <h2>Basic Markdown Template</h2>
      <p>This is a basic Markdown template, with no interpolations going on.</p>
      <p>This should be</p>
      <ul>
        <li>easy and;</li>
        <li>predictable!</li>
      </ul>
      <h2>Here\'s a couple of hyperlinks</h2>
      <p><a href=\"https://duckduckgo.com\">https://duckduckgo.com</a> <a href=\"https://github.com\">GitHub</a></p>
      <h2>Here\'s a code snippet with no interpolations</h2>
      <pre><code className=\"language-bash\">npm install -g yarn<br /></code></pre>
      <h2>Here\'s a code snippet with things which shouldn\'t be treated as interpolations</h2>
      <pre><code className=\"language-bash\"><span className=\"hljs-keyword\">function</span> <span className=\"hljs-function\"><span className=\"hljs-title\">rbenv</span></span>() {\"{\"}<br />{\"  \"}RUBY=blah<br />{\"}\"}<br /></code></pre>
      <h2>Here\'s a paragraph with a simple interpolation</h2>
      <p>There are {Object.keys(props).length} props being supplied to this component.</p>
      <h2>Here\'s a code snippet with a simple interpolation</h2>
      <pre><code className=\"language-bash\"><span className=\"hljs-keyword\">function</span> <span className=\"hljs-function\"><span className=\"hljs-title\">rbenv</span></span>() {\"{\"}<br />{\"  \"}RUBY={props.rubycontent}<br />{\"}\"}<br /></code></pre>
      <h2>Here\'s an unhinted code snippet</h2>
      <pre><code><span className=\"hljs-keyword\">the</span> quick brown fox jumps over <span className=\"hljs-keyword\">the</span> lazy dog<br /></code></pre>
      <h2>Here\'s an unhinted snippet with no discernible language</h2>
      <pre><code>)<span className=\"hljs-comment\">()</span><span className=\"hljs-comment\">(()</span>)<br /></code></pre>
      <pre><code className=\"language-bash\">brew tap buildkite/buildkite<br />brew install --token=<span className=\"hljs-string\">\'{props.token || \'INSERT-YOUR-AGENT-TOKEN-HERE\'}\'</span> buildkite-agent<br /><br /><span className=\"hljs-function\"><span className=\"hljs-title\">function</span></span>() {\"{\"}<br />{\"  \"}ENV=<span className=\"hljs-string\">\"foo_bar\"</span><br />{\"}\"}<br /></code></pre>
      <p>Let\'s also test interpolation inside other elements. <code>{ \"foo bar\" }</code></p>
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false}\` for component example 1 renders as expected within React 1`] = `
Array [
  "propTypes",
  "title",
  "myArray",
  "anObject",
]
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false}\` for component example 1 renders as expected within React 2`] = `
<div
  className={undefined}
  style={undefined}>
  <h1>
    Markdown template with imports, static attributes and interpolations
  </h1>
  <p>
    This file includes some custom static attributes which should be reflected fine on the resultant object
  </p>
  <p>
    This is a 
    <em>
      Markdown Component
    </em>
     file. Here you can include JSX-style assignment expressions; this component was generated using version 
    0.7.1
     of 
    markdown-component-loader
    !
  </p>
  <p>
    We're importing foo, which is 
    bar
    .
  </p>
  <p>
    We're also adding a react component here: 
    <bar
      style={
        Object {
          "foo": "bar",
        }
      }
      url="https://github.com/ticky/markdown-component-loader/issues" />
  </p>
  <p>
    Another cool thing you can do is use JSX 
    <strong>
      directly
    </strong>
     - here’s an SVG element, used inline: 
    <svg
      style={
        Object {
          "display": "inline",
          "height": "1em",
        }
      }
      viewBox="0 0 304 290">
      <path
        d="M2,111 h300 l-242.7,176.3 92.7,-285.3 92.7,285.3 z"
        fill="none"
        stroke="currentColor"
        strokeWidth="16" />
    </svg>
    .
  </p>
</div>
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false}\` for component example 1 returns the expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.7.1
import foo from \'foo\';
import Bar from \'foo\';
import { bugs, name, version } from \'../package.json\';

MarkdownComponent.propTypes = {
  className: PropTypes.string,
  style: PropTypes.object
};

MarkdownComponent[\'title\'] = \'a custom title\';

MarkdownComponent[\'myArray\'] = [
  \'foo\',
  \'bar\'
];

MarkdownComponent[\'anObject\'] = {
  \'foo\': \'bar\'
};

function MarkdownComponent(props) {
  const {className, style} = props;

  return (
    <div className={className} style={style}>
      <h1>Markdown template with imports, static attributes and interpolations</h1>
      <p>This file includes some custom static attributes which should be reflected fine on the resultant object</p>
      <p>This is a <em>Markdown Component</em> file. Here you can include JSX-style assignment expressions; this component was generated using version { version } of { name }!</p>
      <p>We\'re importing foo, which is {foo}.</p>
      <p>We\'re also adding a react component here: {<Bar {...bugs} style={{ foo: \'bar\' }} />}</p>
      <p>Another cool thing you can do is use JSX <strong>directly</strong> - here’s an SVG element, used inline: { <svg style={{ display: \'inline\', height: \'1em\' }} viewBox=\"0 0 304 290\"><path fill=\"none\" stroke=\"currentColor\" strokeWidth=\"16\" d=\"M2,111 h300 l-242.7,176.3 92.7,-285.3 92.7,285.3 z\" /></svg> }.</p>
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false}\` for component example 2 renders as expected within React 1`] = `
Array [
  "propTypes",
]
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false}\` for component example 2 renders as expected within React 2`] = `
<div
  className={undefined}
  style={undefined} />
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false}\` for component example 2 returns the expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.7.1

MarkdownComponent.propTypes = {
  className: PropTypes.string,
  style: PropTypes.object
};

function MarkdownComponent(props) {
  const {className, style} = props;

  return (
    <div className={className} style={style}>
      {/* no input given */}
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"markdownItPlugins":"somenonsensevalue"}\` for component example 0 renders as expected within React 1`] = `
Array [
  "propTypes",
]
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"markdownItPlugins":"somenonsensevalue"}\` for component example 0 renders as expected within React 2`] = `
<div
  className={undefined}
  style={undefined}>
  <h1>
    Test Document
  </h1>
  <p>
    [[toc]]
  </p>
  <h2>
    Basic Markdown Template
  </h2>
  <p>
    This is a basic Markdown template, with no interpolations going on.
  </p>
  <p>
    This should be
  </p>
  <ul>
    <li>
      easy and;
    </li>
    <li>
      predictable!
    </li>
  </ul>
  <h2>
    Here\'s a couple of hyperlinks
  </h2>
  <p>
    <a
      href="https://duckduckgo.com">
      https://duckduckgo.com
    </a>
     
    <a
      href="https://github.com">
      GitHub
    </a>
  </p>
  <h2>
    Here\'s a code snippet with no interpolations
  </h2>
  <pre>
    <code
      className="language-bash">
      npm install -g yarn
      <br />
    </code>
  </pre>
  <h2>
    Here\'s a code snippet with things which shouldn\'t be treated as interpolations
  </h2>
  <pre>
    <code
      className="language-bash">
      <span
        className="hljs-keyword">
        function
      </span>
       
      <span
        className="hljs-function">
        <span
          className="hljs-title">
          rbenv
        </span>
      </span>
      () 
      {
      <br />
        
      RUBY=blah
      <br />
      }
      <br />
    </code>
  </pre>
  <h2>
    Here\'s a paragraph with a simple interpolation
  </h2>
  <p>
    There are 
    0
     props being supplied to this component.
  </p>
  <h2>
    Here\'s a code snippet with a simple interpolation
  </h2>
  <pre>
    <code
      className="language-bash">
      <span
        className="hljs-keyword">
        function
      </span>
       
      <span
        className="hljs-function">
        <span
          className="hljs-title">
          rbenv
        </span>
      </span>
      () 
      {
      <br />
        
      RUBY=
      <br />
      }
      <br />
    </code>
  </pre>
  <h2>
    Here\'s an unhinted code snippet
  </h2>
  <pre>
    <code>
      <span
        className="hljs-keyword">
        the
      </span>
       quick brown fox jumps over 
      <span
        className="hljs-keyword">
        the
      </span>
       lazy dog
      <br />
    </code>
  </pre>
  <h2>
    Here\'s an unhinted snippet with no discernible language
  </h2>
  <pre>
    <code>
      )
      <span
        className="hljs-comment">
        ()
      </span>
      <span
        className="hljs-comment">
        (()
      </span>
      )
      <br />
    </code>
  </pre>
  <pre>
    <code
      className="language-bash">
      brew tap buildkite/buildkite
      <br />
      brew install --token=
      <span
        className="hljs-string">
        \'
        INSERT-YOUR-AGENT-TOKEN-HERE
        \'
      </span>
       buildkite-agent
      <br />
      <br />
      <span
        className="hljs-function">
        <span
          className="hljs-title">
          function
        </span>
      </span>
      () 
      {
      <br />
        
      ENV=
      <span
        className="hljs-string">
        \"foo_bar\"
      </span>
      <br />
      }
      <br />
    </code>
  </pre>
  <p>
    Let\'s also test interpolation inside other elements. 
    <code>
      foo bar
    </code>
  </p>
</div>
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"markdownItPlugins":"somenonsensevalue"}\` for component example 0 returns the expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.7.1
import React from \'react\';
import PropTypes from \'prop-types\';

MarkdownComponent.propTypes = {
  className: PropTypes.string,
  style: PropTypes.object
};

function MarkdownComponent(props) {
  const {className, style} = props;

  return (
    <div className={className} style={style}>
      <h1>Test Document</h1>
      <p>[[toc]]</p>
      <h2>Basic Markdown Template</h2>
      <p>This is a basic Markdown template, with no interpolations going on.</p>
      <p>This should be</p>
      <ul>
        <li>easy and;</li>
        <li>predictable!</li>
      </ul>
      <h2>Here\'s a couple of hyperlinks</h2>
      <p><a href=\"https://duckduckgo.com\">https://duckduckgo.com</a> <a href=\"https://github.com\">GitHub</a></p>
      <h2>Here\'s a code snippet with no interpolations</h2>
      <pre><code className=\"language-bash\">npm install -g yarn<br /></code></pre>
      <h2>Here\'s a code snippet with things which shouldn\'t be treated as interpolations</h2>
      <pre><code className=\"language-bash\"><span className=\"hljs-keyword\">function</span> <span className=\"hljs-function\"><span className=\"hljs-title\">rbenv</span></span>() {\"{\"}<br />{\"  \"}RUBY=blah<br />{\"}\"}<br /></code></pre>
      <h2>Here\'s a paragraph with a simple interpolation</h2>
      <p>There are {Object.keys(props).length} props being supplied to this component.</p>
      <h2>Here\'s a code snippet with a simple interpolation</h2>
      <pre><code className=\"language-bash\"><span className=\"hljs-keyword\">function</span> <span className=\"hljs-function\"><span className=\"hljs-title\">rbenv</span></span>() {\"{\"}<br />{\"  \"}RUBY={props.rubycontent}<br />{\"}\"}<br /></code></pre>
      <h2>Here\'s an unhinted code snippet</h2>
      <pre><code><span className=\"hljs-keyword\">the</span> quick brown fox jumps over <span className=\"hljs-keyword\">the</span> lazy dog<br /></code></pre>
      <h2>Here\'s an unhinted snippet with no discernible language</h2>
      <pre><code>)<span className=\"hljs-comment\">()</span><span className=\"hljs-comment\">(()</span>)<br /></code></pre>
      <pre><code className=\"language-bash\">brew tap buildkite/buildkite<br />brew install --token=<span className=\"hljs-string\">\'{props.token || \'INSERT-YOUR-AGENT-TOKEN-HERE\'}\'</span> buildkite-agent<br /><br /><span className=\"hljs-function\"><span className=\"hljs-title\">function</span></span>() {\"{\"}<br />{\"  \"}ENV=<span className=\"hljs-string\">\"foo_bar\"</span><br />{\"}\"}<br /></code></pre>
      <p>Let\'s also test interpolation inside other elements. <code>{ \"foo bar\" }</code></p>
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"markdownItPlugins":"somenonsensevalue"}\` for component example 1 renders as expected within React 1`] = `
Array [
  "propTypes",
  "title",
  "myArray",
  "anObject",
]
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"markdownItPlugins":"somenonsensevalue"}\` for component example 1 renders as expected within React 2`] = `
<div
  className={undefined}
  style={undefined}>
  <h1>
    Markdown template with imports, static attributes and interpolations
  </h1>
  <p>
    This file includes some custom static attributes which should be reflected fine on the resultant object
  </p>
  <p>
    This is a 
    <em>
      Markdown Component
    </em>
     file. Here you can include JSX-style assignment expressions; this component was generated using version 
    0.7.1
     of 
    markdown-component-loader
    !
  </p>
  <p>
    We\'re importing foo, which is 
    bar
    .
  </p>
  <p>
    We\'re also adding a react component here: 
    <bar
      style={
        Object {
          "foo": "bar",
        }
      }
      url="https://github.com/ticky/markdown-component-loader/issues" />
  </p>
  <p>
    Another cool thing you can do is use JSX 
    <strong>
      directly
    </strong>
     - here’s an SVG element, used inline: 
    <svg
      style={
        Object {
          "display": "inline",
          "height": "1em",
        }
      }
      viewBox="0 0 304 290">
      <path
        d="M2,111 h300 l-242.7,176.3 92.7,-285.3 92.7,285.3 z"
        fill="none"
        stroke="currentColor"
        strokeWidth="16" />
    </svg>
    .
  </p>
</div>
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"markdownItPlugins":"somenonsensevalue"}\` for component example 1 returns the expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.7.1
import React from \'react\';
import PropTypes from \'prop-types\';
import foo from \'foo\';
import Bar from \'foo\';
import { bugs, name, version } from \'../package.json\';

MarkdownComponent.propTypes = {
  className: PropTypes.string,
  style: PropTypes.object
};

MarkdownComponent[\'title\'] = \'a custom title\';

MarkdownComponent[\'myArray\'] = [
  \'foo\',
  \'bar\'
];

MarkdownComponent[\'anObject\'] = {
  \'foo\': \'bar\'
};

function MarkdownComponent(props) {
  const {className, style} = props;

  return (
    <div className={className} style={style}>
      <h1>Markdown template with imports, static attributes and interpolations</h1>
      <p>This file includes some custom static attributes which should be reflected fine on the resultant object</p>
      <p>This is a <em>Markdown Component</em> file. Here you can include JSX-style assignment expressions; this component was generated using version { version } of { name }!</p>
      <p>We\'re importing foo, which is {foo}.</p>
      <p>We\'re also adding a react component here: {<Bar {...bugs} style={{ foo: \'bar\' }} />}</p>
      <p>Another cool thing you can do is use JSX <strong>directly</strong> - here’s an SVG element, used inline: { <svg style={{ display: \'inline\', height: \'1em\' }} viewBox=\"0 0 304 290\"><path fill=\"none\" stroke=\"currentColor\" strokeWidth=\"16\" d=\"M2,111 h300 l-242.7,176.3 92.7,-285.3 92.7,285.3 z\" /></svg> }.</p>
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"markdownItPlugins":"somenonsensevalue"}\` for component example 2 renders as expected within React 1`] = `
Array [
  "propTypes",
]
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"markdownItPlugins":"somenonsensevalue"}\` for component example 2 renders as expected within React 2`] = `
<div
  className={undefined}
  style={undefined} />
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"markdownItPlugins":"somenonsensevalue"}\` for component example 2 returns the expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.7.1
import React from \'react\';
import PropTypes from \'prop-types\';

MarkdownComponent.propTypes = {
  className: PropTypes.string,
  style: PropTypes.object
};

function MarkdownComponent(props) {
  const {className, style} = props;

  return (
    <div className={className} style={style}>
      {/* no input given */}
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 0 renders as expected within React 1`] = `
Array [
  "propTypes",
]
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 0 renders as expected within React 2`] = `
<div
  className={undefined}
  style={undefined}>
  <h1
    id="test-document">
    Test Document
  </h1>
  <p />
  <div
    className="my-container-class">
    <ul>
      <li>
        <a
          href="#test-document">
          Test Document
        </a>
        <ul>
          <li>
            <a
              href="#basic-markdown-template">
              Basic Markdown Template
            </a>
          </li>
          <li>
            <a
              href="#heres-a-couple-of-hyperlinks">
              Here\'s a couple of hyperlinks
            </a>
          </li>
          <li>
            <a
              href="#heres-a-code-snippet-with-no-interpolations">
              Here\'s a code snippet with no interpolations
            </a>
          </li>
          <li>
            <a
              href="#heres-a-code-snippet-with-things-which-shouldnt-be-treated-as-interpolations">
              Here\'s a code snippet with things which shouldn\'t be treated as interpolations
            </a>
          </li>
          <li>
            <a
              href="#heres-a-paragraph-with-a-simple-interpolation">
              Here\'s a paragraph with a simple interpolation
            </a>
          </li>
          <li>
            <a
              href="#heres-a-code-snippet-with-a-simple-interpolation">
              Here\'s a code snippet with a simple interpolation
            </a>
          </li>
          <li>
            <a
              href="#heres-an-unhinted-code-snippet">
              Here\'s an unhinted code snippet
            </a>
          </li>
          <li>
            <a
              href="#heres-an-unhinted-snippet-with-no-discernible-language">
              Here\'s an unhinted snippet with no discernible language
            </a>
          </li>
        </ul>
      </li>
    </ul>
  </div>
  <p />
  <h2
    id="basic-markdown-template">
    Basic Markdown Template
  </h2>
  <p>
    This is a basic Markdown template, with no interpolations going on.
  </p>
  <p>
    This should be
  </p>
  <ul>
    <li>
      easy and;
    </li>
    <li>
      predictable!
    </li>
  </ul>
  <h2
    id="heres-a-couple-of-hyperlinks">
    Here\'s a couple of hyperlinks
  </h2>
  <p>
    <a
      href="https://duckduckgo.com">
      https://duckduckgo.com
    </a>
     
    <a
      href="https://github.com">
      GitHub
    </a>
  </p>
  <h2
    id="heres-a-code-snippet-with-no-interpolations">
    Here\'s a code snippet with no interpolations
  </h2>
  <pre>
    <code
      className="language-bash">
      npm install -g yarn
      <br />
    </code>
  </pre>
  <h2
    id="heres-a-code-snippet-with-things-which-shouldnt-be-treated-as-interpolations">
    Here\'s a code snippet with things which shouldn\'t be treated as interpolations
  </h2>
  <pre>
    <code
      className="language-bash">
      <span
        className="hljs-keyword">
        function
      </span>
       
      <span
        className="hljs-function">
        <span
          className="hljs-title">
          rbenv
        </span>
      </span>
      () 
      {
      <br />
        
      RUBY=blah
      <br />
      }
      <br />
    </code>
  </pre>
  <h2
    id="heres-a-paragraph-with-a-simple-interpolation">
    Here\'s a paragraph with a simple interpolation
  </h2>
  <p>
    There are 
    0
     props being supplied to this component.
  </p>
  <h2
    id="heres-a-code-snippet-with-a-simple-interpolation">
    Here\'s a code snippet with a simple interpolation
  </h2>
  <pre>
    <code
      className="language-bash">
      <span
        className="hljs-keyword">
        function
      </span>
       
      <span
        className="hljs-function">
        <span
          className="hljs-title">
          rbenv
        </span>
      </span>
      () 
      {
      <br />
        
      RUBY=
      <br />
      }
      <br />
    </code>
  </pre>
  <h2
    id="heres-an-unhinted-code-snippet">
    Here\'s an unhinted code snippet
  </h2>
  <pre>
    <code>
      <span
        className="hljs-keyword">
        the
      </span>
       quick brown fox jumps over 
      <span
        className="hljs-keyword">
        the
      </span>
       lazy dog
      <br />
    </code>
  </pre>
  <h2
    id="heres-an-unhinted-snippet-with-no-discernible-language">
    Here\'s an unhinted snippet with no discernible language
  </h2>
  <pre>
    <code>
      )
      <span
        className="hljs-comment">
        ()
      </span>
      <span
        className="hljs-comment">
        (()
      </span>
      )
      <br />
    </code>
  </pre>
  <pre>
    <code
      className="language-bash">
      brew tap buildkite/buildkite
      <br />
      brew install --token=
      <span
        className="hljs-string">
        \'
        INSERT-YOUR-AGENT-TOKEN-HERE
        \'
      </span>
       buildkite-agent
      <br />
      <br />
      <span
        className="hljs-function">
        <span
          className="hljs-title">
          function
        </span>
      </span>
      () 
      {
      <br />
        
      ENV=
      <span
        className="hljs-string">
        \"foo_bar\"
      </span>
      <br />
      }
      <br />
    </code>
  </pre>
  <p>
    Let\'s also test interpolation inside other elements. 
    <code>
      foo bar
    </code>
  </p>
</div>
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 0 returns the expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.7.1
import React from \'react\';
import PropTypes from \'prop-types\';

MarkdownComponent.propTypes = {
  className: PropTypes.string,
  style: PropTypes.object
};

function MarkdownComponent(props) {
  const {className, style} = props;

  return (
    <div className={className} style={style}>
      <h1 id=\"test-document\">Test Document</h1>
      <p /><div className=\"my-container-class\"><ul><li><a href=\"#test-document\">Test Document</a><ul><li><a href=\"#basic-markdown-template\">Basic Markdown Template</a></li><li><a href=\"#heres-a-couple-of-hyperlinks\">Here\'s a couple of hyperlinks</a></li><li><a href=\"#heres-a-code-snippet-with-no-interpolations\">Here\'s a code snippet with no interpolations</a></li><li><a href=\"#heres-a-code-snippet-with-things-which-shouldnt-be-treated-as-interpolations\">Here\'s a code snippet with things which shouldn\'t be treated as interpolations</a></li><li><a href=\"#heres-a-paragraph-with-a-simple-interpolation\">Here\'s a paragraph with a simple interpolation</a></li><li><a href=\"#heres-a-code-snippet-with-a-simple-interpolation\">Here\'s a code snippet with a simple interpolation</a></li><li><a href=\"#heres-an-unhinted-code-snippet\">Here\'s an unhinted code snippet</a></li><li><a href=\"#heres-an-unhinted-snippet-with-no-discernible-language\">Here\'s an unhinted snippet with no discernible language</a></li></ul></li></ul></div><p />
      <h2 id=\"basic-markdown-template\">Basic Markdown Template</h2>
      <p>This is a basic Markdown template, with no interpolations going on.</p>
      <p>This should be</p>
      <ul>
        <li>easy and;</li>
        <li>predictable!</li>
      </ul>
      <h2 id=\"heres-a-couple-of-hyperlinks\">Here\'s a couple of hyperlinks</h2>
      <p><a href=\"https://duckduckgo.com\">https://duckduckgo.com</a> <a href=\"https://github.com\">GitHub</a></p>
      <h2 id=\"heres-a-code-snippet-with-no-interpolations\">Here\'s a code snippet with no interpolations</h2>
      <pre><code className=\"language-bash\">npm install -g yarn<br /></code></pre>
      <h2 id=\"heres-a-code-snippet-with-things-which-shouldnt-be-treated-as-interpolations\">Here\'s a code snippet with things which shouldn\'t be treated as interpolations</h2>
      <pre><code className=\"language-bash\"><span className=\"hljs-keyword\">function</span> <span className=\"hljs-function\"><span className=\"hljs-title\">rbenv</span></span>() {\"{\"}<br />{\"  \"}RUBY=blah<br />{\"}\"}<br /></code></pre>
      <h2 id=\"heres-a-paragraph-with-a-simple-interpolation\">Here\'s a paragraph with a simple interpolation</h2>
      <p>There are {Object.keys(props).length} props being supplied to this component.</p>
      <h2 id=\"heres-a-code-snippet-with-a-simple-interpolation\">Here\'s a code snippet with a simple interpolation</h2>
      <pre><code className=\"language-bash\"><span className=\"hljs-keyword\">function</span> <span className=\"hljs-function\"><span className=\"hljs-title\">rbenv</span></span>() {\"{\"}<br />{\"  \"}RUBY={props.rubycontent}<br />{\"}\"}<br /></code></pre>
      <h2 id=\"heres-an-unhinted-code-snippet\">Here\'s an unhinted code snippet</h2>
      <pre><code><span className=\"hljs-keyword\">the</span> quick brown fox jumps over <span className=\"hljs-keyword\">the</span> lazy dog<br /></code></pre>
      <h2 id=\"heres-an-unhinted-snippet-with-no-discernible-language\">Here\'s an unhinted snippet with no discernible language</h2>
      <pre><code>)<span className=\"hljs-comment\">()</span><span className=\"hljs-comment\">(()</span>)<br /></code></pre>
      <pre><code className=\"language-bash\">brew tap buildkite/buildkite<br />brew install --token=<span className=\"hljs-string\">\'{props.token || \'INSERT-YOUR-AGENT-TOKEN-HERE\'}\'</span> buildkite-agent<br /><br /><span className=\"hljs-function\"><span className=\"hljs-title\">function</span></span>() {\"{\"}<br />{\"  \"}ENV=<span className=\"hljs-string\">\"foo_bar\"</span><br />{\"}\"}<br /></code></pre>
      <p>Let\'s also test interpolation inside other elements. <code>{ \"foo bar\" }</code></p>
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 1 renders as expected within React 1`] = `
Array [
  "propTypes",
  "title",
  "myArray",
  "anObject",
]
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 1 renders as expected within React 2`] = `
<div
  className={undefined}
  style={undefined}>
  <h1
    id="markdown-template-with-imports-static-attributes-and-interpolations">
    Markdown template with imports, static attributes and interpolations
  </h1>
  <p>
    This file includes some custom static attributes which should be reflected fine on the resultant object
  </p>
  <p>
    This is a 
    <em>
      Markdown Component
    </em>
     file. Here you can include JSX-style assignment expressions; this component was generated using version 
    0.7.1
     of 
    markdown-component-loader
    !
  </p>
  <p>
    We\'re importing foo, which is 
    bar
    .
  </p>
  <p>
    We\'re also adding a react component here: 
    <bar
      style={
        Object {
          "foo": "bar",
        }
      }
      url="https://github.com/ticky/markdown-component-loader/issues" />
  </p>
  <p>
    Another cool thing you can do is use JSX 
    <strong>
      directly
    </strong>
     - here’s an SVG element, used inline: 
    <svg
      style={
        Object {
          "display": "inline",
          "height": "1em",
        }
      }
      viewBox="0 0 304 290">
      <path
        d="M2,111 h300 l-242.7,176.3 92.7,-285.3 92.7,285.3 z"
        fill="none"
        stroke="currentColor"
        strokeWidth="16" />
    </svg>
    .
  </p>
</div>
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 1 returns the expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.7.1
import React from \'react\';
import PropTypes from \'prop-types\';
import foo from \'foo\';
import Bar from \'foo\';
import { bugs, name, version } from \'../package.json\';

MarkdownComponent.propTypes = {
  className: PropTypes.string,
  style: PropTypes.object
};

MarkdownComponent[\'title\'] = \'a custom title\';

MarkdownComponent[\'myArray\'] = [
  \'foo\',
  \'bar\'
];

MarkdownComponent[\'anObject\'] = {
  \'foo\': \'bar\'
};

function MarkdownComponent(props) {
  const {className, style} = props;

  return (
    <div className={className} style={style}>
      <h1 id=\"markdown-template-with-imports-static-attributes-and-interpolations\">Markdown template with imports, static attributes and interpolations</h1>
      <p>This file includes some custom static attributes which should be reflected fine on the resultant object</p>
      <p>This is a <em>Markdown Component</em> file. Here you can include JSX-style assignment expressions; this component was generated using version { version } of { name }!</p>
      <p>We\'re importing foo, which is {foo}.</p>
      <p>We\'re also adding a react component here: {<Bar {...bugs} style={{ foo: \'bar\' }} />}</p>
      <p>Another cool thing you can do is use JSX <strong>directly</strong> - here’s an SVG element, used inline: { <svg style={{ display: \'inline\', height: \'1em\' }} viewBox=\"0 0 304 290\"><path fill=\"none\" stroke=\"currentColor\" strokeWidth=\"16\" d=\"M2,111 h300 l-242.7,176.3 92.7,-285.3 92.7,285.3 z\" /></svg> }.</p>
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 2 renders as expected within React 1`] = `
Array [
  "propTypes",
]
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 2 renders as expected within React 2`] = `
<div
  className={undefined}
  style={undefined} />
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 2 returns the expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.7.1
import React from \'react\';
import PropTypes from \'prop-types\';

MarkdownComponent.propTypes = {
  className: PropTypes.string,
  style: PropTypes.object
};

function MarkdownComponent(props) {
  const {className, style} = props;

  return (
    <div className={className} style={style}>
      {/* no input given */}
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"markdownItPlugins":[null]}\` for component example 0 renders as expected within React 1`] = `
Array [
  "propTypes",
]
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"markdownItPlugins":[null]}\` for component example 0 renders as expected within React 2`] = `
<div
  className={undefined}
  style={undefined}>
  <h1
    id="test-document">
    Test Document
  </h1>
  <p>
    [[toc]]
  </p>
  <h2
    id="basic-markdown-template">
    Basic Markdown Template
  </h2>
  <p>
    This is a basic Markdown template, with no interpolations going on.
  </p>
  <p>
    This should be
  </p>
  <ul>
    <li>
      easy and;
    </li>
    <li>
      predictable!
    </li>
  </ul>
  <h2
    id="heres-a-couple-of-hyperlinks">
    Here\'s a couple of hyperlinks
  </h2>
  <p>
    <a
      href="https://duckduckgo.com">
      https://duckduckgo.com
    </a>
     
    <a
      href="https://github.com">
      GitHub
    </a>
  </p>
  <h2
    id="heres-a-code-snippet-with-no-interpolations">
    Here\'s a code snippet with no interpolations
  </h2>
  <pre>
    <code
      className="language-bash">
      npm install -g yarn
      <br />
    </code>
  </pre>
  <h2
    id="heres-a-code-snippet-with-things-which-shouldnt-be-treated-as-interpolations">
    Here\'s a code snippet with things which shouldn\'t be treated as interpolations
  </h2>
  <pre>
    <code
      className="language-bash">
      <span
        className="hljs-keyword">
        function
      </span>
       
      <span
        className="hljs-function">
        <span
          className="hljs-title">
          rbenv
        </span>
      </span>
      () 
      {
      <br />
        
      RUBY=blah
      <br />
      }
      <br />
    </code>
  </pre>
  <h2
    id="heres-a-paragraph-with-a-simple-interpolation">
    Here\'s a paragraph with a simple interpolation
  </h2>
  <p>
    There are 
    0
     props being supplied to this component.
  </p>
  <h2
    id="heres-a-code-snippet-with-a-simple-interpolation">
    Here\'s a code snippet with a simple interpolation
  </h2>
  <pre>
    <code
      className="language-bash">
      <span
        className="hljs-keyword">
        function
      </span>
       
      <span
        className="hljs-function">
        <span
          className="hljs-title">
          rbenv
        </span>
      </span>
      () 
      {
      <br />
        
      RUBY=
      <br />
      }
      <br />
    </code>
  </pre>
  <h2
    id="heres-an-unhinted-code-snippet">
    Here\'s an unhinted code snippet
  </h2>
  <pre>
    <code>
      <span
        className="hljs-keyword">
        the
      </span>
       quick brown fox jumps over 
      <span
        className="hljs-keyword">
        the
      </span>
       lazy dog
      <br />
    </code>
  </pre>
  <h2
    id="heres-an-unhinted-snippet-with-no-discernible-language">
    Here\'s an unhinted snippet with no discernible language
  </h2>
  <pre>
    <code>
      )
      <span
        className="hljs-comment">
        ()
      </span>
      <span
        className="hljs-comment">
        (()
      </span>
      )
      <br />
    </code>
  </pre>
  <pre>
    <code
      className="language-bash">
      brew tap buildkite/buildkite
      <br />
      brew install --token=
      <span
        className="hljs-string">
        \'
        INSERT-YOUR-AGENT-TOKEN-HERE
        \'
      </span>
       buildkite-agent
      <br />
      <br />
      <span
        className="hljs-function">
        <span
          className="hljs-title">
          function
        </span>
      </span>
      () 
      {
      <br />
        
      ENV=
      <span
        className="hljs-string">
        \"foo_bar\"
      </span>
      <br />
      }
      <br />
    </code>
  </pre>
  <p>
    Let\'s also test interpolation inside other elements. 
    <code>
      foo bar
    </code>
  </p>
</div>
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"markdownItPlugins":[null]}\` for component example 0 returns the expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.7.1
import React from \'react\';
import PropTypes from \'prop-types\';

MarkdownComponent.propTypes = {
  className: PropTypes.string,
  style: PropTypes.object
};

function MarkdownComponent(props) {
  const {className, style} = props;

  return (
    <div className={className} style={style}>
      <h1 id=\"test-document\">Test Document</h1>
      <p>[[toc]]</p>
      <h2 id=\"basic-markdown-template\">Basic Markdown Template</h2>
      <p>This is a basic Markdown template, with no interpolations going on.</p>
      <p>This should be</p>
      <ul>
        <li>easy and;</li>
        <li>predictable!</li>
      </ul>
      <h2 id=\"heres-a-couple-of-hyperlinks\">Here\'s a couple of hyperlinks</h2>
      <p><a href=\"https://duckduckgo.com\">https://duckduckgo.com</a> <a href=\"https://github.com\">GitHub</a></p>
      <h2 id=\"heres-a-code-snippet-with-no-interpolations\">Here\'s a code snippet with no interpolations</h2>
      <pre><code className=\"language-bash\">npm install -g yarn<br /></code></pre>
      <h2 id=\"heres-a-code-snippet-with-things-which-shouldnt-be-treated-as-interpolations\">Here\'s a code snippet with things which shouldn\'t be treated as interpolations</h2>
      <pre><code className=\"language-bash\"><span className=\"hljs-keyword\">function</span> <span className=\"hljs-function\"><span className=\"hljs-title\">rbenv</span></span>() {\"{\"}<br />{\"  \"}RUBY=blah<br />{\"}\"}<br /></code></pre>
      <h2 id=\"heres-a-paragraph-with-a-simple-interpolation\">Here\'s a paragraph with a simple interpolation</h2>
      <p>There are {Object.keys(props).length} props being supplied to this component.</p>
      <h2 id=\"heres-a-code-snippet-with-a-simple-interpolation\">Here\'s a code snippet with a simple interpolation</h2>
      <pre><code className=\"language-bash\"><span className=\"hljs-keyword\">function</span> <span className=\"hljs-function\"><span className=\"hljs-title\">rbenv</span></span>() {\"{\"}<br />{\"  \"}RUBY={props.rubycontent}<br />{\"}\"}<br /></code></pre>
      <h2 id=\"heres-an-unhinted-code-snippet\">Here\'s an unhinted code snippet</h2>
      <pre><code><span className=\"hljs-keyword\">the</span> quick brown fox jumps over <span className=\"hljs-keyword\">the</span> lazy dog<br /></code></pre>
      <h2 id=\"heres-an-unhinted-snippet-with-no-discernible-language\">Here\'s an unhinted snippet with no discernible language</h2>
      <pre><code>)<span className=\"hljs-comment\">()</span><span className=\"hljs-comment\">(()</span>)<br /></code></pre>
      <pre><code className=\"language-bash\">brew tap buildkite/buildkite<br />brew install --token=<span className=\"hljs-string\">\'{props.token || \'INSERT-YOUR-AGENT-TOKEN-HERE\'}\'</span> buildkite-agent<br /><br /><span className=\"hljs-function\"><span className=\"hljs-title\">function</span></span>() {\"{\"}<br />{\"  \"}ENV=<span className=\"hljs-string\">\"foo_bar\"</span><br />{\"}\"}<br /></code></pre>
      <p>Let\'s also test interpolation inside other elements. <code>{ \"foo bar\" }</code></p>
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"markdownItPlugins":[null]}\` for component example 1 renders as expected within React 1`] = `
Array [
  "propTypes",
  "title",
  "myArray",
  "anObject",
]
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"markdownItPlugins":[null]}\` for component example 1 renders as expected within React 2`] = `
<div
  className={undefined}
  style={undefined}>
  <h1
    id="markdown-template-with-imports-static-attributes-and-interpolations">
    Markdown template with imports, static attributes and interpolations
  </h1>
  <p>
    This file includes some custom static attributes which should be reflected fine on the resultant object
  </p>
  <p>
    This is a 
    <em>
      Markdown Component
    </em>
     file. Here you can include JSX-style assignment expressions; this component was generated using version 
    0.7.1
     of 
    markdown-component-loader
    !
  </p>
  <p>
    We\'re importing foo, which is 
    bar
    .
  </p>
  <p>
    We\'re also adding a react component here: 
    <bar
      style={
        Object {
          "foo": "bar",
        }
      }
      url="https://github.com/ticky/markdown-component-loader/issues" />
  </p>
  <p>
    Another cool thing you can do is use JSX 
    <strong>
      directly
    </strong>
     - here’s an SVG element, used inline: 
    <svg
      style={
        Object {
          "display": "inline",
          "height": "1em",
        }
      }
      viewBox="0 0 304 290">
      <path
        d="M2,111 h300 l-242.7,176.3 92.7,-285.3 92.7,285.3 z"
        fill="none"
        stroke="currentColor"
        strokeWidth="16" />
    </svg>
    .
  </p>
</div>
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"markdownItPlugins":[null]}\` for component example 1 returns the expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.7.1
import React from \'react\';
import PropTypes from \'prop-types\';
import foo from \'foo\';
import Bar from \'foo\';
import { bugs, name, version } from \'../package.json\';

MarkdownComponent.propTypes = {
  className: PropTypes.string,
  style: PropTypes.object
};

MarkdownComponent[\'title\'] = \'a custom title\';

MarkdownComponent[\'myArray\'] = [
  \'foo\',
  \'bar\'
];

MarkdownComponent[\'anObject\'] = {
  \'foo\': \'bar\'
};

function MarkdownComponent(props) {
  const {className, style} = props;

  return (
    <div className={className} style={style}>
      <h1 id=\"markdown-template-with-imports-static-attributes-and-interpolations\">Markdown template with imports, static attributes and interpolations</h1>
      <p>This file includes some custom static attributes which should be reflected fine on the resultant object</p>
      <p>This is a <em>Markdown Component</em> file. Here you can include JSX-style assignment expressions; this component was generated using version { version } of { name }!</p>
      <p>We\'re importing foo, which is {foo}.</p>
      <p>We\'re also adding a react component here: {<Bar {...bugs} style={{ foo: \'bar\' }} />}</p>
      <p>Another cool thing you can do is use JSX <strong>directly</strong> - here’s an SVG element, used inline: { <svg style={{ display: \'inline\', height: \'1em\' }} viewBox=\"0 0 304 290\"><path fill=\"none\" stroke=\"currentColor\" strokeWidth=\"16\" d=\"M2,111 h300 l-242.7,176.3 92.7,-285.3 92.7,285.3 z\" /></svg> }.</p>
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"markdownItPlugins":[null]}\` for component example 2 renders as expected within React 1`] = `
Array [
  "propTypes",
]
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"markdownItPlugins":[null]}\` for component example 2 renders as expected within React 2`] = `
<div
  className={undefined}
  style={undefined} />
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"markdownItPlugins":[null]}\` for component example 2 returns the expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.7.1
import React from \'react\';
import PropTypes from \'prop-types\';

MarkdownComponent.propTypes = {
  className: PropTypes.string,
  style: PropTypes.object
};

function MarkdownComponent(props) {
  const {className, style} = props;

  return (
    <div className={className} style={style}>
      {/* no input given */}
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"passElementProps":false,"markdownItPlugins":"somenonsensevalue"}\` for component example 0 renders as expected within React 1`] = `
Array [
  "propTypes",
]
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"passElementProps":false,"markdownItPlugins":"somenonsensevalue"}\` for component example 0 renders as expected within React 2`] = `
<div
  className={undefined}
  style={undefined}>
  <h1>
    Test Document
  </h1>
  <p>
    [[toc]]
  </p>
  <h2>
    Basic Markdown Template
  </h2>
  <p>
    This is a basic Markdown template, with no interpolations going on.
  </p>
  <p>
    This should be
  </p>
  <ul>
    <li>
      easy and;
    </li>
    <li>
      predictable!
    </li>
  </ul>
  <h2>
    Here\'s a couple of hyperlinks
  </h2>
  <p>
    <a
      href="https://duckduckgo.com">
      https://duckduckgo.com
    </a>
     
    <a
      href="https://github.com">
      GitHub
    </a>
  </p>
  <h2>
    Here\'s a code snippet with no interpolations
  </h2>
  <pre>
    <code
      className="language-bash">
      npm install -g yarn
      <br />
    </code>
  </pre>
  <h2>
    Here\'s a code snippet with things which shouldn\'t be treated as interpolations
  </h2>
  <pre>
    <code
      className="language-bash">
      <span
        className="hljs-keyword">
        function
      </span>
       
      <span
        className="hljs-function">
        <span
          className="hljs-title">
          rbenv
        </span>
      </span>
      () 
      {
      <br />
        
      RUBY=blah
      <br />
      }
      <br />
    </code>
  </pre>
  <h2>
    Here\'s a paragraph with a simple interpolation
  </h2>
  <p>
    There are 
    0
     props being supplied to this component.
  </p>
  <h2>
    Here\'s a code snippet with a simple interpolation
  </h2>
  <pre>
    <code
      className="language-bash">
      <span
        className="hljs-keyword">
        function
      </span>
       
      <span
        className="hljs-function">
        <span
          className="hljs-title">
          rbenv
        </span>
      </span>
      () 
      {
      <br />
        
      RUBY=
      <br />
      }
      <br />
    </code>
  </pre>
  <h2>
    Here\'s an unhinted code snippet
  </h2>
  <pre>
    <code>
      <span
        className="hljs-keyword">
        the
      </span>
       quick brown fox jumps over 
      <span
        className="hljs-keyword">
        the
      </span>
       lazy dog
      <br />
    </code>
  </pre>
  <h2>
    Here\'s an unhinted snippet with no discernible language
  </h2>
  <pre>
    <code>
      )
      <span
        className="hljs-comment">
        ()
      </span>
      <span
        className="hljs-comment">
        (()
      </span>
      )
      <br />
    </code>
  </pre>
  <pre>
    <code
      className="language-bash">
      brew tap buildkite/buildkite
      <br />
      brew install --token=
      <span
        className="hljs-string">
        \'
        INSERT-YOUR-AGENT-TOKEN-HERE
        \'
      </span>
       buildkite-agent
      <br />
      <br />
      <span
        className="hljs-function">
        <span
          className="hljs-title">
          function
        </span>
      </span>
      () 
      {
      <br />
        
      ENV=
      <span
        className="hljs-string">
        \"foo_bar\"
      </span>
      <br />
      }
      <br />
    </code>
  </pre>
  <p>
    Let\'s also test interpolation inside other elements. 
    <code>
      foo bar
    </code>
  </p>
</div>
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"passElementProps":false,"markdownItPlugins":"somenonsensevalue"}\` for component example 0 returns the expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.7.1
import React from \'react\';
import PropTypes from \'prop-types\';

MarkdownComponent.propTypes = {
  className: PropTypes.string,
  style: PropTypes.object
};

function MarkdownComponent(props) {
  const {className, style} = props;

  return (
    <div className={className} style={style}>
      <h1>Test Document</h1>
      <p>[[toc]]</p>
      <h2>Basic Markdown Template</h2>
      <p>This is a basic Markdown template, with no interpolations going on.</p>
      <p>This should be</p>
      <ul>
        <li>easy and;</li>
        <li>predictable!</li>
      </ul>
      <h2>Here\'s a couple of hyperlinks</h2>
      <p><a href=\"https://duckduckgo.com\">https://duckduckgo.com</a> <a href=\"https://github.com\">GitHub</a></p>
      <h2>Here\'s a code snippet with no interpolations</h2>
      <pre><code className=\"language-bash\">npm install -g yarn<br /></code></pre>
      <h2>Here\'s a code snippet with things which shouldn\'t be treated as interpolations</h2>
      <pre><code className=\"language-bash\"><span className=\"hljs-keyword\">function</span> <span className=\"hljs-function\"><span className=\"hljs-title\">rbenv</span></span>() {\"{\"}<br />{\"  \"}RUBY=blah<br />{\"}\"}<br /></code></pre>
      <h2>Here\'s a paragraph with a simple interpolation</h2>
      <p>There are {Object.keys(props).length} props being supplied to this component.</p>
      <h2>Here\'s a code snippet with a simple interpolation</h2>
      <pre><code className=\"language-bash\"><span className=\"hljs-keyword\">function</span> <span className=\"hljs-function\"><span className=\"hljs-title\">rbenv</span></span>() {\"{\"}<br />{\"  \"}RUBY={props.rubycontent}<br />{\"}\"}<br /></code></pre>
      <h2>Here\'s an unhinted code snippet</h2>
      <pre><code><span className=\"hljs-keyword\">the</span> quick brown fox jumps over <span className=\"hljs-keyword\">the</span> lazy dog<br /></code></pre>
      <h2>Here\'s an unhinted snippet with no discernible language</h2>
      <pre><code>)<span className=\"hljs-comment\">()</span><span className=\"hljs-comment\">(()</span>)<br /></code></pre>
      <pre><code className=\"language-bash\">brew tap buildkite/buildkite<br />brew install --token=<span className=\"hljs-string\">\'{props.token || \'INSERT-YOUR-AGENT-TOKEN-HERE\'}\'</span> buildkite-agent<br /><br /><span className=\"hljs-function\"><span className=\"hljs-title\">function</span></span>() {\"{\"}<br />{\"  \"}ENV=<span className=\"hljs-string\">\"foo_bar\"</span><br />{\"}\"}<br /></code></pre>
      <p>Let\'s also test interpolation inside other elements. <code>{ \"foo bar\" }</code></p>
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"passElementProps":false,"markdownItPlugins":"somenonsensevalue"}\` for component example 1 renders as expected within React 1`] = `
Array [
  "propTypes",
  "title",
  "myArray",
  "anObject",
]
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"passElementProps":false,"markdownItPlugins":"somenonsensevalue"}\` for component example 1 renders as expected within React 2`] = `
<div
  className={undefined}
  style={undefined}>
  <h1>
    Markdown template with imports, static attributes and interpolations
  </h1>
  <p>
    This file includes some custom static attributes which should be reflected fine on the resultant object
  </p>
  <p>
    This is a 
    <em>
      Markdown Component
    </em>
     file. Here you can include JSX-style assignment expressions; this component was generated using version 
    0.7.1
     of 
    markdown-component-loader
    !
  </p>
  <p>
    We\'re importing foo, which is 
    bar
    .
  </p>
  <p>
    We\'re also adding a react component here: 
    <bar
      style={
        Object {
          "foo": "bar",
        }
      }
      url="https://github.com/ticky/markdown-component-loader/issues" />
  </p>
  <p>
    Another cool thing you can do is use JSX 
    <strong>
      directly
    </strong>
     - here’s an SVG element, used inline: 
    <svg
      style={
        Object {
          "display": "inline",
          "height": "1em",
        }
      }
      viewBox="0 0 304 290">
      <path
        d="M2,111 h300 l-242.7,176.3 92.7,-285.3 92.7,285.3 z"
        fill="none"
        stroke="currentColor"
        strokeWidth="16" />
    </svg>
    .
  </p>
</div>
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"passElementProps":false,"markdownItPlugins":"somenonsensevalue"}\` for component example 1 returns the expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.7.1
import React from \'react\';
import PropTypes from \'prop-types\';
import foo from \'foo\';
import Bar from \'foo\';
import { bugs, name, version } from \'../package.json\';

MarkdownComponent.propTypes = {
  className: PropTypes.string,
  style: PropTypes.object
};

MarkdownComponent[\'title\'] = \'a custom title\';

MarkdownComponent[\'myArray\'] = [
  \'foo\',
  \'bar\'
];

MarkdownComponent[\'anObject\'] = {
  \'foo\': \'bar\'
};

function MarkdownComponent(props) {
  const {className, style} = props;

  return (
    <div className={className} style={style}>
      <h1>Markdown template with imports, static attributes and interpolations</h1>
      <p>This file includes some custom static attributes which should be reflected fine on the resultant object</p>
      <p>This is a <em>Markdown Component</em> file. Here you can include JSX-style assignment expressions; this component was generated using version { version } of { name }!</p>
      <p>We\'re importing foo, which is {foo}.</p>
      <p>We\'re also adding a react component here: {<Bar {...bugs} style={{ foo: \'bar\' }} />}</p>
      <p>Another cool thing you can do is use JSX <strong>directly</strong> - here’s an SVG element, used inline: { <svg style={{ display: \'inline\', height: \'1em\' }} viewBox=\"0 0 304 290\"><path fill=\"none\" stroke=\"currentColor\" strokeWidth=\"16\" d=\"M2,111 h300 l-242.7,176.3 92.7,-285.3 92.7,285.3 z\" /></svg> }.</p>
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"passElementProps":false,"markdownItPlugins":"somenonsensevalue"}\` for component example 2 renders as expected within React 1`] = `
Array [
  "propTypes",
]
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"passElementProps":false,"markdownItPlugins":"somenonsensevalue"}\` for component example 2 renders as expected within React 2`] = `
<div
  className={undefined}
  style={undefined} />
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"passElementProps":false,"markdownItPlugins":"somenonsensevalue"}\` for component example 2 returns the expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.7.1
import React from \'react\';
import PropTypes from \'prop-types\';

MarkdownComponent.propTypes = {
  className: PropTypes.string,
  style: PropTypes.object
};

function MarkdownComponent(props) {
  const {className, style} = props;

  return (
    <div className={className} style={style}>
      {/* no input given */}
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"passElementProps":false,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 0 renders as expected within React 1`] = `
Array [
  "propTypes",
]
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"passElementProps":false,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 0 renders as expected within React 2`] = `
<div
  className={undefined}
  style={undefined}>
  <h1
    id="test-document">
    Test Document
  </h1>
  <p />
  <div
    className="my-container-class">
    <ul>
      <li>
        <a
          href="#test-document">
          Test Document
        </a>
        <ul>
          <li>
            <a
              href="#basic-markdown-template">
              Basic Markdown Template
            </a>
          </li>
          <li>
            <a
              href="#heres-a-couple-of-hyperlinks">
              Here\'s a couple of hyperlinks
            </a>
          </li>
          <li>
            <a
              href="#heres-a-code-snippet-with-no-interpolations">
              Here\'s a code snippet with no interpolations
            </a>
          </li>
          <li>
            <a
              href="#heres-a-code-snippet-with-things-which-shouldnt-be-treated-as-interpolations">
              Here\'s a code snippet with things which shouldn\'t be treated as interpolations
            </a>
          </li>
          <li>
            <a
              href="#heres-a-paragraph-with-a-simple-interpolation">
              Here\'s a paragraph with a simple interpolation
            </a>
          </li>
          <li>
            <a
              href="#heres-a-code-snippet-with-a-simple-interpolation">
              Here\'s a code snippet with a simple interpolation
            </a>
          </li>
          <li>
            <a
              href="#heres-an-unhinted-code-snippet">
              Here\'s an unhinted code snippet
            </a>
          </li>
          <li>
            <a
              href="#heres-an-unhinted-snippet-with-no-discernible-language">
              Here\'s an unhinted snippet with no discernible language
            </a>
          </li>
        </ul>
      </li>
    </ul>
  </div>
  <p />
  <h2
    id="basic-markdown-template">
    Basic Markdown Template
  </h2>
  <p>
    This is a basic Markdown template, with no interpolations going on.
  </p>
  <p>
    This should be
  </p>
  <ul>
    <li>
      easy and;
    </li>
    <li>
      predictable!
    </li>
  </ul>
  <h2
    id="heres-a-couple-of-hyperlinks">
    Here\'s a couple of hyperlinks
  </h2>
  <p>
    <a
      href="https://duckduckgo.com">
      https://duckduckgo.com
    </a>
     
    <a
      href="https://github.com">
      GitHub
    </a>
  </p>
  <h2
    id="heres-a-code-snippet-with-no-interpolations">
    Here\'s a code snippet with no interpolations
  </h2>
  <pre>
    <code
      className="language-bash">
      npm install -g yarn
      <br />
    </code>
  </pre>
  <h2
    id="heres-a-code-snippet-with-things-which-shouldnt-be-treated-as-interpolations">
    Here\'s a code snippet with things which shouldn\'t be treated as interpolations
  </h2>
  <pre>
    <code
      className="language-bash">
      <span
        className="hljs-keyword">
        function
      </span>
       
      <span
        className="hljs-function">
        <span
          className="hljs-title">
          rbenv
        </span>
      </span>
      () 
      {
      <br />
        
      RUBY=blah
      <br />
      }
      <br />
    </code>
  </pre>
  <h2
    id="heres-a-paragraph-with-a-simple-interpolation">
    Here\'s a paragraph with a simple interpolation
  </h2>
  <p>
    There are 
    0
     props being supplied to this component.
  </p>
  <h2
    id="heres-a-code-snippet-with-a-simple-interpolation">
    Here\'s a code snippet with a simple interpolation
  </h2>
  <pre>
    <code
      className="language-bash">
      <span
        className="hljs-keyword">
        function
      </span>
       
      <span
        className="hljs-function">
        <span
          className="hljs-title">
          rbenv
        </span>
      </span>
      () 
      {
      <br />
        
      RUBY=
      <br />
      }
      <br />
    </code>
  </pre>
  <h2
    id="heres-an-unhinted-code-snippet">
    Here\'s an unhinted code snippet
  </h2>
  <pre>
    <code>
      <span
        className="hljs-keyword">
        the
      </span>
       quick brown fox jumps over 
      <span
        className="hljs-keyword">
        the
      </span>
       lazy dog
      <br />
    </code>
  </pre>
  <h2
    id="heres-an-unhinted-snippet-with-no-discernible-language">
    Here\'s an unhinted snippet with no discernible language
  </h2>
  <pre>
    <code>
      )
      <span
        className="hljs-comment">
        ()
      </span>
      <span
        className="hljs-comment">
        (()
      </span>
      )
      <br />
    </code>
  </pre>
  <pre>
    <code
      className="language-bash">
      brew tap buildkite/buildkite
      <br />
      brew install --token=
      <span
        className="hljs-string">
        \'
        INSERT-YOUR-AGENT-TOKEN-HERE
        \'
      </span>
       buildkite-agent
      <br />
      <br />
      <span
        className="hljs-function">
        <span
          className="hljs-title">
          function
        </span>
      </span>
      () 
      {
      <br />
        
      ENV=
      <span
        className="hljs-string">
        \"foo_bar\"
      </span>
      <br />
      }
      <br />
    </code>
  </pre>
  <p>
    Let\'s also test interpolation inside other elements. 
    <code>
      foo bar
    </code>
  </p>
</div>
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"passElementProps":false,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 0 returns the expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.7.1
import React from \'react\';
import PropTypes from \'prop-types\';

MarkdownComponent.propTypes = {
  className: PropTypes.string,
  style: PropTypes.object
};

function MarkdownComponent(props) {
  const {className, style} = props;

  return (
    <div className={className} style={style}>
      <h1 id=\"test-document\">Test Document</h1>
      <p /><div className=\"my-container-class\"><ul><li><a href=\"#test-document\">Test Document</a><ul><li><a href=\"#basic-markdown-template\">Basic Markdown Template</a></li><li><a href=\"#heres-a-couple-of-hyperlinks\">Here\'s a couple of hyperlinks</a></li><li><a href=\"#heres-a-code-snippet-with-no-interpolations\">Here\'s a code snippet with no interpolations</a></li><li><a href=\"#heres-a-code-snippet-with-things-which-shouldnt-be-treated-as-interpolations\">Here\'s a code snippet with things which shouldn\'t be treated as interpolations</a></li><li><a href=\"#heres-a-paragraph-with-a-simple-interpolation\">Here\'s a paragraph with a simple interpolation</a></li><li><a href=\"#heres-a-code-snippet-with-a-simple-interpolation\">Here\'s a code snippet with a simple interpolation</a></li><li><a href=\"#heres-an-unhinted-code-snippet\">Here\'s an unhinted code snippet</a></li><li><a href=\"#heres-an-unhinted-snippet-with-no-discernible-language\">Here\'s an unhinted snippet with no discernible language</a></li></ul></li></ul></div><p />
      <h2 id=\"basic-markdown-template\">Basic Markdown Template</h2>
      <p>This is a basic Markdown template, with no interpolations going on.</p>
      <p>This should be</p>
      <ul>
        <li>easy and;</li>
        <li>predictable!</li>
      </ul>
      <h2 id=\"heres-a-couple-of-hyperlinks\">Here\'s a couple of hyperlinks</h2>
      <p><a href=\"https://duckduckgo.com\">https://duckduckgo.com</a> <a href=\"https://github.com\">GitHub</a></p>
      <h2 id=\"heres-a-code-snippet-with-no-interpolations\">Here\'s a code snippet with no interpolations</h2>
      <pre><code className=\"language-bash\">npm install -g yarn<br /></code></pre>
      <h2 id=\"heres-a-code-snippet-with-things-which-shouldnt-be-treated-as-interpolations\">Here\'s a code snippet with things which shouldn\'t be treated as interpolations</h2>
      <pre><code className=\"language-bash\"><span className=\"hljs-keyword\">function</span> <span className=\"hljs-function\"><span className=\"hljs-title\">rbenv</span></span>() {\"{\"}<br />{\"  \"}RUBY=blah<br />{\"}\"}<br /></code></pre>
      <h2 id=\"heres-a-paragraph-with-a-simple-interpolation\">Here\'s a paragraph with a simple interpolation</h2>
      <p>There are {Object.keys(props).length} props being supplied to this component.</p>
      <h2 id=\"heres-a-code-snippet-with-a-simple-interpolation\">Here\'s a code snippet with a simple interpolation</h2>
      <pre><code className=\"language-bash\"><span className=\"hljs-keyword\">function</span> <span className=\"hljs-function\"><span className=\"hljs-title\">rbenv</span></span>() {\"{\"}<br />{\"  \"}RUBY={props.rubycontent}<br />{\"}\"}<br /></code></pre>
      <h2 id=\"heres-an-unhinted-code-snippet\">Here\'s an unhinted code snippet</h2>
      <pre><code><span className=\"hljs-keyword\">the</span> quick brown fox jumps over <span className=\"hljs-keyword\">the</span> lazy dog<br /></code></pre>
      <h2 id=\"heres-an-unhinted-snippet-with-no-discernible-language\">Here\'s an unhinted snippet with no discernible language</h2>
      <pre><code>)<span className=\"hljs-comment\">()</span><span className=\"hljs-comment\">(()</span>)<br /></code></pre>
      <pre><code className=\"language-bash\">brew tap buildkite/buildkite<br />brew install --token=<span className=\"hljs-string\">\'{props.token || \'INSERT-YOUR-AGENT-TOKEN-HERE\'}\'</span> buildkite-agent<br /><br /><span className=\"hljs-function\"><span className=\"hljs-title\">function</span></span>() {\"{\"}<br />{\"  \"}ENV=<span className=\"hljs-string\">\"foo_bar\"</span><br />{\"}\"}<br /></code></pre>
      <p>Let\'s also test interpolation inside other elements. <code>{ \"foo bar\" }</code></p>
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"passElementProps":false,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 1 renders as expected within React 1`] = `
Array [
  "propTypes",
  "title",
  "myArray",
  "anObject",
]
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"passElementProps":false,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 1 renders as expected within React 2`] = `
<div
  className={undefined}
  style={undefined}>
  <h1
    id="markdown-template-with-imports-static-attributes-and-interpolations">
    Markdown template with imports, static attributes and interpolations
  </h1>
  <p>
    This file includes some custom static attributes which should be reflected fine on the resultant object
  </p>
  <p>
    This is a 
    <em>
      Markdown Component
    </em>
     file. Here you can include JSX-style assignment expressions; this component was generated using version 
    0.7.1
     of 
    markdown-component-loader
    !
  </p>
  <p>
    We\'re importing foo, which is 
    bar
    .
  </p>
  <p>
    We\'re also adding a react component here: 
    <bar
      style={
        Object {
          "foo": "bar",
        }
      }
      url="https://github.com/ticky/markdown-component-loader/issues" />
  </p>
  <p>
    Another cool thing you can do is use JSX 
    <strong>
      directly
    </strong>
     - here’s an SVG element, used inline: 
    <svg
      style={
        Object {
          "display": "inline",
          "height": "1em",
        }
      }
      viewBox="0 0 304 290">
      <path
        d="M2,111 h300 l-242.7,176.3 92.7,-285.3 92.7,285.3 z"
        fill="none"
        stroke="currentColor"
        strokeWidth="16" />
    </svg>
    .
  </p>
</div>
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"passElementProps":false,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 1 returns the expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.7.1
import React from \'react\';
import PropTypes from \'prop-types\';
import foo from \'foo\';
import Bar from \'foo\';
import { bugs, name, version } from \'../package.json\';

MarkdownComponent.propTypes = {
  className: PropTypes.string,
  style: PropTypes.object
};

MarkdownComponent[\'title\'] = \'a custom title\';

MarkdownComponent[\'myArray\'] = [
  \'foo\',
  \'bar\'
];

MarkdownComponent[\'anObject\'] = {
  \'foo\': \'bar\'
};

function MarkdownComponent(props) {
  const {className, style} = props;

  return (
    <div className={className} style={style}>
      <h1 id=\"markdown-template-with-imports-static-attributes-and-interpolations\">Markdown template with imports, static attributes and interpolations</h1>
      <p>This file includes some custom static attributes which should be reflected fine on the resultant object</p>
      <p>This is a <em>Markdown Component</em> file. Here you can include JSX-style assignment expressions; this component was generated using version { version } of { name }!</p>
      <p>We\'re importing foo, which is {foo}.</p>
      <p>We\'re also adding a react component here: {<Bar {...bugs} style={{ foo: \'bar\' }} />}</p>
      <p>Another cool thing you can do is use JSX <strong>directly</strong> - here’s an SVG element, used inline: { <svg style={{ display: \'inline\', height: \'1em\' }} viewBox=\"0 0 304 290\"><path fill=\"none\" stroke=\"currentColor\" strokeWidth=\"16\" d=\"M2,111 h300 l-242.7,176.3 92.7,-285.3 92.7,285.3 z\" /></svg> }.</p>
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"passElementProps":false,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 2 renders as expected within React 1`] = `
Array [
  "propTypes",
]
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"passElementProps":false,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 2 renders as expected within React 2`] = `
<div
  className={undefined}
  style={undefined} />
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"passElementProps":false,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 2 returns the expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.7.1
import React from \'react\';
import PropTypes from \'prop-types\';

MarkdownComponent.propTypes = {
  className: PropTypes.string,
  style: PropTypes.object
};

function MarkdownComponent(props) {
  const {className, style} = props;

  return (
    <div className={className} style={style}>
      {/* no input given */}
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"passElementProps":false,"markdownItPlugins":[null]}\` for component example 0 renders as expected within React 1`] = `
Array [
  "propTypes",
]
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"passElementProps":false,"markdownItPlugins":[null]}\` for component example 0 renders as expected within React 2`] = `
<div
  className={undefined}
  style={undefined}>
  <h1
    id="test-document">
    Test Document
  </h1>
  <p>
    [[toc]]
  </p>
  <h2
    id="basic-markdown-template">
    Basic Markdown Template
  </h2>
  <p>
    This is a basic Markdown template, with no interpolations going on.
  </p>
  <p>
    This should be
  </p>
  <ul>
    <li>
      easy and;
    </li>
    <li>
      predictable!
    </li>
  </ul>
  <h2
    id="heres-a-couple-of-hyperlinks">
    Here\'s a couple of hyperlinks
  </h2>
  <p>
    <a
      href="https://duckduckgo.com">
      https://duckduckgo.com
    </a>
     
    <a
      href="https://github.com">
      GitHub
    </a>
  </p>
  <h2
    id="heres-a-code-snippet-with-no-interpolations">
    Here\'s a code snippet with no interpolations
  </h2>
  <pre>
    <code
      className="language-bash">
      npm install -g yarn
      <br />
    </code>
  </pre>
  <h2
    id="heres-a-code-snippet-with-things-which-shouldnt-be-treated-as-interpolations">
    Here\'s a code snippet with things which shouldn\'t be treated as interpolations
  </h2>
  <pre>
    <code
      className="language-bash">
      <span
        className="hljs-keyword">
        function
      </span>
       
      <span
        className="hljs-function">
        <span
          className="hljs-title">
          rbenv
        </span>
      </span>
      () 
      {
      <br />
        
      RUBY=blah
      <br />
      }
      <br />
    </code>
  </pre>
  <h2
    id="heres-a-paragraph-with-a-simple-interpolation">
    Here\'s a paragraph with a simple interpolation
  </h2>
  <p>
    There are 
    0
     props being supplied to this component.
  </p>
  <h2
    id="heres-a-code-snippet-with-a-simple-interpolation">
    Here\'s a code snippet with a simple interpolation
  </h2>
  <pre>
    <code
      className="language-bash">
      <span
        className="hljs-keyword">
        function
      </span>
       
      <span
        className="hljs-function">
        <span
          className="hljs-title">
          rbenv
        </span>
      </span>
      () 
      {
      <br />
        
      RUBY=
      <br />
      }
      <br />
    </code>
  </pre>
  <h2
    id="heres-an-unhinted-code-snippet">
    Here\'s an unhinted code snippet
  </h2>
  <pre>
    <code>
      <span
        className="hljs-keyword">
        the
      </span>
       quick brown fox jumps over 
      <span
        className="hljs-keyword">
        the
      </span>
       lazy dog
      <br />
    </code>
  </pre>
  <h2
    id="heres-an-unhinted-snippet-with-no-discernible-language">
    Here\'s an unhinted snippet with no discernible language
  </h2>
  <pre>
    <code>
      )
      <span
        className="hljs-comment">
        ()
      </span>
      <span
        className="hljs-comment">
        (()
      </span>
      )
      <br />
    </code>
  </pre>
  <pre>
    <code
      className="language-bash">
      brew tap buildkite/buildkite
      <br />
      brew install --token=
      <span
        className="hljs-string">
        \'
        INSERT-YOUR-AGENT-TOKEN-HERE
        \'
      </span>
       buildkite-agent
      <br />
      <br />
      <span
        className="hljs-function">
        <span
          className="hljs-title">
          function
        </span>
      </span>
      () 
      {
      <br />
        
      ENV=
      <span
        className="hljs-string">
        \"foo_bar\"
      </span>
      <br />
      }
      <br />
    </code>
  </pre>
  <p>
    Let\'s also test interpolation inside other elements. 
    <code>
      foo bar
    </code>
  </p>
</div>
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"passElementProps":false,"markdownItPlugins":[null]}\` for component example 0 returns the expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.7.1
import React from \'react\';
import PropTypes from \'prop-types\';

MarkdownComponent.propTypes = {
  className: PropTypes.string,
  style: PropTypes.object
};

function MarkdownComponent(props) {
  const {className, style} = props;

  return (
    <div className={className} style={style}>
      <h1 id=\"test-document\">Test Document</h1>
      <p>[[toc]]</p>
      <h2 id=\"basic-markdown-template\">Basic Markdown Template</h2>
      <p>This is a basic Markdown template, with no interpolations going on.</p>
      <p>This should be</p>
      <ul>
        <li>easy and;</li>
        <li>predictable!</li>
      </ul>
      <h2 id=\"heres-a-couple-of-hyperlinks\">Here\'s a couple of hyperlinks</h2>
      <p><a href=\"https://duckduckgo.com\">https://duckduckgo.com</a> <a href=\"https://github.com\">GitHub</a></p>
      <h2 id=\"heres-a-code-snippet-with-no-interpolations\">Here\'s a code snippet with no interpolations</h2>
      <pre><code className=\"language-bash\">npm install -g yarn<br /></code></pre>
      <h2 id=\"heres-a-code-snippet-with-things-which-shouldnt-be-treated-as-interpolations\">Here\'s a code snippet with things which shouldn\'t be treated as interpolations</h2>
      <pre><code className=\"language-bash\"><span className=\"hljs-keyword\">function</span> <span className=\"hljs-function\"><span className=\"hljs-title\">rbenv</span></span>() {\"{\"}<br />{\"  \"}RUBY=blah<br />{\"}\"}<br /></code></pre>
      <h2 id=\"heres-a-paragraph-with-a-simple-interpolation\">Here\'s a paragraph with a simple interpolation</h2>
      <p>There are {Object.keys(props).length} props being supplied to this component.</p>
      <h2 id=\"heres-a-code-snippet-with-a-simple-interpolation\">Here\'s a code snippet with a simple interpolation</h2>
      <pre><code className=\"language-bash\"><span className=\"hljs-keyword\">function</span> <span className=\"hljs-function\"><span className=\"hljs-title\">rbenv</span></span>() {\"{\"}<br />{\"  \"}RUBY={props.rubycontent}<br />{\"}\"}<br /></code></pre>
      <h2 id=\"heres-an-unhinted-code-snippet\">Here\'s an unhinted code snippet</h2>
      <pre><code><span className=\"hljs-keyword\">the</span> quick brown fox jumps over <span className=\"hljs-keyword\">the</span> lazy dog<br /></code></pre>
      <h2 id=\"heres-an-unhinted-snippet-with-no-discernible-language\">Here\'s an unhinted snippet with no discernible language</h2>
      <pre><code>)<span className=\"hljs-comment\">()</span><span className=\"hljs-comment\">(()</span>)<br /></code></pre>
      <pre><code className=\"language-bash\">brew tap buildkite/buildkite<br />brew install --token=<span className=\"hljs-string\">\'{props.token || \'INSERT-YOUR-AGENT-TOKEN-HERE\'}\'</span> buildkite-agent<br /><br /><span className=\"hljs-function\"><span className=\"hljs-title\">function</span></span>() {\"{\"}<br />{\"  \"}ENV=<span className=\"hljs-string\">\"foo_bar\"</span><br />{\"}\"}<br /></code></pre>
      <p>Let\'s also test interpolation inside other elements. <code>{ \"foo bar\" }</code></p>
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"passElementProps":false,"markdownItPlugins":[null]}\` for component example 1 renders as expected within React 1`] = `
Array [
  "propTypes",
  "title",
  "myArray",
  "anObject",
]
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"passElementProps":false,"markdownItPlugins":[null]}\` for component example 1 renders as expected within React 2`] = `
<div
  className={undefined}
  style={undefined}>
  <h1
    id="markdown-template-with-imports-static-attributes-and-interpolations">
    Markdown template with imports, static attributes and interpolations
  </h1>
  <p>
    This file includes some custom static attributes which should be reflected fine on the resultant object
  </p>
  <p>
    This is a 
    <em>
      Markdown Component
    </em>
     file. Here you can include JSX-style assignment expressions; this component was generated using version 
    0.7.1
     of 
    markdown-component-loader
    !
  </p>
  <p>
    We\'re importing foo, which is 
    bar
    .
  </p>
  <p>
    We\'re also adding a react component here: 
    <bar
      style={
        Object {
          "foo": "bar",
        }
      }
      url="https://github.com/ticky/markdown-component-loader/issues" />
  </p>
  <p>
    Another cool thing you can do is use JSX 
    <strong>
      directly
    </strong>
     - here’s an SVG element, used inline: 
    <svg
      style={
        Object {
          "display": "inline",
          "height": "1em",
        }
      }
      viewBox="0 0 304 290">
      <path
        d="M2,111 h300 l-242.7,176.3 92.7,-285.3 92.7,285.3 z"
        fill="none"
        stroke="currentColor"
        strokeWidth="16" />
    </svg>
    .
  </p>
</div>
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"passElementProps":false,"markdownItPlugins":[null]}\` for component example 1 returns the expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.7.1
import React from \'react\';
import PropTypes from \'prop-types\';
import foo from \'foo\';
import Bar from \'foo\';
import { bugs, name, version } from \'../package.json\';

MarkdownComponent.propTypes = {
  className: PropTypes.string,
  style: PropTypes.object
};

MarkdownComponent[\'title\'] = \'a custom title\';

MarkdownComponent[\'myArray\'] = [
  \'foo\',
  \'bar\'
];

MarkdownComponent[\'anObject\'] = {
  \'foo\': \'bar\'
};

function MarkdownComponent(props) {
  const {className, style} = props;

  return (
    <div className={className} style={style}>
      <h1 id=\"markdown-template-with-imports-static-attributes-and-interpolations\">Markdown template with imports, static attributes and interpolations</h1>
      <p>This file includes some custom static attributes which should be reflected fine on the resultant object</p>
      <p>This is a <em>Markdown Component</em> file. Here you can include JSX-style assignment expressions; this component was generated using version { version } of { name }!</p>
      <p>We\'re importing foo, which is {foo}.</p>
      <p>We\'re also adding a react component here: {<Bar {...bugs} style={{ foo: \'bar\' }} />}</p>
      <p>Another cool thing you can do is use JSX <strong>directly</strong> - here’s an SVG element, used inline: { <svg style={{ display: \'inline\', height: \'1em\' }} viewBox=\"0 0 304 290\"><path fill=\"none\" stroke=\"currentColor\" strokeWidth=\"16\" d=\"M2,111 h300 l-242.7,176.3 92.7,-285.3 92.7,285.3 z\" /></svg> }.</p>
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"passElementProps":false,"markdownItPlugins":[null]}\` for component example 2 renders as expected within React 1`] = `
Array [
  "propTypes",
]
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"passElementProps":false,"markdownItPlugins":[null]}\` for component example 2 renders as expected within React 2`] = `
<div
  className={undefined}
  style={undefined} />
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"passElementProps":false,"markdownItPlugins":[null]}\` for component example 2 returns the expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.7.1
import React from \'react\';
import PropTypes from \'prop-types\';

MarkdownComponent.propTypes = {
  className: PropTypes.string,
  style: PropTypes.object
};

function MarkdownComponent(props) {
  const {className, style} = props;

  return (
    <div className={className} style={style}>
      {/* no input given */}
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"passElementProps":false}\` for component example 0 renders as expected within React 1`] = `
Array [
  "propTypes",
]
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"passElementProps":false}\` for component example 0 renders as expected within React 2`] = `
<div
  className={undefined}
  style={undefined}>
  <h1>
    Test Document
  </h1>
  <p>
    [[toc]]
  </p>
  <h2>
    Basic Markdown Template
  </h2>
  <p>
    This is a basic Markdown template, with no interpolations going on.
  </p>
  <p>
    This should be
  </p>
  <ul>
    <li>
      easy and;
    </li>
    <li>
      predictable!
    </li>
  </ul>
  <h2>
    Here\'s a couple of hyperlinks
  </h2>
  <p>
    <a
      href="https://duckduckgo.com">
      https://duckduckgo.com
    </a>
     
    <a
      href="https://github.com">
      GitHub
    </a>
  </p>
  <h2>
    Here\'s a code snippet with no interpolations
  </h2>
  <pre>
    <code
      className="language-bash">
      npm install -g yarn
      <br />
    </code>
  </pre>
  <h2>
    Here\'s a code snippet with things which shouldn\'t be treated as interpolations
  </h2>
  <pre>
    <code
      className="language-bash">
      <span
        className="hljs-keyword">
        function
      </span>
       
      <span
        className="hljs-function">
        <span
          className="hljs-title">
          rbenv
        </span>
      </span>
      () 
      {
      <br />
        
      RUBY=blah
      <br />
      }
      <br />
    </code>
  </pre>
  <h2>
    Here\'s a paragraph with a simple interpolation
  </h2>
  <p>
    There are 
    0
     props being supplied to this component.
  </p>
  <h2>
    Here\'s a code snippet with a simple interpolation
  </h2>
  <pre>
    <code
      className="language-bash">
      <span
        className="hljs-keyword">
        function
      </span>
       
      <span
        className="hljs-function">
        <span
          className="hljs-title">
          rbenv
        </span>
      </span>
      () 
      {
      <br />
        
      RUBY=
      <br />
      }
      <br />
    </code>
  </pre>
  <h2>
    Here\'s an unhinted code snippet
  </h2>
  <pre>
    <code>
      <span
        className="hljs-keyword">
        the
      </span>
       quick brown fox jumps over 
      <span
        className="hljs-keyword">
        the
      </span>
       lazy dog
      <br />
    </code>
  </pre>
  <h2>
    Here\'s an unhinted snippet with no discernible language
  </h2>
  <pre>
    <code>
      )
      <span
        className="hljs-comment">
        ()
      </span>
      <span
        className="hljs-comment">
        (()
      </span>
      )
      <br />
    </code>
  </pre>
  <pre>
    <code
      className="language-bash">
      brew tap buildkite/buildkite
      <br />
      brew install --token=
      <span
        className="hljs-string">
        \'
        INSERT-YOUR-AGENT-TOKEN-HERE
        \'
      </span>
       buildkite-agent
      <br />
      <br />
      <span
        className="hljs-function">
        <span
          className="hljs-title">
          function
        </span>
      </span>
      () 
      {
      <br />
        
      ENV=
      <span
        className="hljs-string">
        \"foo_bar\"
      </span>
      <br />
      }
      <br />
    </code>
  </pre>
  <p>
    Let\'s also test interpolation inside other elements. 
    <code>
      foo bar
    </code>
  </p>
</div>
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"passElementProps":false}\` for component example 0 returns the expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.7.1
import React from \'react\';
import PropTypes from \'prop-types\';

MarkdownComponent.propTypes = {
  className: PropTypes.string,
  style: PropTypes.object
};

function MarkdownComponent(props) {
  const {className, style} = props;

  return (
    <div className={className} style={style}>
      <h1>Test Document</h1>
      <p>[[toc]]</p>
      <h2>Basic Markdown Template</h2>
      <p>This is a basic Markdown template, with no interpolations going on.</p>
      <p>This should be</p>
      <ul>
        <li>easy and;</li>
        <li>predictable!</li>
      </ul>
      <h2>Here\'s a couple of hyperlinks</h2>
      <p><a href=\"https://duckduckgo.com\">https://duckduckgo.com</a> <a href=\"https://github.com\">GitHub</a></p>
      <h2>Here\'s a code snippet with no interpolations</h2>
      <pre><code className=\"language-bash\">npm install -g yarn<br /></code></pre>
      <h2>Here\'s a code snippet with things which shouldn\'t be treated as interpolations</h2>
      <pre><code className=\"language-bash\"><span className=\"hljs-keyword\">function</span> <span className=\"hljs-function\"><span className=\"hljs-title\">rbenv</span></span>() {\"{\"}<br />{\"  \"}RUBY=blah<br />{\"}\"}<br /></code></pre>
      <h2>Here\'s a paragraph with a simple interpolation</h2>
      <p>There are {Object.keys(props).length} props being supplied to this component.</p>
      <h2>Here\'s a code snippet with a simple interpolation</h2>
      <pre><code className=\"language-bash\"><span className=\"hljs-keyword\">function</span> <span className=\"hljs-function\"><span className=\"hljs-title\">rbenv</span></span>() {\"{\"}<br />{\"  \"}RUBY={props.rubycontent}<br />{\"}\"}<br /></code></pre>
      <h2>Here\'s an unhinted code snippet</h2>
      <pre><code><span className=\"hljs-keyword\">the</span> quick brown fox jumps over <span className=\"hljs-keyword\">the</span> lazy dog<br /></code></pre>
      <h2>Here\'s an unhinted snippet with no discernible language</h2>
      <pre><code>)<span className=\"hljs-comment\">()</span><span className=\"hljs-comment\">(()</span>)<br /></code></pre>
      <pre><code className=\"language-bash\">brew tap buildkite/buildkite<br />brew install --token=<span className=\"hljs-string\">\'{props.token || \'INSERT-YOUR-AGENT-TOKEN-HERE\'}\'</span> buildkite-agent<br /><br /><span className=\"hljs-function\"><span className=\"hljs-title\">function</span></span>() {\"{\"}<br />{\"  \"}ENV=<span className=\"hljs-string\">\"foo_bar\"</span><br />{\"}\"}<br /></code></pre>
      <p>Let\'s also test interpolation inside other elements. <code>{ \"foo bar\" }</code></p>
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"passElementProps":false}\` for component example 1 renders as expected within React 1`] = `
Array [
  "propTypes",
  "title",
  "myArray",
  "anObject",
]
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"passElementProps":false}\` for component example 1 renders as expected within React 2`] = `
<div
  className={undefined}
  style={undefined}>
  <h1>
    Markdown template with imports, static attributes and interpolations
  </h1>
  <p>
    This file includes some custom static attributes which should be reflected fine on the resultant object
  </p>
  <p>
    This is a 
    <em>
      Markdown Component
    </em>
     file. Here you can include JSX-style assignment expressions; this component was generated using version 
    0.7.1
     of 
    markdown-component-loader
    !
  </p>
  <p>
    We\'re importing foo, which is 
    bar
    .
  </p>
  <p>
    We\'re also adding a react component here: 
    <bar
      style={
        Object {
          "foo": "bar",
        }
      }
      url="https://github.com/ticky/markdown-component-loader/issues" />
  </p>
  <p>
    Another cool thing you can do is use JSX 
    <strong>
      directly
    </strong>
     - here’s an SVG element, used inline: 
    <svg
      style={
        Object {
          "display": "inline",
          "height": "1em",
        }
      }
      viewBox="0 0 304 290">
      <path
        d="M2,111 h300 l-242.7,176.3 92.7,-285.3 92.7,285.3 z"
        fill="none"
        stroke="currentColor"
        strokeWidth="16" />
    </svg>
    .
  </p>
</div>
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"passElementProps":false}\` for component example 1 returns the expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.7.1
import React from \'react\';
import PropTypes from \'prop-types\';
import foo from \'foo\';
import Bar from \'foo\';
import { bugs, name, version } from \'../package.json\';

MarkdownComponent.propTypes = {
  className: PropTypes.string,
  style: PropTypes.object
};

MarkdownComponent[\'title\'] = \'a custom title\';

MarkdownComponent[\'myArray\'] = [
  \'foo\',
  \'bar\'
];

MarkdownComponent[\'anObject\'] = {
  \'foo\': \'bar\'
};

function MarkdownComponent(props) {
  const {className, style} = props;

  return (
    <div className={className} style={style}>
      <h1>Markdown template with imports, static attributes and interpolations</h1>
      <p>This file includes some custom static attributes which should be reflected fine on the resultant object</p>
      <p>This is a <em>Markdown Component</em> file. Here you can include JSX-style assignment expressions; this component was generated using version { version } of { name }!</p>
      <p>We\'re importing foo, which is {foo}.</p>
      <p>We\'re also adding a react component here: {<Bar {...bugs} style={{ foo: \'bar\' }} />}</p>
      <p>Another cool thing you can do is use JSX <strong>directly</strong> - here’s an SVG element, used inline: { <svg style={{ display: \'inline\', height: \'1em\' }} viewBox=\"0 0 304 290\"><path fill=\"none\" stroke=\"currentColor\" strokeWidth=\"16\" d=\"M2,111 h300 l-242.7,176.3 92.7,-285.3 92.7,285.3 z\" /></svg> }.</p>
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"passElementProps":false}\` for component example 2 renders as expected within React 1`] = `
Array [
  "propTypes",
]
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"passElementProps":false}\` for component example 2 renders as expected within React 2`] = `
<div
  className={undefined}
  style={undefined} />
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"passElementProps":false}\` for component example 2 returns the expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.7.1
import React from \'react\';
import PropTypes from \'prop-types\';

MarkdownComponent.propTypes = {
  className: PropTypes.string,
  style: PropTypes.object
};

function MarkdownComponent(props) {
  const {className, style} = props;

  return (
    <div className={className} style={style}>
      {/* no input given */}
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"passElementProps":true,"markdownItPlugins":"somenonsensevalue"}\` for component example 0 renders as expected within React 1`] = `
Array [
  "propTypes",
  "defaultProps",
]
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"passElementProps":true,"markdownItPlugins":"somenonsensevalue"}\` for component example 0 renders as expected within React 2`] = `
<div
  className={undefined}
  style={undefined}>
  <h1>
    Test Document
  </h1>
  <p>
    [[toc]]
  </p>
  <h2>
    Basic Markdown Template
  </h2>
  <p>
    This is a basic Markdown template, with no interpolations going on.
  </p>
  <p>
    This should be
  </p>
  <ul>
    <li>
      easy and;
    </li>
    <li>
      predictable!
    </li>
  </ul>
  <h2>
    Here\'s a couple of hyperlinks
  </h2>
  <p>
    <a
      href="https://duckduckgo.com">
      https://duckduckgo.com
    </a>
     
    <a
      href="https://github.com">
      GitHub
    </a>
  </p>
  <h2>
    Here\'s a code snippet with no interpolations
  </h2>
  <pre>
    <code
      className="language-bash">
      npm install -g yarn
      <br />
    </code>
  </pre>
  <h2>
    Here\'s a code snippet with things which shouldn\'t be treated as interpolations
  </h2>
  <pre>
    <code
      className="language-bash">
      <span
        className="hljs-keyword">
        function
      </span>
       
      <span
        className="hljs-function">
        <span
          className="hljs-title">
          rbenv
        </span>
      </span>
      () 
      {
      <br />
        
      RUBY=blah
      <br />
      }
      <br />
    </code>
  </pre>
  <h2>
    Here\'s a paragraph with a simple interpolation
  </h2>
  <p>
    There are 
    1
     props being supplied to this component.
  </p>
  <h2>
    Here\'s a code snippet with a simple interpolation
  </h2>
  <pre>
    <code
      className="language-bash">
      <span
        className="hljs-keyword">
        function
      </span>
       
      <span
        className="hljs-function">
        <span
          className="hljs-title">
          rbenv
        </span>
      </span>
      () 
      {
      <br />
        
      RUBY=
      <br />
      }
      <br />
    </code>
  </pre>
  <h2>
    Here\'s an unhinted code snippet
  </h2>
  <pre>
    <code>
      <span
        className="hljs-keyword">
        the
      </span>
       quick brown fox jumps over 
      <span
        className="hljs-keyword">
        the
      </span>
       lazy dog
      <br />
    </code>
  </pre>
  <h2>
    Here\'s an unhinted snippet with no discernible language
  </h2>
  <pre>
    <code>
      )
      <span
        className="hljs-comment">
        ()
      </span>
      <span
        className="hljs-comment">
        (()
      </span>
      )
      <br />
    </code>
  </pre>
  <pre>
    <code
      className="language-bash">
      brew tap buildkite/buildkite
      <br />
      brew install --token=
      <span
        className="hljs-string">
        \'
        INSERT-YOUR-AGENT-TOKEN-HERE
        \'
      </span>
       buildkite-agent
      <br />
      <br />
      <span
        className="hljs-function">
        <span
          className="hljs-title">
          function
        </span>
      </span>
      () 
      {
      <br />
        
      ENV=
      <span
        className="hljs-string">
        \"foo_bar\"
      </span>
      <br />
      }
      <br />
    </code>
  </pre>
  <p>
    Let\'s also test interpolation inside other elements. 
    <code>
      foo bar
    </code>
  </p>
</div>
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"passElementProps":true,"markdownItPlugins":"somenonsensevalue"}\` for component example 0 returns the expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.7.1
import React from \'react\';
import PropTypes from \'prop-types\';

MarkdownComponent.propTypes = {
  className: PropTypes.string,
  style: PropTypes.object,
  elementProps: PropTypes.object
};

MarkdownComponent.defaultProps = {
  elementProps: {}
};

function MarkdownComponent(props) {
  const {className, style, elementProps} = props;

  return (
    <div className={className} style={style}>
      <h1 {...elementProps[\'h1\']}>Test Document</h1>
      <p {...elementProps[\'p\']}>[[toc]]</p>
      <h2 {...elementProps[\'h2\']}>Basic Markdown Template</h2>
      <p {...elementProps[\'p\']}>This is a basic Markdown template, with no interpolations going on.</p>
      <p {...elementProps[\'p\']}>This should be</p>
      <ul {...elementProps[\'ul\']}>
        <li {...elementProps[\'li\']}>easy and;</li>
        <li {...elementProps[\'li\']}>predictable!</li>
      </ul>
      <h2 {...elementProps[\'h2\']}>Here\'s a couple of hyperlinks</h2>
      <p {...elementProps[\'p\']}><a {...elementProps[\'a\']} href=\"https://duckduckgo.com\">https://duckduckgo.com</a> <a {...elementProps[\'a\']} href=\"https://github.com\">GitHub</a></p>
      <h2 {...elementProps[\'h2\']}>Here\'s a code snippet with no interpolations</h2>
      <pre {...elementProps[\'pre\']}><code {...elementProps[\'code\']} className=\"language-bash\">npm install -g yarn<br {...elementProps[\'br\']} /></code></pre>
      <h2 {...elementProps[\'h2\']}>Here\'s a code snippet with things which shouldn\'t be treated as interpolations</h2>
      <pre {...elementProps[\'pre\']}><code {...elementProps[\'code\']} className=\"language-bash\"><span {...elementProps[\'span\']} className=\"hljs-keyword\">function</span> <span {...elementProps[\'span\']} className=\"hljs-function\"><span {...elementProps[\'span\']} className=\"hljs-title\">rbenv</span></span>() {\"{\"}<br {...elementProps[\'br\']} />{\"  \"}RUBY=blah<br {...elementProps[\'br\']} />{\"}\"}<br {...elementProps[\'br\']} /></code></pre>
      <h2 {...elementProps[\'h2\']}>Here\'s a paragraph with a simple interpolation</h2>
      <p {...elementProps[\'p\']}>There are {Object.keys(props).length} props being supplied to this component.</p>
      <h2 {...elementProps[\'h2\']}>Here\'s a code snippet with a simple interpolation</h2>
      <pre {...elementProps[\'pre\']}><code {...elementProps[\'code\']} className=\"language-bash\"><span {...elementProps[\'span\']} className=\"hljs-keyword\">function</span> <span {...elementProps[\'span\']} className=\"hljs-function\"><span {...elementProps[\'span\']} className=\"hljs-title\">rbenv</span></span>() {\"{\"}<br {...elementProps[\'br\']} />{\"  \"}RUBY={props.rubycontent}<br {...elementProps[\'br\']} />{\"}\"}<br {...elementProps[\'br\']} /></code></pre>
      <h2 {...elementProps[\'h2\']}>Here\'s an unhinted code snippet</h2>
      <pre {...elementProps[\'pre\']}><code {...elementProps[\'code\']}><span {...elementProps[\'span\']} className=\"hljs-keyword\">the</span> quick brown fox jumps over <span {...elementProps[\'span\']} className=\"hljs-keyword\">the</span> lazy dog<br {...elementProps[\'br\']} /></code></pre>
      <h2 {...elementProps[\'h2\']}>Here\'s an unhinted snippet with no discernible language</h2>
      <pre {...elementProps[\'pre\']}><code {...elementProps[\'code\']}>)<span {...elementProps[\'span\']} className=\"hljs-comment\">()</span><span {...elementProps[\'span\']} className=\"hljs-comment\">(()</span>)<br {...elementProps[\'br\']} /></code></pre>
      <pre {...elementProps[\'pre\']}><code {...elementProps[\'code\']} className=\"language-bash\">brew tap buildkite/buildkite<br {...elementProps[\'br\']} />brew install --token=<span {...elementProps[\'span\']} className=\"hljs-string\">\'{props.token || \'INSERT-YOUR-AGENT-TOKEN-HERE\'}\'</span> buildkite-agent<br {...elementProps[\'br\']} /><br {...elementProps[\'br\']} /><span {...elementProps[\'span\']} className=\"hljs-function\"><span {...elementProps[\'span\']} className=\"hljs-title\">function</span></span>() {\"{\"}<br {...elementProps[\'br\']} />{\"  \"}ENV=<span {...elementProps[\'span\']} className=\"hljs-string\">\"foo_bar\"</span><br {...elementProps[\'br\']} />{\"}\"}<br {...elementProps[\'br\']} /></code></pre>
      <p {...elementProps[\'p\']}>Let\'s also test interpolation inside other elements. <code {...elementProps[\'code\']}>{ \"foo bar\" }</code></p>
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"passElementProps":true,"markdownItPlugins":"somenonsensevalue"}\` for component example 1 renders as expected within React 1`] = `
Array [
  "propTypes",
  "defaultProps",
  "title",
  "myArray",
  "anObject",
]
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"passElementProps":true,"markdownItPlugins":"somenonsensevalue"}\` for component example 1 renders as expected within React 2`] = `
<div
  className={undefined}
  style={undefined}>
  <h1>
    Markdown template with imports, static attributes and interpolations
  </h1>
  <p>
    This file includes some custom static attributes which should be reflected fine on the resultant object
  </p>
  <p>
    This is a 
    <em>
      Markdown Component
    </em>
     file. Here you can include JSX-style assignment expressions; this component was generated using version 
    0.7.1
     of 
    markdown-component-loader
    !
  </p>
  <p>
    We\'re importing foo, which is 
    bar
    .
  </p>
  <p>
    We\'re also adding a react component here: 
    <bar
      style={
        Object {
          "foo": "bar",
        }
      }
      url="https://github.com/ticky/markdown-component-loader/issues" />
  </p>
  <p>
    Another cool thing you can do is use JSX 
    <strong>
      directly
    </strong>
     - here’s an SVG element, used inline: 
    <svg
      style={
        Object {
          "display": "inline",
          "height": "1em",
        }
      }
      viewBox="0 0 304 290">
      <path
        d="M2,111 h300 l-242.7,176.3 92.7,-285.3 92.7,285.3 z"
        fill="none"
        stroke="currentColor"
        strokeWidth="16" />
    </svg>
    .
  </p>
</div>
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"passElementProps":true,"markdownItPlugins":"somenonsensevalue"}\` for component example 1 returns the expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.7.1
import React from \'react\';
import PropTypes from \'prop-types\';
import foo from \'foo\';
import Bar from \'foo\';
import { bugs, name, version } from \'../package.json\';

MarkdownComponent.propTypes = {
  className: PropTypes.string,
  style: PropTypes.object,
  elementProps: PropTypes.object
};

MarkdownComponent.defaultProps = {
  elementProps: {}
};

MarkdownComponent[\'title\'] = \'a custom title\';

MarkdownComponent[\'myArray\'] = [
  \'foo\',
  \'bar\'
];

MarkdownComponent[\'anObject\'] = {
  \'foo\': \'bar\'
};

function MarkdownComponent(props) {
  const {className, style, elementProps} = props;

  return (
    <div className={className} style={style}>
      <h1 {...elementProps[\'h1\']}>Markdown template with imports, static attributes and interpolations</h1>
      <p {...elementProps[\'p\']}>This file includes some custom static attributes which should be reflected fine on the resultant object</p>
      <p {...elementProps[\'p\']}>This is a <em {...elementProps[\'em\']}>Markdown Component</em> file. Here you can include JSX-style assignment expressions; this component was generated using version { version } of { name }!</p>
      <p {...elementProps[\'p\']}>We\'re importing foo, which is {foo}.</p>
      <p {...elementProps[\'p\']}>We\'re also adding a react component here: {<Bar {...bugs} style={{ foo: \'bar\' }} />}</p>
      <p {...elementProps[\'p\']}>Another cool thing you can do is use JSX <strong {...elementProps[\'strong\']}>directly</strong> - here’s an SVG element, used inline: { <svg {...elementProps[\'svg\']} style={{ display: \'inline\', height: \'1em\' }} viewBox=\"0 0 304 290\"><path {...elementProps[\'path\']} fill=\"none\" stroke=\"currentColor\" strokeWidth=\"16\" d=\"M2,111 h300 l-242.7,176.3 92.7,-285.3 92.7,285.3 z\" /></svg> }.</p>
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"passElementProps":true,"markdownItPlugins":"somenonsensevalue"}\` for component example 2 renders as expected within React 1`] = `
Array [
  "propTypes",
  "defaultProps",
]
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"passElementProps":true,"markdownItPlugins":"somenonsensevalue"}\` for component example 2 renders as expected within React 2`] = `
<div
  className={undefined}
  style={undefined} />
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"passElementProps":true,"markdownItPlugins":"somenonsensevalue"}\` for component example 2 returns the expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.7.1
import React from \'react\';
import PropTypes from \'prop-types\';

MarkdownComponent.propTypes = {
  className: PropTypes.string,
  style: PropTypes.object,
  elementProps: PropTypes.object
};

MarkdownComponent.defaultProps = {
  elementProps: {}
};

function MarkdownComponent(props) {
  const {className, style, elementProps} = props;

  return (
    <div className={className} style={style}>
      {/* no input given */}
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"passElementProps":true,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 0 renders as expected within React 1`] = `
Array [
  "propTypes",
  "defaultProps",
]
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"passElementProps":true,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 0 renders as expected within React 2`] = `
<div
  className={undefined}
  style={undefined}>
  <h1
    id="test-document">
    Test Document
  </h1>
  <p />
  <div
    className="my-container-class">
    <ul>
      <li>
        <a
          href="#test-document">
          Test Document
        </a>
        <ul>
          <li>
            <a
              href="#basic-markdown-template">
              Basic Markdown Template
            </a>
          </li>
          <li>
            <a
              href="#heres-a-couple-of-hyperlinks">
              Here\'s a couple of hyperlinks
            </a>
          </li>
          <li>
            <a
              href="#heres-a-code-snippet-with-no-interpolations">
              Here\'s a code snippet with no interpolations
            </a>
          </li>
          <li>
            <a
              href="#heres-a-code-snippet-with-things-which-shouldnt-be-treated-as-interpolations">
              Here\'s a code snippet with things which shouldn\'t be treated as interpolations
            </a>
          </li>
          <li>
            <a
              href="#heres-a-paragraph-with-a-simple-interpolation">
              Here\'s a paragraph with a simple interpolation
            </a>
          </li>
          <li>
            <a
              href="#heres-a-code-snippet-with-a-simple-interpolation">
              Here\'s a code snippet with a simple interpolation
            </a>
          </li>
          <li>
            <a
              href="#heres-an-unhinted-code-snippet">
              Here\'s an unhinted code snippet
            </a>
          </li>
          <li>
            <a
              href="#heres-an-unhinted-snippet-with-no-discernible-language">
              Here\'s an unhinted snippet with no discernible language
            </a>
          </li>
        </ul>
      </li>
    </ul>
  </div>
  <p />
  <h2
    id="basic-markdown-template">
    Basic Markdown Template
  </h2>
  <p>
    This is a basic Markdown template, with no interpolations going on.
  </p>
  <p>
    This should be
  </p>
  <ul>
    <li>
      easy and;
    </li>
    <li>
      predictable!
    </li>
  </ul>
  <h2
    id="heres-a-couple-of-hyperlinks">
    Here\'s a couple of hyperlinks
  </h2>
  <p>
    <a
      href="https://duckduckgo.com">
      https://duckduckgo.com
    </a>
     
    <a
      href="https://github.com">
      GitHub
    </a>
  </p>
  <h2
    id="heres-a-code-snippet-with-no-interpolations">
    Here\'s a code snippet with no interpolations
  </h2>
  <pre>
    <code
      className="language-bash">
      npm install -g yarn
      <br />
    </code>
  </pre>
  <h2
    id="heres-a-code-snippet-with-things-which-shouldnt-be-treated-as-interpolations">
    Here\'s a code snippet with things which shouldn\'t be treated as interpolations
  </h2>
  <pre>
    <code
      className="language-bash">
      <span
        className="hljs-keyword">
        function
      </span>
       
      <span
        className="hljs-function">
        <span
          className="hljs-title">
          rbenv
        </span>
      </span>
      () 
      {
      <br />
        
      RUBY=blah
      <br />
      }
      <br />
    </code>
  </pre>
  <h2
    id="heres-a-paragraph-with-a-simple-interpolation">
    Here\'s a paragraph with a simple interpolation
  </h2>
  <p>
    There are 
    1
     props being supplied to this component.
  </p>
  <h2
    id="heres-a-code-snippet-with-a-simple-interpolation">
    Here\'s a code snippet with a simple interpolation
  </h2>
  <pre>
    <code
      className="language-bash">
      <span
        className="hljs-keyword">
        function
      </span>
       
      <span
        className="hljs-function">
        <span
          className="hljs-title">
          rbenv
        </span>
      </span>
      () 
      {
      <br />
        
      RUBY=
      <br />
      }
      <br />
    </code>
  </pre>
  <h2
    id="heres-an-unhinted-code-snippet">
    Here\'s an unhinted code snippet
  </h2>
  <pre>
    <code>
      <span
        className="hljs-keyword">
        the
      </span>
       quick brown fox jumps over 
      <span
        className="hljs-keyword">
        the
      </span>
       lazy dog
      <br />
    </code>
  </pre>
  <h2
    id="heres-an-unhinted-snippet-with-no-discernible-language">
    Here\'s an unhinted snippet with no discernible language
  </h2>
  <pre>
    <code>
      )
      <span
        className="hljs-comment">
        ()
      </span>
      <span
        className="hljs-comment">
        (()
      </span>
      )
      <br />
    </code>
  </pre>
  <pre>
    <code
      className="language-bash">
      brew tap buildkite/buildkite
      <br />
      brew install --token=
      <span
        className="hljs-string">
        \'
        INSERT-YOUR-AGENT-TOKEN-HERE
        \'
      </span>
       buildkite-agent
      <br />
      <br />
      <span
        className="hljs-function">
        <span
          className="hljs-title">
          function
        </span>
      </span>
      () 
      {
      <br />
        
      ENV=
      <span
        className="hljs-string">
        \"foo_bar\"
      </span>
      <br />
      }
      <br />
    </code>
  </pre>
  <p>
    Let\'s also test interpolation inside other elements. 
    <code>
      foo bar
    </code>
  </p>
</div>
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"passElementProps":true,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 0 returns the expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.7.1
import React from \'react\';
import PropTypes from \'prop-types\';

MarkdownComponent.propTypes = {
  className: PropTypes.string,
  style: PropTypes.object,
  elementProps: PropTypes.object
};

MarkdownComponent.defaultProps = {
  elementProps: {}
};

function MarkdownComponent(props) {
  const {className, style, elementProps} = props;

  return (
    <div className={className} style={style}>
      <h1 {...elementProps[\'h1\']} id=\"test-document\">Test Document</h1>
      <p {...elementProps[\'p\']} /><div {...elementProps[\'div\']} className=\"my-container-class\"><ul {...elementProps[\'ul\']}><li {...elementProps[\'li\']}><a {...elementProps[\'a\']} href=\"#test-document\">Test Document</a><ul {...elementProps[\'ul\']}><li {...elementProps[\'li\']}><a {...elementProps[\'a\']} href=\"#basic-markdown-template\">Basic Markdown Template</a></li><li {...elementProps[\'li\']}><a {...elementProps[\'a\']} href=\"#heres-a-couple-of-hyperlinks\">Here\'s a couple of hyperlinks</a></li><li {...elementProps[\'li\']}><a {...elementProps[\'a\']} href=\"#heres-a-code-snippet-with-no-interpolations\">Here\'s a code snippet with no interpolations</a></li><li {...elementProps[\'li\']}><a {...elementProps[\'a\']} href=\"#heres-a-code-snippet-with-things-which-shouldnt-be-treated-as-interpolations\">Here\'s a code snippet with things which shouldn\'t be treated as interpolations</a></li><li {...elementProps[\'li\']}><a {...elementProps[\'a\']} href=\"#heres-a-paragraph-with-a-simple-interpolation\">Here\'s a paragraph with a simple interpolation</a></li><li {...elementProps[\'li\']}><a {...elementProps[\'a\']} href=\"#heres-a-code-snippet-with-a-simple-interpolation\">Here\'s a code snippet with a simple interpolation</a></li><li {...elementProps[\'li\']}><a {...elementProps[\'a\']} href=\"#heres-an-unhinted-code-snippet\">Here\'s an unhinted code snippet</a></li><li {...elementProps[\'li\']}><a {...elementProps[\'a\']} href=\"#heres-an-unhinted-snippet-with-no-discernible-language\">Here\'s an unhinted snippet with no discernible language</a></li></ul></li></ul></div><p {...elementProps[\'p\']} />
      <h2 {...elementProps[\'h2\']} id=\"basic-markdown-template\">Basic Markdown Template</h2>
      <p {...elementProps[\'p\']}>This is a basic Markdown template, with no interpolations going on.</p>
      <p {...elementProps[\'p\']}>This should be</p>
      <ul {...elementProps[\'ul\']}>
        <li {...elementProps[\'li\']}>easy and;</li>
        <li {...elementProps[\'li\']}>predictable!</li>
      </ul>
      <h2 {...elementProps[\'h2\']} id=\"heres-a-couple-of-hyperlinks\">Here\'s a couple of hyperlinks</h2>
      <p {...elementProps[\'p\']}><a {...elementProps[\'a\']} href=\"https://duckduckgo.com\">https://duckduckgo.com</a> <a {...elementProps[\'a\']} href=\"https://github.com\">GitHub</a></p>
      <h2 {...elementProps[\'h2\']} id=\"heres-a-code-snippet-with-no-interpolations\">Here\'s a code snippet with no interpolations</h2>
      <pre {...elementProps[\'pre\']}><code {...elementProps[\'code\']} className=\"language-bash\">npm install -g yarn<br {...elementProps[\'br\']} /></code></pre>
      <h2 {...elementProps[\'h2\']} id=\"heres-a-code-snippet-with-things-which-shouldnt-be-treated-as-interpolations\">Here\'s a code snippet with things which shouldn\'t be treated as interpolations</h2>
      <pre {...elementProps[\'pre\']}><code {...elementProps[\'code\']} className=\"language-bash\"><span {...elementProps[\'span\']} className=\"hljs-keyword\">function</span> <span {...elementProps[\'span\']} className=\"hljs-function\"><span {...elementProps[\'span\']} className=\"hljs-title\">rbenv</span></span>() {\"{\"}<br {...elementProps[\'br\']} />{\"  \"}RUBY=blah<br {...elementProps[\'br\']} />{\"}\"}<br {...elementProps[\'br\']} /></code></pre>
      <h2 {...elementProps[\'h2\']} id=\"heres-a-paragraph-with-a-simple-interpolation\">Here\'s a paragraph with a simple interpolation</h2>
      <p {...elementProps[\'p\']}>There are {Object.keys(props).length} props being supplied to this component.</p>
      <h2 {...elementProps[\'h2\']} id=\"heres-a-code-snippet-with-a-simple-interpolation\">Here\'s a code snippet with a simple interpolation</h2>
      <pre {...elementProps[\'pre\']}><code {...elementProps[\'code\']} className=\"language-bash\"><span {...elementProps[\'span\']} className=\"hljs-keyword\">function</span> <span {...elementProps[\'span\']} className=\"hljs-function\"><span {...elementProps[\'span\']} className=\"hljs-title\">rbenv</span></span>() {\"{\"}<br {...elementProps[\'br\']} />{\"  \"}RUBY={props.rubycontent}<br {...elementProps[\'br\']} />{\"}\"}<br {...elementProps[\'br\']} /></code></pre>
      <h2 {...elementProps[\'h2\']} id=\"heres-an-unhinted-code-snippet\">Here\'s an unhinted code snippet</h2>
      <pre {...elementProps[\'pre\']}><code {...elementProps[\'code\']}><span {...elementProps[\'span\']} className=\"hljs-keyword\">the</span> quick brown fox jumps over <span {...elementProps[\'span\']} className=\"hljs-keyword\">the</span> lazy dog<br {...elementProps[\'br\']} /></code></pre>
      <h2 {...elementProps[\'h2\']} id=\"heres-an-unhinted-snippet-with-no-discernible-language\">Here\'s an unhinted snippet with no discernible language</h2>
      <pre {...elementProps[\'pre\']}><code {...elementProps[\'code\']}>)<span {...elementProps[\'span\']} className=\"hljs-comment\">()</span><span {...elementProps[\'span\']} className=\"hljs-comment\">(()</span>)<br {...elementProps[\'br\']} /></code></pre>
      <pre {...elementProps[\'pre\']}><code {...elementProps[\'code\']} className=\"language-bash\">brew tap buildkite/buildkite<br {...elementProps[\'br\']} />brew install --token=<span {...elementProps[\'span\']} className=\"hljs-string\">\'{props.token || \'INSERT-YOUR-AGENT-TOKEN-HERE\'}\'</span> buildkite-agent<br {...elementProps[\'br\']} /><br {...elementProps[\'br\']} /><span {...elementProps[\'span\']} className=\"hljs-function\"><span {...elementProps[\'span\']} className=\"hljs-title\">function</span></span>() {\"{\"}<br {...elementProps[\'br\']} />{\"  \"}ENV=<span {...elementProps[\'span\']} className=\"hljs-string\">\"foo_bar\"</span><br {...elementProps[\'br\']} />{\"}\"}<br {...elementProps[\'br\']} /></code></pre>
      <p {...elementProps[\'p\']}>Let\'s also test interpolation inside other elements. <code {...elementProps[\'code\']}>{ \"foo bar\" }</code></p>
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"passElementProps":true,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 1 renders as expected within React 1`] = `
Array [
  "propTypes",
  "defaultProps",
  "title",
  "myArray",
  "anObject",
]
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"passElementProps":true,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 1 renders as expected within React 2`] = `
<div
  className={undefined}
  style={undefined}>
  <h1
    id="markdown-template-with-imports-static-attributes-and-interpolations">
    Markdown template with imports, static attributes and interpolations
  </h1>
  <p>
    This file includes some custom static attributes which should be reflected fine on the resultant object
  </p>
  <p>
    This is a 
    <em>
      Markdown Component
    </em>
     file. Here you can include JSX-style assignment expressions; this component was generated using version 
    0.7.1
     of 
    markdown-component-loader
    !
  </p>
  <p>
    We\'re importing foo, which is 
    bar
    .
  </p>
  <p>
    We\'re also adding a react component here: 
    <bar
      style={
        Object {
          "foo": "bar",
        }
      }
      url="https://github.com/ticky/markdown-component-loader/issues" />
  </p>
  <p>
    Another cool thing you can do is use JSX 
    <strong>
      directly
    </strong>
     - here’s an SVG element, used inline: 
    <svg
      style={
        Object {
          "display": "inline",
          "height": "1em",
        }
      }
      viewBox="0 0 304 290">
      <path
        d="M2,111 h300 l-242.7,176.3 92.7,-285.3 92.7,285.3 z"
        fill="none"
        stroke="currentColor"
        strokeWidth="16" />
    </svg>
    .
  </p>
</div>
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"passElementProps":true,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 1 returns the expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.7.1
import React from \'react\';
import PropTypes from \'prop-types\';
import foo from \'foo\';
import Bar from \'foo\';
import { bugs, name, version } from \'../package.json\';

MarkdownComponent.propTypes = {
  className: PropTypes.string,
  style: PropTypes.object,
  elementProps: PropTypes.object
};

MarkdownComponent.defaultProps = {
  elementProps: {}
};

MarkdownComponent[\'title\'] = \'a custom title\';

MarkdownComponent[\'myArray\'] = [
  \'foo\',
  \'bar\'
];

MarkdownComponent[\'anObject\'] = {
  \'foo\': \'bar\'
};

function MarkdownComponent(props) {
  const {className, style, elementProps} = props;

  return (
    <div className={className} style={style}>
      <h1 {...elementProps[\'h1\']} id=\"markdown-template-with-imports-static-attributes-and-interpolations\">Markdown template with imports, static attributes and interpolations</h1>
      <p {...elementProps[\'p\']}>This file includes some custom static attributes which should be reflected fine on the resultant object</p>
      <p {...elementProps[\'p\']}>This is a <em {...elementProps[\'em\']}>Markdown Component</em> file. Here you can include JSX-style assignment expressions; this component was generated using version { version } of { name }!</p>
      <p {...elementProps[\'p\']}>We\'re importing foo, which is {foo}.</p>
      <p {...elementProps[\'p\']}>We\'re also adding a react component here: {<Bar {...bugs} style={{ foo: \'bar\' }} />}</p>
      <p {...elementProps[\'p\']}>Another cool thing you can do is use JSX <strong {...elementProps[\'strong\']}>directly</strong> - here’s an SVG element, used inline: { <svg {...elementProps[\'svg\']} style={{ display: \'inline\', height: \'1em\' }} viewBox=\"0 0 304 290\"><path {...elementProps[\'path\']} fill=\"none\" stroke=\"currentColor\" strokeWidth=\"16\" d=\"M2,111 h300 l-242.7,176.3 92.7,-285.3 92.7,285.3 z\" /></svg> }.</p>
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"passElementProps":true,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 2 renders as expected within React 1`] = `
Array [
  "propTypes",
  "defaultProps",
]
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"passElementProps":true,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 2 renders as expected within React 2`] = `
<div
  className={undefined}
  style={undefined} />
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"passElementProps":true,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 2 returns the expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.7.1
import React from \'react\';
import PropTypes from \'prop-types\';

MarkdownComponent.propTypes = {
  className: PropTypes.string,
  style: PropTypes.object,
  elementProps: PropTypes.object
};

MarkdownComponent.defaultProps = {
  elementProps: {}
};

function MarkdownComponent(props) {
  const {className, style, elementProps} = props;

  return (
    <div className={className} style={style}>
      {/* no input given */}
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"passElementProps":true,"markdownItPlugins":[null]}\` for component example 0 renders as expected within React 1`] = `
Array [
  "propTypes",
  "defaultProps",
]
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"passElementProps":true,"markdownItPlugins":[null]}\` for component example 0 renders as expected within React 2`] = `
<div
  className={undefined}
  style={undefined}>
  <h1
    id="test-document">
    Test Document
  </h1>
  <p>
    [[toc]]
  </p>
  <h2
    id="basic-markdown-template">
    Basic Markdown Template
  </h2>
  <p>
    This is a basic Markdown template, with no interpolations going on.
  </p>
  <p>
    This should be
  </p>
  <ul>
    <li>
      easy and;
    </li>
    <li>
      predictable!
    </li>
  </ul>
  <h2
    id="heres-a-couple-of-hyperlinks">
    Here\'s a couple of hyperlinks
  </h2>
  <p>
    <a
      href="https://duckduckgo.com">
      https://duckduckgo.com
    </a>
     
    <a
      href="https://github.com">
      GitHub
    </a>
  </p>
  <h2
    id="heres-a-code-snippet-with-no-interpolations">
    Here\'s a code snippet with no interpolations
  </h2>
  <pre>
    <code
      className="language-bash">
      npm install -g yarn
      <br />
    </code>
  </pre>
  <h2
    id="heres-a-code-snippet-with-things-which-shouldnt-be-treated-as-interpolations">
    Here\'s a code snippet with things which shouldn\'t be treated as interpolations
  </h2>
  <pre>
    <code
      className="language-bash">
      <span
        className="hljs-keyword">
        function
      </span>
       
      <span
        className="hljs-function">
        <span
          className="hljs-title">
          rbenv
        </span>
      </span>
      () 
      {
      <br />
        
      RUBY=blah
      <br />
      }
      <br />
    </code>
  </pre>
  <h2
    id="heres-a-paragraph-with-a-simple-interpolation">
    Here\'s a paragraph with a simple interpolation
  </h2>
  <p>
    There are 
    1
     props being supplied to this component.
  </p>
  <h2
    id="heres-a-code-snippet-with-a-simple-interpolation">
    Here\'s a code snippet with a simple interpolation
  </h2>
  <pre>
    <code
      className="language-bash">
      <span
        className="hljs-keyword">
        function
      </span>
       
      <span
        className="hljs-function">
        <span
          className="hljs-title">
          rbenv
        </span>
      </span>
      () 
      {
      <br />
        
      RUBY=
      <br />
      }
      <br />
    </code>
  </pre>
  <h2
    id="heres-an-unhinted-code-snippet">
    Here\'s an unhinted code snippet
  </h2>
  <pre>
    <code>
      <span
        className="hljs-keyword">
        the
      </span>
       quick brown fox jumps over 
      <span
        className="hljs-keyword">
        the
      </span>
       lazy dog
      <br />
    </code>
  </pre>
  <h2
    id="heres-an-unhinted-snippet-with-no-discernible-language">
    Here\'s an unhinted snippet with no discernible language
  </h2>
  <pre>
    <code>
      )
      <span
        className="hljs-comment">
        ()
      </span>
      <span
        className="hljs-comment">
        (()
      </span>
      )
      <br />
    </code>
  </pre>
  <pre>
    <code
      className="language-bash">
      brew tap buildkite/buildkite
      <br />
      brew install --token=
      <span
        className="hljs-string">
        \'
        INSERT-YOUR-AGENT-TOKEN-HERE
        \'
      </span>
       buildkite-agent
      <br />
      <br />
      <span
        className="hljs-function">
        <span
          className="hljs-title">
          function
        </span>
      </span>
      () 
      {
      <br />
        
      ENV=
      <span
        className="hljs-string">
        \"foo_bar\"
      </span>
      <br />
      }
      <br />
    </code>
  </pre>
  <p>
    Let\'s also test interpolation inside other elements. 
    <code>
      foo bar
    </code>
  </p>
</div>
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"passElementProps":true,"markdownItPlugins":[null]}\` for component example 0 returns the expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.7.1
import React from \'react\';
import PropTypes from \'prop-types\';

MarkdownComponent.propTypes = {
  className: PropTypes.string,
  style: PropTypes.object,
  elementProps: PropTypes.object
};

MarkdownComponent.defaultProps = {
  elementProps: {}
};

function MarkdownComponent(props) {
  const {className, style, elementProps} = props;

  return (
    <div className={className} style={style}>
      <h1 {...elementProps[\'h1\']} id=\"test-document\">Test Document</h1>
      <p {...elementProps[\'p\']}>[[toc]]</p>
      <h2 {...elementProps[\'h2\']} id=\"basic-markdown-template\">Basic Markdown Template</h2>
      <p {...elementProps[\'p\']}>This is a basic Markdown template, with no interpolations going on.</p>
      <p {...elementProps[\'p\']}>This should be</p>
      <ul {...elementProps[\'ul\']}>
        <li {...elementProps[\'li\']}>easy and;</li>
        <li {...elementProps[\'li\']}>predictable!</li>
      </ul>
      <h2 {...elementProps[\'h2\']} id=\"heres-a-couple-of-hyperlinks\">Here\'s a couple of hyperlinks</h2>
      <p {...elementProps[\'p\']}><a {...elementProps[\'a\']} href=\"https://duckduckgo.com\">https://duckduckgo.com</a> <a {...elementProps[\'a\']} href=\"https://github.com\">GitHub</a></p>
      <h2 {...elementProps[\'h2\']} id=\"heres-a-code-snippet-with-no-interpolations\">Here\'s a code snippet with no interpolations</h2>
      <pre {...elementProps[\'pre\']}><code {...elementProps[\'code\']} className=\"language-bash\">npm install -g yarn<br {...elementProps[\'br\']} /></code></pre>
      <h2 {...elementProps[\'h2\']} id=\"heres-a-code-snippet-with-things-which-shouldnt-be-treated-as-interpolations\">Here\'s a code snippet with things which shouldn\'t be treated as interpolations</h2>
      <pre {...elementProps[\'pre\']}><code {...elementProps[\'code\']} className=\"language-bash\"><span {...elementProps[\'span\']} className=\"hljs-keyword\">function</span> <span {...elementProps[\'span\']} className=\"hljs-function\"><span {...elementProps[\'span\']} className=\"hljs-title\">rbenv</span></span>() {\"{\"}<br {...elementProps[\'br\']} />{\"  \"}RUBY=blah<br {...elementProps[\'br\']} />{\"}\"}<br {...elementProps[\'br\']} /></code></pre>
      <h2 {...elementProps[\'h2\']} id=\"heres-a-paragraph-with-a-simple-interpolation\">Here\'s a paragraph with a simple interpolation</h2>
      <p {...elementProps[\'p\']}>There are {Object.keys(props).length} props being supplied to this component.</p>
      <h2 {...elementProps[\'h2\']} id=\"heres-a-code-snippet-with-a-simple-interpolation\">Here\'s a code snippet with a simple interpolation</h2>
      <pre {...elementProps[\'pre\']}><code {...elementProps[\'code\']} className=\"language-bash\"><span {...elementProps[\'span\']} className=\"hljs-keyword\">function</span> <span {...elementProps[\'span\']} className=\"hljs-function\"><span {...elementProps[\'span\']} className=\"hljs-title\">rbenv</span></span>() {\"{\"}<br {...elementProps[\'br\']} />{\"  \"}RUBY={props.rubycontent}<br {...elementProps[\'br\']} />{\"}\"}<br {...elementProps[\'br\']} /></code></pre>
      <h2 {...elementProps[\'h2\']} id=\"heres-an-unhinted-code-snippet\">Here\'s an unhinted code snippet</h2>
      <pre {...elementProps[\'pre\']}><code {...elementProps[\'code\']}><span {...elementProps[\'span\']} className=\"hljs-keyword\">the</span> quick brown fox jumps over <span {...elementProps[\'span\']} className=\"hljs-keyword\">the</span> lazy dog<br {...elementProps[\'br\']} /></code></pre>
      <h2 {...elementProps[\'h2\']} id=\"heres-an-unhinted-snippet-with-no-discernible-language\">Here\'s an unhinted snippet with no discernible language</h2>
      <pre {...elementProps[\'pre\']}><code {...elementProps[\'code\']}>)<span {...elementProps[\'span\']} className=\"hljs-comment\">()</span><span {...elementProps[\'span\']} className=\"hljs-comment\">(()</span>)<br {...elementProps[\'br\']} /></code></pre>
      <pre {...elementProps[\'pre\']}><code {...elementProps[\'code\']} className=\"language-bash\">brew tap buildkite/buildkite<br {...elementProps[\'br\']} />brew install --token=<span {...elementProps[\'span\']} className=\"hljs-string\">\'{props.token || \'INSERT-YOUR-AGENT-TOKEN-HERE\'}\'</span> buildkite-agent<br {...elementProps[\'br\']} /><br {...elementProps[\'br\']} /><span {...elementProps[\'span\']} className=\"hljs-function\"><span {...elementProps[\'span\']} className=\"hljs-title\">function</span></span>() {\"{\"}<br {...elementProps[\'br\']} />{\"  \"}ENV=<span {...elementProps[\'span\']} className=\"hljs-string\">\"foo_bar\"</span><br {...elementProps[\'br\']} />{\"}\"}<br {...elementProps[\'br\']} /></code></pre>
      <p {...elementProps[\'p\']}>Let\'s also test interpolation inside other elements. <code {...elementProps[\'code\']}>{ \"foo bar\" }</code></p>
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"passElementProps":true,"markdownItPlugins":[null]}\` for component example 1 renders as expected within React 1`] = `
Array [
  "propTypes",
  "defaultProps",
  "title",
  "myArray",
  "anObject",
]
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"passElementProps":true,"markdownItPlugins":[null]}\` for component example 1 renders as expected within React 2`] = `
<div
  className={undefined}
  style={undefined}>
  <h1
    id="markdown-template-with-imports-static-attributes-and-interpolations">
    Markdown template with imports, static attributes and interpolations
  </h1>
  <p>
    This file includes some custom static attributes which should be reflected fine on the resultant object
  </p>
  <p>
    This is a 
    <em>
      Markdown Component
    </em>
     file. Here you can include JSX-style assignment expressions; this component was generated using version 
    0.7.1
     of 
    markdown-component-loader
    !
  </p>
  <p>
    We\'re importing foo, which is 
    bar
    .
  </p>
  <p>
    We\'re also adding a react component here: 
    <bar
      style={
        Object {
          "foo": "bar",
        }
      }
      url="https://github.com/ticky/markdown-component-loader/issues" />
  </p>
  <p>
    Another cool thing you can do is use JSX 
    <strong>
      directly
    </strong>
     - here’s an SVG element, used inline: 
    <svg
      style={
        Object {
          "display": "inline",
          "height": "1em",
        }
      }
      viewBox="0 0 304 290">
      <path
        d="M2,111 h300 l-242.7,176.3 92.7,-285.3 92.7,285.3 z"
        fill="none"
        stroke="currentColor"
        strokeWidth="16" />
    </svg>
    .
  </p>
</div>
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"passElementProps":true,"markdownItPlugins":[null]}\` for component example 1 returns the expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.7.1
import React from \'react\';
import PropTypes from \'prop-types\';
import foo from \'foo\';
import Bar from \'foo\';
import { bugs, name, version } from \'../package.json\';

MarkdownComponent.propTypes = {
  className: PropTypes.string,
  style: PropTypes.object,
  elementProps: PropTypes.object
};

MarkdownComponent.defaultProps = {
  elementProps: {}
};

MarkdownComponent[\'title\'] = \'a custom title\';

MarkdownComponent[\'myArray\'] = [
  \'foo\',
  \'bar\'
];

MarkdownComponent[\'anObject\'] = {
  \'foo\': \'bar\'
};

function MarkdownComponent(props) {
  const {className, style, elementProps} = props;

  return (
    <div className={className} style={style}>
      <h1 {...elementProps[\'h1\']} id=\"markdown-template-with-imports-static-attributes-and-interpolations\">Markdown template with imports, static attributes and interpolations</h1>
      <p {...elementProps[\'p\']}>This file includes some custom static attributes which should be reflected fine on the resultant object</p>
      <p {...elementProps[\'p\']}>This is a <em {...elementProps[\'em\']}>Markdown Component</em> file. Here you can include JSX-style assignment expressions; this component was generated using version { version } of { name }!</p>
      <p {...elementProps[\'p\']}>We\'re importing foo, which is {foo}.</p>
      <p {...elementProps[\'p\']}>We\'re also adding a react component here: {<Bar {...bugs} style={{ foo: \'bar\' }} />}</p>
      <p {...elementProps[\'p\']}>Another cool thing you can do is use JSX <strong {...elementProps[\'strong\']}>directly</strong> - here’s an SVG element, used inline: { <svg {...elementProps[\'svg\']} style={{ display: \'inline\', height: \'1em\' }} viewBox=\"0 0 304 290\"><path {...elementProps[\'path\']} fill=\"none\" stroke=\"currentColor\" strokeWidth=\"16\" d=\"M2,111 h300 l-242.7,176.3 92.7,-285.3 92.7,285.3 z\" /></svg> }.</p>
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"passElementProps":true,"markdownItPlugins":[null]}\` for component example 2 renders as expected within React 1`] = `
Array [
  "propTypes",
  "defaultProps",
]
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"passElementProps":true,"markdownItPlugins":[null]}\` for component example 2 renders as expected within React 2`] = `
<div
  className={undefined}
  style={undefined} />
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"passElementProps":true,"markdownItPlugins":[null]}\` for component example 2 returns the expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.7.1
import React from \'react\';
import PropTypes from \'prop-types\';

MarkdownComponent.propTypes = {
  className: PropTypes.string,
  style: PropTypes.object,
  elementProps: PropTypes.object
};

MarkdownComponent.defaultProps = {
  elementProps: {}
};

function MarkdownComponent(props) {
  const {className, style, elementProps} = props;

  return (
    <div className={className} style={style}>
      {/* no input given */}
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"passElementProps":true}\` for component example 0 renders as expected within React 1`] = `
Array [
  "propTypes",
  "defaultProps",
]
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"passElementProps":true}\` for component example 0 renders as expected within React 2`] = `
<div
  className={undefined}
  style={undefined}>
  <h1>
    Test Document
  </h1>
  <p>
    [[toc]]
  </p>
  <h2>
    Basic Markdown Template
  </h2>
  <p>
    This is a basic Markdown template, with no interpolations going on.
  </p>
  <p>
    This should be
  </p>
  <ul>
    <li>
      easy and;
    </li>
    <li>
      predictable!
    </li>
  </ul>
  <h2>
    Here\'s a couple of hyperlinks
  </h2>
  <p>
    <a
      href="https://duckduckgo.com">
      https://duckduckgo.com
    </a>
     
    <a
      href="https://github.com">
      GitHub
    </a>
  </p>
  <h2>
    Here\'s a code snippet with no interpolations
  </h2>
  <pre>
    <code
      className="language-bash">
      npm install -g yarn
      <br />
    </code>
  </pre>
  <h2>
    Here\'s a code snippet with things which shouldn\'t be treated as interpolations
  </h2>
  <pre>
    <code
      className="language-bash">
      <span
        className="hljs-keyword">
        function
      </span>
       
      <span
        className="hljs-function">
        <span
          className="hljs-title">
          rbenv
        </span>
      </span>
      () 
      {
      <br />
        
      RUBY=blah
      <br />
      }
      <br />
    </code>
  </pre>
  <h2>
    Here\'s a paragraph with a simple interpolation
  </h2>
  <p>
    There are 
    1
     props being supplied to this component.
  </p>
  <h2>
    Here\'s a code snippet with a simple interpolation
  </h2>
  <pre>
    <code
      className="language-bash">
      <span
        className="hljs-keyword">
        function
      </span>
       
      <span
        className="hljs-function">
        <span
          className="hljs-title">
          rbenv
        </span>
      </span>
      () 
      {
      <br />
        
      RUBY=
      <br />
      }
      <br />
    </code>
  </pre>
  <h2>
    Here\'s an unhinted code snippet
  </h2>
  <pre>
    <code>
      <span
        className="hljs-keyword">
        the
      </span>
       quick brown fox jumps over 
      <span
        className="hljs-keyword">
        the
      </span>
       lazy dog
      <br />
    </code>
  </pre>
  <h2>
    Here\'s an unhinted snippet with no discernible language
  </h2>
  <pre>
    <code>
      )
      <span
        className="hljs-comment">
        ()
      </span>
      <span
        className="hljs-comment">
        (()
      </span>
      )
      <br />
    </code>
  </pre>
  <pre>
    <code
      className="language-bash">
      brew tap buildkite/buildkite
      <br />
      brew install --token=
      <span
        className="hljs-string">
        \'
        INSERT-YOUR-AGENT-TOKEN-HERE
        \'
      </span>
       buildkite-agent
      <br />
      <br />
      <span
        className="hljs-function">
        <span
          className="hljs-title">
          function
        </span>
      </span>
      () 
      {
      <br />
        
      ENV=
      <span
        className="hljs-string">
        \"foo_bar\"
      </span>
      <br />
      }
      <br />
    </code>
  </pre>
  <p>
    Let\'s also test interpolation inside other elements. 
    <code>
      foo bar
    </code>
  </p>
</div>
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"passElementProps":true}\` for component example 0 returns the expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.7.1
import React from \'react\';
import PropTypes from \'prop-types\';

MarkdownComponent.propTypes = {
  className: PropTypes.string,
  style: PropTypes.object,
  elementProps: PropTypes.object
};

MarkdownComponent.defaultProps = {
  elementProps: {}
};

function MarkdownComponent(props) {
  const {className, style, elementProps} = props;

  return (
    <div className={className} style={style}>
      <h1 {...elementProps[\'h1\']}>Test Document</h1>
      <p {...elementProps[\'p\']}>[[toc]]</p>
      <h2 {...elementProps[\'h2\']}>Basic Markdown Template</h2>
      <p {...elementProps[\'p\']}>This is a basic Markdown template, with no interpolations going on.</p>
      <p {...elementProps[\'p\']}>This should be</p>
      <ul {...elementProps[\'ul\']}>
        <li {...elementProps[\'li\']}>easy and;</li>
        <li {...elementProps[\'li\']}>predictable!</li>
      </ul>
      <h2 {...elementProps[\'h2\']}>Here\'s a couple of hyperlinks</h2>
      <p {...elementProps[\'p\']}><a {...elementProps[\'a\']} href=\"https://duckduckgo.com\">https://duckduckgo.com</a> <a {...elementProps[\'a\']} href=\"https://github.com\">GitHub</a></p>
      <h2 {...elementProps[\'h2\']}>Here\'s a code snippet with no interpolations</h2>
      <pre {...elementProps[\'pre\']}><code {...elementProps[\'code\']} className=\"language-bash\">npm install -g yarn<br {...elementProps[\'br\']} /></code></pre>
      <h2 {...elementProps[\'h2\']}>Here\'s a code snippet with things which shouldn\'t be treated as interpolations</h2>
      <pre {...elementProps[\'pre\']}><code {...elementProps[\'code\']} className=\"language-bash\"><span {...elementProps[\'span\']} className=\"hljs-keyword\">function</span> <span {...elementProps[\'span\']} className=\"hljs-function\"><span {...elementProps[\'span\']} className=\"hljs-title\">rbenv</span></span>() {\"{\"}<br {...elementProps[\'br\']} />{\"  \"}RUBY=blah<br {...elementProps[\'br\']} />{\"}\"}<br {...elementProps[\'br\']} /></code></pre>
      <h2 {...elementProps[\'h2\']}>Here\'s a paragraph with a simple interpolation</h2>
      <p {...elementProps[\'p\']}>There are {Object.keys(props).length} props being supplied to this component.</p>
      <h2 {...elementProps[\'h2\']}>Here\'s a code snippet with a simple interpolation</h2>
      <pre {...elementProps[\'pre\']}><code {...elementProps[\'code\']} className=\"language-bash\"><span {...elementProps[\'span\']} className=\"hljs-keyword\">function</span> <span {...elementProps[\'span\']} className=\"hljs-function\"><span {...elementProps[\'span\']} className=\"hljs-title\">rbenv</span></span>() {\"{\"}<br {...elementProps[\'br\']} />{\"  \"}RUBY={props.rubycontent}<br {...elementProps[\'br\']} />{\"}\"}<br {...elementProps[\'br\']} /></code></pre>
      <h2 {...elementProps[\'h2\']}>Here\'s an unhinted code snippet</h2>
      <pre {...elementProps[\'pre\']}><code {...elementProps[\'code\']}><span {...elementProps[\'span\']} className=\"hljs-keyword\">the</span> quick brown fox jumps over <span {...elementProps[\'span\']} className=\"hljs-keyword\">the</span> lazy dog<br {...elementProps[\'br\']} /></code></pre>
      <h2 {...elementProps[\'h2\']}>Here\'s an unhinted snippet with no discernible language</h2>
      <pre {...elementProps[\'pre\']}><code {...elementProps[\'code\']}>)<span {...elementProps[\'span\']} className=\"hljs-comment\">()</span><span {...elementProps[\'span\']} className=\"hljs-comment\">(()</span>)<br {...elementProps[\'br\']} /></code></pre>
      <pre {...elementProps[\'pre\']}><code {...elementProps[\'code\']} className=\"language-bash\">brew tap buildkite/buildkite<br {...elementProps[\'br\']} />brew install --token=<span {...elementProps[\'span\']} className=\"hljs-string\">\'{props.token || \'INSERT-YOUR-AGENT-TOKEN-HERE\'}\'</span> buildkite-agent<br {...elementProps[\'br\']} /><br {...elementProps[\'br\']} /><span {...elementProps[\'span\']} className=\"hljs-function\"><span {...elementProps[\'span\']} className=\"hljs-title\">function</span></span>() {\"{\"}<br {...elementProps[\'br\']} />{\"  \"}ENV=<span {...elementProps[\'span\']} className=\"hljs-string\">\"foo_bar\"</span><br {...elementProps[\'br\']} />{\"}\"}<br {...elementProps[\'br\']} /></code></pre>
      <p {...elementProps[\'p\']}>Let\'s also test interpolation inside other elements. <code {...elementProps[\'code\']}>{ \"foo bar\" }</code></p>
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"passElementProps":true}\` for component example 1 renders as expected within React 1`] = `
Array [
  "propTypes",
  "defaultProps",
  "title",
  "myArray",
  "anObject",
]
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"passElementProps":true}\` for component example 1 renders as expected within React 2`] = `
<div
  className={undefined}
  style={undefined}>
  <h1>
    Markdown template with imports, static attributes and interpolations
  </h1>
  <p>
    This file includes some custom static attributes which should be reflected fine on the resultant object
  </p>
  <p>
    This is a 
    <em>
      Markdown Component
    </em>
     file. Here you can include JSX-style assignment expressions; this component was generated using version 
    0.7.1
     of 
    markdown-component-loader
    !
  </p>
  <p>
    We\'re importing foo, which is 
    bar
    .
  </p>
  <p>
    We\'re also adding a react component here: 
    <bar
      style={
        Object {
          "foo": "bar",
        }
      }
      url="https://github.com/ticky/markdown-component-loader/issues" />
  </p>
  <p>
    Another cool thing you can do is use JSX 
    <strong>
      directly
    </strong>
     - here’s an SVG element, used inline: 
    <svg
      style={
        Object {
          "display": "inline",
          "height": "1em",
        }
      }
      viewBox="0 0 304 290">
      <path
        d="M2,111 h300 l-242.7,176.3 92.7,-285.3 92.7,285.3 z"
        fill="none"
        stroke="currentColor"
        strokeWidth="16" />
    </svg>
    .
  </p>
</div>
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"passElementProps":true}\` for component example 1 returns the expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.7.1
import React from \'react\';
import PropTypes from \'prop-types\';
import foo from \'foo\';
import Bar from \'foo\';
import { bugs, name, version } from \'../package.json\';

MarkdownComponent.propTypes = {
  className: PropTypes.string,
  style: PropTypes.object,
  elementProps: PropTypes.object
};

MarkdownComponent.defaultProps = {
  elementProps: {}
};

MarkdownComponent[\'title\'] = \'a custom title\';

MarkdownComponent[\'myArray\'] = [
  \'foo\',
  \'bar\'
];

MarkdownComponent[\'anObject\'] = {
  \'foo\': \'bar\'
};

function MarkdownComponent(props) {
  const {className, style, elementProps} = props;

  return (
    <div className={className} style={style}>
      <h1 {...elementProps[\'h1\']}>Markdown template with imports, static attributes and interpolations</h1>
      <p {...elementProps[\'p\']}>This file includes some custom static attributes which should be reflected fine on the resultant object</p>
      <p {...elementProps[\'p\']}>This is a <em {...elementProps[\'em\']}>Markdown Component</em> file. Here you can include JSX-style assignment expressions; this component was generated using version { version } of { name }!</p>
      <p {...elementProps[\'p\']}>We\'re importing foo, which is {foo}.</p>
      <p {...elementProps[\'p\']}>We\'re also adding a react component here: {<Bar {...bugs} style={{ foo: \'bar\' }} />}</p>
      <p {...elementProps[\'p\']}>Another cool thing you can do is use JSX <strong {...elementProps[\'strong\']}>directly</strong> - here’s an SVG element, used inline: { <svg {...elementProps[\'svg\']} style={{ display: \'inline\', height: \'1em\' }} viewBox=\"0 0 304 290\"><path {...elementProps[\'path\']} fill=\"none\" stroke=\"currentColor\" strokeWidth=\"16\" d=\"M2,111 h300 l-242.7,176.3 92.7,-285.3 92.7,285.3 z\" /></svg> }.</p>
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"passElementProps":true}\` for component example 2 renders as expected within React 1`] = `
Array [
  "propTypes",
  "defaultProps",
]
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"passElementProps":true}\` for component example 2 renders as expected within React 2`] = `
<div
  className={undefined}
  style={undefined} />
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"passElementProps":true}\` for component example 2 returns the expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.7.1
import React from \'react\';
import PropTypes from \'prop-types\';

MarkdownComponent.propTypes = {
  className: PropTypes.string,
  style: PropTypes.object,
  elementProps: PropTypes.object
};

MarkdownComponent.defaultProps = {
  elementProps: {}
};

function MarkdownComponent(props) {
  const {className, style, elementProps} = props;

  return (
    <div className={className} style={style}>
      {/* no input given */}
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true}\` for component example 0 renders as expected within React 1`] = `
Array [
  "propTypes",
]
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true}\` for component example 0 renders as expected within React 2`] = `
<div
  className={undefined}
  style={undefined}>
  <h1>
    Test Document
  </h1>
  <p>
    [[toc]]
  </p>
  <h2>
    Basic Markdown Template
  </h2>
  <p>
    This is a basic Markdown template, with no interpolations going on.
  </p>
  <p>
    This should be
  </p>
  <ul>
    <li>
      easy and;
    </li>
    <li>
      predictable!
    </li>
  </ul>
  <h2>
    Here\'s a couple of hyperlinks
  </h2>
  <p>
    <a
      href="https://duckduckgo.com">
      https://duckduckgo.com
    </a>
     
    <a
      href="https://github.com">
      GitHub
    </a>
  </p>
  <h2>
    Here\'s a code snippet with no interpolations
  </h2>
  <pre>
    <code
      className="language-bash">
      npm install -g yarn
      <br />
    </code>
  </pre>
  <h2>
    Here\'s a code snippet with things which shouldn\'t be treated as interpolations
  </h2>
  <pre>
    <code
      className="language-bash">
      <span
        className="hljs-keyword">
        function
      </span>
       
      <span
        className="hljs-function">
        <span
          className="hljs-title">
          rbenv
        </span>
      </span>
      () 
      {
      <br />
        
      RUBY=blah
      <br />
      }
      <br />
    </code>
  </pre>
  <h2>
    Here\'s a paragraph with a simple interpolation
  </h2>
  <p>
    There are 
    0
     props being supplied to this component.
  </p>
  <h2>
    Here\'s a code snippet with a simple interpolation
  </h2>
  <pre>
    <code
      className="language-bash">
      <span
        className="hljs-keyword">
        function
      </span>
       
      <span
        className="hljs-function">
        <span
          className="hljs-title">
          rbenv
        </span>
      </span>
      () 
      {
      <br />
        
      RUBY=
      <br />
      }
      <br />
    </code>
  </pre>
  <h2>
    Here\'s an unhinted code snippet
  </h2>
  <pre>
    <code>
      <span
        className="hljs-keyword">
        the
      </span>
       quick brown fox jumps over 
      <span
        className="hljs-keyword">
        the
      </span>
       lazy dog
      <br />
    </code>
  </pre>
  <h2>
    Here\'s an unhinted snippet with no discernible language
  </h2>
  <pre>
    <code>
      )
      <span
        className="hljs-comment">
        ()
      </span>
      <span
        className="hljs-comment">
        (()
      </span>
      )
      <br />
    </code>
  </pre>
  <pre>
    <code
      className="language-bash">
      brew tap buildkite/buildkite
      <br />
      brew install --token=
      <span
        className="hljs-string">
        \'
        INSERT-YOUR-AGENT-TOKEN-HERE
        \'
      </span>
       buildkite-agent
      <br />
      <br />
      <span
        className="hljs-function">
        <span
          className="hljs-title">
          function
        </span>
      </span>
      () 
      {
      <br />
        
      ENV=
      <span
        className="hljs-string">
        \"foo_bar\"
      </span>
      <br />
      }
      <br />
    </code>
  </pre>
  <p>
    Let\'s also test interpolation inside other elements. 
    <code>
      foo bar
    </code>
  </p>
</div>
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true}\` for component example 0 returns the expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.7.1
import React from \'react\';
import PropTypes from \'prop-types\';

MarkdownComponent.propTypes = {
  className: PropTypes.string,
  style: PropTypes.object
};

function MarkdownComponent(props) {
  const {className, style} = props;

  return (
    <div className={className} style={style}>
      <h1>Test Document</h1>
      <p>[[toc]]</p>
      <h2>Basic Markdown Template</h2>
      <p>This is a basic Markdown template, with no interpolations going on.</p>
      <p>This should be</p>
      <ul>
        <li>easy and;</li>
        <li>predictable!</li>
      </ul>
      <h2>Here\'s a couple of hyperlinks</h2>
      <p><a href=\"https://duckduckgo.com\">https://duckduckgo.com</a> <a href=\"https://github.com\">GitHub</a></p>
      <h2>Here\'s a code snippet with no interpolations</h2>
      <pre><code className=\"language-bash\">npm install -g yarn<br /></code></pre>
      <h2>Here\'s a code snippet with things which shouldn\'t be treated as interpolations</h2>
      <pre><code className=\"language-bash\"><span className=\"hljs-keyword\">function</span> <span className=\"hljs-function\"><span className=\"hljs-title\">rbenv</span></span>() {\"{\"}<br />{\"  \"}RUBY=blah<br />{\"}\"}<br /></code></pre>
      <h2>Here\'s a paragraph with a simple interpolation</h2>
      <p>There are {Object.keys(props).length} props being supplied to this component.</p>
      <h2>Here\'s a code snippet with a simple interpolation</h2>
      <pre><code className=\"language-bash\"><span className=\"hljs-keyword\">function</span> <span className=\"hljs-function\"><span className=\"hljs-title\">rbenv</span></span>() {\"{\"}<br />{\"  \"}RUBY={props.rubycontent}<br />{\"}\"}<br /></code></pre>
      <h2>Here\'s an unhinted code snippet</h2>
      <pre><code><span className=\"hljs-keyword\">the</span> quick brown fox jumps over <span className=\"hljs-keyword\">the</span> lazy dog<br /></code></pre>
      <h2>Here\'s an unhinted snippet with no discernible language</h2>
      <pre><code>)<span className=\"hljs-comment\">()</span><span className=\"hljs-comment\">(()</span>)<br /></code></pre>
      <pre><code className=\"language-bash\">brew tap buildkite/buildkite<br />brew install --token=<span className=\"hljs-string\">\'{props.token || \'INSERT-YOUR-AGENT-TOKEN-HERE\'}\'</span> buildkite-agent<br /><br /><span className=\"hljs-function\"><span className=\"hljs-title\">function</span></span>() {\"{\"}<br />{\"  \"}ENV=<span className=\"hljs-string\">\"foo_bar\"</span><br />{\"}\"}<br /></code></pre>
      <p>Let\'s also test interpolation inside other elements. <code>{ \"foo bar\" }</code></p>
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true}\` for component example 1 renders as expected within React 1`] = `
Array [
  "propTypes",
  "title",
  "myArray",
  "anObject",
]
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true}\` for component example 1 renders as expected within React 2`] = `
<div
  className={undefined}
  style={undefined}>
  <h1>
    Markdown template with imports, static attributes and interpolations
  </h1>
  <p>
    This file includes some custom static attributes which should be reflected fine on the resultant object
  </p>
  <p>
    This is a 
    <em>
      Markdown Component
    </em>
     file. Here you can include JSX-style assignment expressions; this component was generated using version 
    0.7.1
     of 
    markdown-component-loader
    !
  </p>
  <p>
    We\'re importing foo, which is 
    bar
    .
  </p>
  <p>
    We\'re also adding a react component here: 
    <bar
      style={
        Object {
          "foo": "bar",
        }
      }
      url="https://github.com/ticky/markdown-component-loader/issues" />
  </p>
  <p>
    Another cool thing you can do is use JSX 
    <strong>
      directly
    </strong>
     - here’s an SVG element, used inline: 
    <svg
      style={
        Object {
          "display": "inline",
          "height": "1em",
        }
      }
      viewBox="0 0 304 290">
      <path
        d="M2,111 h300 l-242.7,176.3 92.7,-285.3 92.7,285.3 z"
        fill="none"
        stroke="currentColor"
        strokeWidth="16" />
    </svg>
    .
  </p>
</div>
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true}\` for component example 1 returns the expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.7.1
import React from \'react\';
import PropTypes from \'prop-types\';
import foo from \'foo\';
import Bar from \'foo\';
import { bugs, name, version } from \'../package.json\';

MarkdownComponent.propTypes = {
  className: PropTypes.string,
  style: PropTypes.object
};

MarkdownComponent[\'title\'] = \'a custom title\';

MarkdownComponent[\'myArray\'] = [
  \'foo\',
  \'bar\'
];

MarkdownComponent[\'anObject\'] = {
  \'foo\': \'bar\'
};

function MarkdownComponent(props) {
  const {className, style} = props;

  return (
    <div className={className} style={style}>
      <h1>Markdown template with imports, static attributes and interpolations</h1>
      <p>This file includes some custom static attributes which should be reflected fine on the resultant object</p>
      <p>This is a <em>Markdown Component</em> file. Here you can include JSX-style assignment expressions; this component was generated using version { version } of { name }!</p>
      <p>We\'re importing foo, which is {foo}.</p>
      <p>We\'re also adding a react component here: {<Bar {...bugs} style={{ foo: \'bar\' }} />}</p>
      <p>Another cool thing you can do is use JSX <strong>directly</strong> - here’s an SVG element, used inline: { <svg style={{ display: \'inline\', height: \'1em\' }} viewBox=\"0 0 304 290\"><path fill=\"none\" stroke=\"currentColor\" strokeWidth=\"16\" d=\"M2,111 h300 l-242.7,176.3 92.7,-285.3 92.7,285.3 z\" /></svg> }.</p>
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true}\` for component example 2 renders as expected within React 1`] = `
Array [
  "propTypes",
]
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true}\` for component example 2 renders as expected within React 2`] = `
<div
  className={undefined}
  style={undefined} />
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true}\` for component example 2 returns the expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.7.1
import React from \'react\';
import PropTypes from \'prop-types\';

MarkdownComponent.propTypes = {
  className: PropTypes.string,
  style: PropTypes.object
};

function MarkdownComponent(props) {
  const {className, style} = props;

  return (
    <div className={className} style={style}>
      {/* no input given */}
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a webpack config object of \`{"markdownItPlugins":"somenonsensevalue"}\` for component example 0 renders as expected within React 1`] = `
Array [
  "propTypes",
]
`;

exports[`Webpack loader with a webpack config object of \`{"markdownItPlugins":"somenonsensevalue"}\` for component example 0 renders as expected within React 2`] = `
<div
  className={undefined}
  style={undefined}>
  <h1>
    Test Document
  </h1>
  <p>
    [[toc]]
  </p>
  <h2>
    Basic Markdown Template
  </h2>
  <p>
    This is a basic Markdown template, with no interpolations going on.
  </p>
  <p>
    This should be
  </p>
  <ul>
    <li>
      easy and;
    </li>
    <li>
      predictable!
    </li>
  </ul>
  <h2>
    Here's a couple of hyperlinks
  </h2>
  <p>
    <a
      href="https://duckduckgo.com">
      https://duckduckgo.com
    </a>
     
    <a
      href="https://github.com">
      GitHub
    </a>
  </p>
  <h2>
    Here's a code snippet with no interpolations
  </h2>
  <pre>
    <code
      className="language-bash">
      npm install -g yarn
      <br />
    </code>
  </pre>
  <h2>
    Here's a code snippet with things which shouldn't be treated as interpolations
  </h2>
  <pre>
    <code
      className="language-bash">
      <span
        className="hljs-keyword">
        function
      </span>
       
      <span
        className="hljs-function">
        <span
          className="hljs-title">
          rbenv
        </span>
      </span>
      () 
      {
      <br />
        
      RUBY=blah
      <br />
      }
      <br />
    </code>
  </pre>
  <h2>
    Here's a paragraph with a simple interpolation
  </h2>
  <p>
    There are 
    0
     props being supplied to this component.
  </p>
  <h2>
    Here's a code snippet with a simple interpolation
  </h2>
  <pre>
    <code
      className="language-bash">
      <span
        className="hljs-keyword">
        function
      </span>
       
      <span
        className="hljs-function">
        <span
          className="hljs-title">
          rbenv
        </span>
      </span>
      () 
      {
      <br />
        
      RUBY=
      <br />
      }
      <br />
    </code>
  </pre>
  <h2>
    Here's an unhinted code snippet
  </h2>
  <pre>
    <code>
      <span
        className="hljs-keyword">
        the
      </span>
       quick brown fox jumps over 
      <span
        className="hljs-keyword">
        the
      </span>
       lazy dog
      <br />
    </code>
  </pre>
  <h2>
    Here's an unhinted snippet with no discernible language
  </h2>
  <pre>
    <code>
      )
      <span
        className="hljs-comment">
        ()
      </span>
      <span
        className="hljs-comment">
        (()
      </span>
      )
      <br />
    </code>
  </pre>
  <pre>
    <code
      className="language-bash">
      brew tap buildkite/buildkite
      <br />
      brew install --token=
      <span
        className="hljs-string">
        '
        INSERT-YOUR-AGENT-TOKEN-HERE
        '
      </span>
       buildkite-agent
      <br />
      <br />
      <span
        className="hljs-function">
        <span
          className="hljs-title">
          function
        </span>
      </span>
      () 
      {
      <br />
        
      ENV=
      <span
        className="hljs-string">
        "foo_bar"
      </span>
      <br />
      }
      <br />
    </code>
  </pre>
  <p>
    Let's also test interpolation inside other elements. 
    <code>
      foo bar
    </code>
  </p>
</div>
`;

exports[`Webpack loader with a webpack config object of \`{"markdownItPlugins":"somenonsensevalue"}\` for component example 0 returns the expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.7.1

MarkdownComponent.propTypes = {
  className: PropTypes.string,
  style: PropTypes.object
};

function MarkdownComponent(props) {
  const {className, style} = props;

  return (
    <div className={className} style={style}>
      <h1>Test Document</h1>
      <p>[[toc]]</p>
      <h2>Basic Markdown Template</h2>
      <p>This is a basic Markdown template, with no interpolations going on.</p>
      <p>This should be</p>
      <ul>
        <li>easy and;</li>
        <li>predictable!</li>
      </ul>
      <h2>Here\'s a couple of hyperlinks</h2>
      <p><a href=\"https://duckduckgo.com\">https://duckduckgo.com</a> <a href=\"https://github.com\">GitHub</a></p>
      <h2>Here\'s a code snippet with no interpolations</h2>
      <pre><code className=\"language-bash\">npm install -g yarn<br /></code></pre>
      <h2>Here\'s a code snippet with things which shouldn\'t be treated as interpolations</h2>
      <pre><code className=\"language-bash\"><span className=\"hljs-keyword\">function</span> <span className=\"hljs-function\"><span className=\"hljs-title\">rbenv</span></span>() {\"{\"}<br />{\"  \"}RUBY=blah<br />{\"}\"}<br /></code></pre>
      <h2>Here\'s a paragraph with a simple interpolation</h2>
      <p>There are {Object.keys(props).length} props being supplied to this component.</p>
      <h2>Here\'s a code snippet with a simple interpolation</h2>
      <pre><code className=\"language-bash\"><span className=\"hljs-keyword\">function</span> <span className=\"hljs-function\"><span className=\"hljs-title\">rbenv</span></span>() {\"{\"}<br />{\"  \"}RUBY={props.rubycontent}<br />{\"}\"}<br /></code></pre>
      <h2>Here\'s an unhinted code snippet</h2>
      <pre><code><span className=\"hljs-keyword\">the</span> quick brown fox jumps over <span className=\"hljs-keyword\">the</span> lazy dog<br /></code></pre>
      <h2>Here\'s an unhinted snippet with no discernible language</h2>
      <pre><code>)<span className=\"hljs-comment\">()</span><span className=\"hljs-comment\">(()</span>)<br /></code></pre>
      <pre><code className=\"language-bash\">brew tap buildkite/buildkite<br />brew install --token=<span className=\"hljs-string\">\'{props.token || \'INSERT-YOUR-AGENT-TOKEN-HERE\'}\'</span> buildkite-agent<br /><br /><span className=\"hljs-function\"><span className=\"hljs-title\">function</span></span>() {\"{\"}<br />{\"  \"}ENV=<span className=\"hljs-string\">\"foo_bar\"</span><br />{\"}\"}<br /></code></pre>
      <p>Let\'s also test interpolation inside other elements. <code>{ \"foo bar\" }</code></p>
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a webpack config object of \`{"markdownItPlugins":"somenonsensevalue"}\` for component example 1 renders as expected within React 1`] = `
Array [
  "propTypes",
  "title",
  "myArray",
  "anObject",
]
`;

exports[`Webpack loader with a webpack config object of \`{"markdownItPlugins":"somenonsensevalue"}\` for component example 1 renders as expected within React 2`] = `
<div
  className={undefined}
  style={undefined}>
  <h1>
    Markdown template with imports, static attributes and interpolations
  </h1>
  <p>
    This file includes some custom static attributes which should be reflected fine on the resultant object
  </p>
  <p>
    This is a 
    <em>
      Markdown Component
    </em>
     file. Here you can include JSX-style assignment expressions; this component was generated using version 
    0.7.1
     of 
    markdown-component-loader
    !
  </p>
  <p>
    We're importing foo, which is 
    bar
    .
  </p>
  <p>
    We're also adding a react component here: 
    <bar
      style={
        Object {
          "foo": "bar",
        }
      }
      url="https://github.com/ticky/markdown-component-loader/issues" />
  </p>
  <p>
    Another cool thing you can do is use JSX 
    <strong>
      directly
    </strong>
     - here’s an SVG element, used inline: 
    <svg
      style={
        Object {
          "display": "inline",
          "height": "1em",
        }
      }
      viewBox="0 0 304 290">
      <path
        d="M2,111 h300 l-242.7,176.3 92.7,-285.3 92.7,285.3 z"
        fill="none"
        stroke="currentColor"
        strokeWidth="16" />
    </svg>
    .
  </p>
</div>
`;

exports[`Webpack loader with a webpack config object of \`{"markdownItPlugins":"somenonsensevalue"}\` for component example 1 returns the expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.7.1
import foo from \'foo\';
import Bar from \'foo\';
import { bugs, name, version } from \'../package.json\';

MarkdownComponent.propTypes = {
  className: PropTypes.string,
  style: PropTypes.object
};

MarkdownComponent[\'title\'] = \'a custom title\';

MarkdownComponent[\'myArray\'] = [
  \'foo\',
  \'bar\'
];

MarkdownComponent[\'anObject\'] = {
  \'foo\': \'bar\'
};

function MarkdownComponent(props) {
  const {className, style} = props;

  return (
    <div className={className} style={style}>
      <h1>Markdown template with imports, static attributes and interpolations</h1>
      <p>This file includes some custom static attributes which should be reflected fine on the resultant object</p>
      <p>This is a <em>Markdown Component</em> file. Here you can include JSX-style assignment expressions; this component was generated using version { version } of { name }!</p>
      <p>We\'re importing foo, which is {foo}.</p>
      <p>We\'re also adding a react component here: {<Bar {...bugs} style={{ foo: \'bar\' }} />}</p>
      <p>Another cool thing you can do is use JSX <strong>directly</strong> - here’s an SVG element, used inline: { <svg style={{ display: \'inline\', height: \'1em\' }} viewBox=\"0 0 304 290\"><path fill=\"none\" stroke=\"currentColor\" strokeWidth=\"16\" d=\"M2,111 h300 l-242.7,176.3 92.7,-285.3 92.7,285.3 z\" /></svg> }.</p>
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a webpack config object of \`{"markdownItPlugins":"somenonsensevalue"}\` for component example 2 renders as expected within React 1`] = `
Array [
  "propTypes",
]
`;

exports[`Webpack loader with a webpack config object of \`{"markdownItPlugins":"somenonsensevalue"}\` for component example 2 renders as expected within React 2`] = `
<div
  className={undefined}
  style={undefined} />
`;

exports[`Webpack loader with a webpack config object of \`{"markdownItPlugins":"somenonsensevalue"}\` for component example 2 returns the expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.7.1

MarkdownComponent.propTypes = {
  className: PropTypes.string,
  style: PropTypes.object
};

function MarkdownComponent(props) {
  const {className, style} = props;

  return (
    <div className={className} style={style}>
      {/* no input given */}
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a webpack config object of \`{"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 0 renders as expected within React 1`] = `
Array [
  "propTypes",
]
`;

exports[`Webpack loader with a webpack config object of \`{"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 0 renders as expected within React 2`] = `
<div
  className={undefined}
  style={undefined}>
  <h1
    id="test-document">
    Test Document
  </h1>
  <p />
  <div
    className="my-container-class">
    <ul>
      <li>
        <a
          href="#test-document">
          Test Document
        </a>
        <ul>
          <li>
            <a
              href="#basic-markdown-template">
              Basic Markdown Template
            </a>
          </li>
          <li>
            <a
              href="#heres-a-couple-of-hyperlinks">
              Here's a couple of hyperlinks
            </a>
          </li>
          <li>
            <a
              href="#heres-a-code-snippet-with-no-interpolations">
              Here's a code snippet with no interpolations
            </a>
          </li>
          <li>
            <a
              href="#heres-a-code-snippet-with-things-which-shouldnt-be-treated-as-interpolations">
              Here's a code snippet with things which shouldn't be treated as interpolations
            </a>
          </li>
          <li>
            <a
              href="#heres-a-paragraph-with-a-simple-interpolation">
              Here's a paragraph with a simple interpolation
            </a>
          </li>
          <li>
            <a
              href="#heres-a-code-snippet-with-a-simple-interpolation">
              Here's a code snippet with a simple interpolation
            </a>
          </li>
          <li>
            <a
              href="#heres-an-unhinted-code-snippet">
              Here's an unhinted code snippet
            </a>
          </li>
          <li>
            <a
              href="#heres-an-unhinted-snippet-with-no-discernible-language">
              Here's an unhinted snippet with no discernible language
            </a>
          </li>
        </ul>
      </li>
    </ul>
  </div>
  <p />
  <h2
    id="basic-markdown-template">
    Basic Markdown Template
  </h2>
  <p>
    This is a basic Markdown template, with no interpolations going on.
  </p>
  <p>
    This should be
  </p>
  <ul>
    <li>
      easy and;
    </li>
    <li>
      predictable!
    </li>
  </ul>
  <h2
    id="heres-a-couple-of-hyperlinks">
    Here's a couple of hyperlinks
  </h2>
  <p>
    <a
      href="https://duckduckgo.com">
      https://duckduckgo.com
    </a>
     
    <a
      href="https://github.com">
      GitHub
    </a>
  </p>
  <h2
    id="heres-a-code-snippet-with-no-interpolations">
    Here's a code snippet with no interpolations
  </h2>
  <pre>
    <code
      className="language-bash">
      npm install -g yarn
      <br />
    </code>
  </pre>
  <h2
    id="heres-a-code-snippet-with-things-which-shouldnt-be-treated-as-interpolations">
    Here's a code snippet with things which shouldn't be treated as interpolations
  </h2>
  <pre>
    <code
      className="language-bash">
      <span
        className="hljs-keyword">
        function
      </span>
       
      <span
        className="hljs-function">
        <span
          className="hljs-title">
          rbenv
        </span>
      </span>
      () 
      {
      <br />
        
      RUBY=blah
      <br />
      }
      <br />
    </code>
  </pre>
  <h2
    id="heres-a-paragraph-with-a-simple-interpolation">
    Here's a paragraph with a simple interpolation
  </h2>
  <p>
    There are 
    0
     props being supplied to this component.
  </p>
  <h2
    id="heres-a-code-snippet-with-a-simple-interpolation">
    Here's a code snippet with a simple interpolation
  </h2>
  <pre>
    <code
      className="language-bash">
      <span
        className="hljs-keyword">
        function
      </span>
       
      <span
        className="hljs-function">
        <span
          className="hljs-title">
          rbenv
        </span>
      </span>
      () 
      {
      <br />
        
      RUBY=
      <br />
      }
      <br />
    </code>
  </pre>
  <h2
    id="heres-an-unhinted-code-snippet">
    Here's an unhinted code snippet
  </h2>
  <pre>
    <code>
      <span
        className="hljs-keyword">
        the
      </span>
       quick brown fox jumps over 
      <span
        className="hljs-keyword">
        the
      </span>
       lazy dog
      <br />
    </code>
  </pre>
  <h2
    id="heres-an-unhinted-snippet-with-no-discernible-language">
    Here's an unhinted snippet with no discernible language
  </h2>
  <pre>
    <code>
      )
      <span
        className="hljs-comment">
        ()
      </span>
      <span
        className="hljs-comment">
        (()
      </span>
      )
      <br />
    </code>
  </pre>
  <pre>
    <code
      className="language-bash">
      brew tap buildkite/buildkite
      <br />
      brew install --token=
      <span
        className="hljs-string">
        '
        INSERT-YOUR-AGENT-TOKEN-HERE
        '
      </span>
       buildkite-agent
      <br />
      <br />
      <span
        className="hljs-function">
        <span
          className="hljs-title">
          function
        </span>
      </span>
      () 
      {
      <br />
        
      ENV=
      <span
        className="hljs-string">
        "foo_bar"
      </span>
      <br />
      }
      <br />
    </code>
  </pre>
  <p>
    Let's also test interpolation inside other elements. 
    <code>
      foo bar
    </code>
  </p>
</div>
`;

exports[`Webpack loader with a webpack config object of \`{"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 0 returns the expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.7.1

MarkdownComponent.propTypes = {
  className: PropTypes.string,
  style: PropTypes.object
};

function MarkdownComponent(props) {
  const {className, style} = props;

  return (
    <div className={className} style={style}>
      <h1 id=\"test-document\">Test Document</h1>
      <p /><div className=\"my-container-class\"><ul><li><a href=\"#test-document\">Test Document</a><ul><li><a href=\"#basic-markdown-template\">Basic Markdown Template</a></li><li><a href=\"#heres-a-couple-of-hyperlinks\">Here\'s a couple of hyperlinks</a></li><li><a href=\"#heres-a-code-snippet-with-no-interpolations\">Here\'s a code snippet with no interpolations</a></li><li><a href=\"#heres-a-code-snippet-with-things-which-shouldnt-be-treated-as-interpolations\">Here\'s a code snippet with things which shouldn\'t be treated as interpolations</a></li><li><a href=\"#heres-a-paragraph-with-a-simple-interpolation\">Here\'s a paragraph with a simple interpolation</a></li><li><a href=\"#heres-a-code-snippet-with-a-simple-interpolation\">Here\'s a code snippet with a simple interpolation</a></li><li><a href=\"#heres-an-unhinted-code-snippet\">Here\'s an unhinted code snippet</a></li><li><a href=\"#heres-an-unhinted-snippet-with-no-discernible-language\">Here\'s an unhinted snippet with no discernible language</a></li></ul></li></ul></div><p />
      <h2 id=\"basic-markdown-template\">Basic Markdown Template</h2>
      <p>This is a basic Markdown template, with no interpolations going on.</p>
      <p>This should be</p>
      <ul>
        <li>easy and;</li>
        <li>predictable!</li>
      </ul>
      <h2 id=\"heres-a-couple-of-hyperlinks\">Here\'s a couple of hyperlinks</h2>
      <p><a href=\"https://duckduckgo.com\">https://duckduckgo.com</a> <a href=\"https://github.com\">GitHub</a></p>
      <h2 id=\"heres-a-code-snippet-with-no-interpolations\">Here\'s a code snippet with no interpolations</h2>
      <pre><code className=\"language-bash\">npm install -g yarn<br /></code></pre>
      <h2 id=\"heres-a-code-snippet-with-things-which-shouldnt-be-treated-as-interpolations\">Here\'s a code snippet with things which shouldn\'t be treated as interpolations</h2>
      <pre><code className=\"language-bash\"><span className=\"hljs-keyword\">function</span> <span className=\"hljs-function\"><span className=\"hljs-title\">rbenv</span></span>() {\"{\"}<br />{\"  \"}RUBY=blah<br />{\"}\"}<br /></code></pre>
      <h2 id=\"heres-a-paragraph-with-a-simple-interpolation\">Here\'s a paragraph with a simple interpolation</h2>
      <p>There are {Object.keys(props).length} props being supplied to this component.</p>
      <h2 id=\"heres-a-code-snippet-with-a-simple-interpolation\">Here\'s a code snippet with a simple interpolation</h2>
      <pre><code className=\"language-bash\"><span className=\"hljs-keyword\">function</span> <span className=\"hljs-function\"><span className=\"hljs-title\">rbenv</span></span>() {\"{\"}<br />{\"  \"}RUBY={props.rubycontent}<br />{\"}\"}<br /></code></pre>
      <h2 id=\"heres-an-unhinted-code-snippet\">Here\'s an unhinted code snippet</h2>
      <pre><code><span className=\"hljs-keyword\">the</span> quick brown fox jumps over <span className=\"hljs-keyword\">the</span> lazy dog<br /></code></pre>
      <h2 id=\"heres-an-unhinted-snippet-with-no-discernible-language\">Here\'s an unhinted snippet with no discernible language</h2>
      <pre><code>)<span className=\"hljs-comment\">()</span><span className=\"hljs-comment\">(()</span>)<br /></code></pre>
      <pre><code className=\"language-bash\">brew tap buildkite/buildkite<br />brew install --token=<span className=\"hljs-string\">\'{props.token || \'INSERT-YOUR-AGENT-TOKEN-HERE\'}\'</span> buildkite-agent<br /><br /><span className=\"hljs-function\"><span className=\"hljs-title\">function</span></span>() {\"{\"}<br />{\"  \"}ENV=<span className=\"hljs-string\">\"foo_bar\"</span><br />{\"}\"}<br /></code></pre>
      <p>Let\'s also test interpolation inside other elements. <code>{ \"foo bar\" }</code></p>
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a webpack config object of \`{"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 1 renders as expected within React 1`] = `
Array [
  "propTypes",
  "title",
  "myArray",
  "anObject",
]
`;

exports[`Webpack loader with a webpack config object of \`{"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 1 renders as expected within React 2`] = `
<div
  className={undefined}
  style={undefined}>
  <h1
    id="markdown-template-with-imports-static-attributes-and-interpolations">
    Markdown template with imports, static attributes and interpolations
  </h1>
  <p>
    This file includes some custom static attributes which should be reflected fine on the resultant object
  </p>
  <p>
    This is a 
    <em>
      Markdown Component
    </em>
     file. Here you can include JSX-style assignment expressions; this component was generated using version 
    0.7.1
     of 
    markdown-component-loader
    !
  </p>
  <p>
    We're importing foo, which is 
    bar
    .
  </p>
  <p>
    We're also adding a react component here: 
    <bar
      style={
        Object {
          "foo": "bar",
        }
      }
      url="https://github.com/ticky/markdown-component-loader/issues" />
  </p>
  <p>
    Another cool thing you can do is use JSX 
    <strong>
      directly
    </strong>
     - here’s an SVG element, used inline: 
    <svg
      style={
        Object {
          "display": "inline",
          "height": "1em",
        }
      }
      viewBox="0 0 304 290">
      <path
        d="M2,111 h300 l-242.7,176.3 92.7,-285.3 92.7,285.3 z"
        fill="none"
        stroke="currentColor"
        strokeWidth="16" />
    </svg>
    .
  </p>
</div>
`;

exports[`Webpack loader with a webpack config object of \`{"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 1 returns the expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.7.1
import foo from \'foo\';
import Bar from \'foo\';
import { bugs, name, version } from \'../package.json\';

MarkdownComponent.propTypes = {
  className: PropTypes.string,
  style: PropTypes.object
};

MarkdownComponent[\'title\'] = \'a custom title\';

MarkdownComponent[\'myArray\'] = [
  \'foo\',
  \'bar\'
];

MarkdownComponent[\'anObject\'] = {
  \'foo\': \'bar\'
};

function MarkdownComponent(props) {
  const {className, style} = props;

  return (
    <div className={className} style={style}>
      <h1 id=\"markdown-template-with-imports-static-attributes-and-interpolations\">Markdown template with imports, static attributes and interpolations</h1>
      <p>This file includes some custom static attributes which should be reflected fine on the resultant object</p>
      <p>This is a <em>Markdown Component</em> file. Here you can include JSX-style assignment expressions; this component was generated using version { version } of { name }!</p>
      <p>We\'re importing foo, which is {foo}.</p>
      <p>We\'re also adding a react component here: {<Bar {...bugs} style={{ foo: \'bar\' }} />}</p>
      <p>Another cool thing you can do is use JSX <strong>directly</strong> - here’s an SVG element, used inline: { <svg style={{ display: \'inline\', height: \'1em\' }} viewBox=\"0 0 304 290\"><path fill=\"none\" stroke=\"currentColor\" strokeWidth=\"16\" d=\"M2,111 h300 l-242.7,176.3 92.7,-285.3 92.7,285.3 z\" /></svg> }.</p>
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a webpack config object of \`{"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 2 renders as expected within React 1`] = `
Array [
  "propTypes",
]
`;

exports[`Webpack loader with a webpack config object of \`{"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 2 renders as expected within React 2`] = `
<div
  className={undefined}
  style={undefined} />
`;

exports[`Webpack loader with a webpack config object of \`{"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 2 returns the expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.7.1

MarkdownComponent.propTypes = {
  className: PropTypes.string,
  style: PropTypes.object
};

function MarkdownComponent(props) {
  const {className, style} = props;

  return (
    <div className={className} style={style}>
      {/* no input given */}
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a webpack config object of \`{"markdownItPlugins":[null]}\` for component example 0 renders as expected within React 1`] = `
Array [
  "propTypes",
]
`;

exports[`Webpack loader with a webpack config object of \`{"markdownItPlugins":[null]}\` for component example 0 renders as expected within React 2`] = `
<div
  className={undefined}
  style={undefined}>
  <h1
    id="test-document">
    Test Document
  </h1>
  <p>
    [[toc]]
  </p>
  <h2
    id="basic-markdown-template">
    Basic Markdown Template
  </h2>
  <p>
    This is a basic Markdown template, with no interpolations going on.
  </p>
  <p>
    This should be
  </p>
  <ul>
    <li>
      easy and;
    </li>
    <li>
      predictable!
    </li>
  </ul>
  <h2
    id="heres-a-couple-of-hyperlinks">
    Here's a couple of hyperlinks
  </h2>
  <p>
    <a
      href="https://duckduckgo.com">
      https://duckduckgo.com
    </a>
     
    <a
      href="https://github.com">
      GitHub
    </a>
  </p>
  <h2
    id="heres-a-code-snippet-with-no-interpolations">
    Here's a code snippet with no interpolations
  </h2>
  <pre>
    <code
      className="language-bash">
      npm install -g yarn
      <br />
    </code>
  </pre>
  <h2
    id="heres-a-code-snippet-with-things-which-shouldnt-be-treated-as-interpolations">
    Here's a code snippet with things which shouldn't be treated as interpolations
  </h2>
  <pre>
    <code
      className="language-bash">
      <span
        className="hljs-keyword">
        function
      </span>
       
      <span
        className="hljs-function">
        <span
          className="hljs-title">
          rbenv
        </span>
      </span>
      () 
      {
      <br />
        
      RUBY=blah
      <br />
      }
      <br />
    </code>
  </pre>
  <h2
    id="heres-a-paragraph-with-a-simple-interpolation">
    Here's a paragraph with a simple interpolation
  </h2>
  <p>
    There are 
    0
     props being supplied to this component.
  </p>
  <h2
    id="heres-a-code-snippet-with-a-simple-interpolation">
    Here's a code snippet with a simple interpolation
  </h2>
  <pre>
    <code
      className="language-bash">
      <span
        className="hljs-keyword">
        function
      </span>
       
      <span
        className="hljs-function">
        <span
          className="hljs-title">
          rbenv
        </span>
      </span>
      () 
      {
      <br />
        
      RUBY=
      <br />
      }
      <br />
    </code>
  </pre>
  <h2
    id="heres-an-unhinted-code-snippet">
    Here's an unhinted code snippet
  </h2>
  <pre>
    <code>
      <span
        className="hljs-keyword">
        the
      </span>
       quick brown fox jumps over 
      <span
        className="hljs-keyword">
        the
      </span>
       lazy dog
      <br />
    </code>
  </pre>
  <h2
    id="heres-an-unhinted-snippet-with-no-discernible-language">
    Here's an unhinted snippet with no discernible language
  </h2>
  <pre>
    <code>
      )
      <span
        className="hljs-comment">
        ()
      </span>
      <span
        className="hljs-comment">
        (()
      </span>
      )
      <br />
    </code>
  </pre>
  <pre>
    <code
      className="language-bash">
      brew tap buildkite/buildkite
      <br />
      brew install --token=
      <span
        className="hljs-string">
        '
        INSERT-YOUR-AGENT-TOKEN-HERE
        '
      </span>
       buildkite-agent
      <br />
      <br />
      <span
        className="hljs-function">
        <span
          className="hljs-title">
          function
        </span>
      </span>
      () 
      {
      <br />
        
      ENV=
      <span
        className="hljs-string">
        "foo_bar"
      </span>
      <br />
      }
      <br />
    </code>
  </pre>
  <p>
    Let's also test interpolation inside other elements. 
    <code>
      foo bar
    </code>
  </p>
</div>
`;

exports[`Webpack loader with a webpack config object of \`{"markdownItPlugins":[null]}\` for component example 0 returns the expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.7.1

MarkdownComponent.propTypes = {
  className: PropTypes.string,
  style: PropTypes.object
};

function MarkdownComponent(props) {
  const {className, style} = props;

  return (
    <div className={className} style={style}>
      <h1 id=\"test-document\">Test Document</h1>
      <p>[[toc]]</p>
      <h2 id=\"basic-markdown-template\">Basic Markdown Template</h2>
      <p>This is a basic Markdown template, with no interpolations going on.</p>
      <p>This should be</p>
      <ul>
        <li>easy and;</li>
        <li>predictable!</li>
      </ul>
      <h2 id=\"heres-a-couple-of-hyperlinks\">Here\'s a couple of hyperlinks</h2>
      <p><a href=\"https://duckduckgo.com\">https://duckduckgo.com</a> <a href=\"https://github.com\">GitHub</a></p>
      <h2 id=\"heres-a-code-snippet-with-no-interpolations\">Here\'s a code snippet with no interpolations</h2>
      <pre><code className=\"language-bash\">npm install -g yarn<br /></code></pre>
      <h2 id=\"heres-a-code-snippet-with-things-which-shouldnt-be-treated-as-interpolations\">Here\'s a code snippet with things which shouldn\'t be treated as interpolations</h2>
      <pre><code className=\"language-bash\"><span className=\"hljs-keyword\">function</span> <span className=\"hljs-function\"><span className=\"hljs-title\">rbenv</span></span>() {\"{\"}<br />{\"  \"}RUBY=blah<br />{\"}\"}<br /></code></pre>
      <h2 id=\"heres-a-paragraph-with-a-simple-interpolation\">Here\'s a paragraph with a simple interpolation</h2>
      <p>There are {Object.keys(props).length} props being supplied to this component.</p>
      <h2 id=\"heres-a-code-snippet-with-a-simple-interpolation\">Here\'s a code snippet with a simple interpolation</h2>
      <pre><code className=\"language-bash\"><span className=\"hljs-keyword\">function</span> <span className=\"hljs-function\"><span className=\"hljs-title\">rbenv</span></span>() {\"{\"}<br />{\"  \"}RUBY={props.rubycontent}<br />{\"}\"}<br /></code></pre>
      <h2 id=\"heres-an-unhinted-code-snippet\">Here\'s an unhinted code snippet</h2>
      <pre><code><span className=\"hljs-keyword\">the</span> quick brown fox jumps over <span className=\"hljs-keyword\">the</span> lazy dog<br /></code></pre>
      <h2 id=\"heres-an-unhinted-snippet-with-no-discernible-language\">Here\'s an unhinted snippet with no discernible language</h2>
      <pre><code>)<span className=\"hljs-comment\">()</span><span className=\"hljs-comment\">(()</span>)<br /></code></pre>
      <pre><code className=\"language-bash\">brew tap buildkite/buildkite<br />brew install --token=<span className=\"hljs-string\">\'{props.token || \'INSERT-YOUR-AGENT-TOKEN-HERE\'}\'</span> buildkite-agent<br /><br /><span className=\"hljs-function\"><span className=\"hljs-title\">function</span></span>() {\"{\"}<br />{\"  \"}ENV=<span className=\"hljs-string\">\"foo_bar\"</span><br />{\"}\"}<br /></code></pre>
      <p>Let\'s also test interpolation inside other elements. <code>{ \"foo bar\" }</code></p>
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a webpack config object of \`{"markdownItPlugins":[null]}\` for component example 1 renders as expected within React 1`] = `
Array [
  "propTypes",
  "title",
  "myArray",
  "anObject",
]
`;

exports[`Webpack loader with a webpack config object of \`{"markdownItPlugins":[null]}\` for component example 1 renders as expected within React 2`] = `
<div
  className={undefined}
  style={undefined}>
  <h1
    id="markdown-template-with-imports-static-attributes-and-interpolations">
    Markdown template with imports, static attributes and interpolations
  </h1>
  <p>
    This file includes some custom static attributes which should be reflected fine on the resultant object
  </p>
  <p>
    This is a 
    <em>
      Markdown Component
    </em>
     file. Here you can include JSX-style assignment expressions; this component was generated using version 
    0.7.1
     of 
    markdown-component-loader
    !
  </p>
  <p>
    We're importing foo, which is 
    bar
    .
  </p>
  <p>
    We're also adding a react component here: 
    <bar
      style={
        Object {
          "foo": "bar",
        }
      }
      url="https://github.com/ticky/markdown-component-loader/issues" />
  </p>
  <p>
    Another cool thing you can do is use JSX 
    <strong>
      directly
    </strong>
     - here’s an SVG element, used inline: 
    <svg
      style={
        Object {
          "display": "inline",
          "height": "1em",
        }
      }
      viewBox="0 0 304 290">
      <path
        d="M2,111 h300 l-242.7,176.3 92.7,-285.3 92.7,285.3 z"
        fill="none"
        stroke="currentColor"
        strokeWidth="16" />
    </svg>
    .
  </p>
</div>
`;

exports[`Webpack loader with a webpack config object of \`{"markdownItPlugins":[null]}\` for component example 1 returns the expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.7.1
import foo from \'foo\';
import Bar from \'foo\';
import { bugs, name, version } from \'../package.json\';

MarkdownComponent.propTypes = {
  className: PropTypes.string,
  style: PropTypes.object
};

MarkdownComponent[\'title\'] = \'a custom title\';

MarkdownComponent[\'myArray\'] = [
  \'foo\',
  \'bar\'
];

MarkdownComponent[\'anObject\'] = {
  \'foo\': \'bar\'
};

function MarkdownComponent(props) {
  const {className, style} = props;

  return (
    <div className={className} style={style}>
      <h1 id=\"markdown-template-with-imports-static-attributes-and-interpolations\">Markdown template with imports, static attributes and interpolations</h1>
      <p>This file includes some custom static attributes which should be reflected fine on the resultant object</p>
      <p>This is a <em>Markdown Component</em> file. Here you can include JSX-style assignment expressions; this component was generated using version { version } of { name }!</p>
      <p>We\'re importing foo, which is {foo}.</p>
      <p>We\'re also adding a react component here: {<Bar {...bugs} style={{ foo: \'bar\' }} />}</p>
      <p>Another cool thing you can do is use JSX <strong>directly</strong> - here’s an SVG element, used inline: { <svg style={{ display: \'inline\', height: \'1em\' }} viewBox=\"0 0 304 290\"><path fill=\"none\" stroke=\"currentColor\" strokeWidth=\"16\" d=\"M2,111 h300 l-242.7,176.3 92.7,-285.3 92.7,285.3 z\" /></svg> }.</p>
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a webpack config object of \`{"markdownItPlugins":[null]}\` for component example 2 renders as expected within React 1`] = `
Array [
  "propTypes",
]
`;

exports[`Webpack loader with a webpack config object of \`{"markdownItPlugins":[null]}\` for component example 2 renders as expected within React 2`] = `
<div
  className={undefined}
  style={undefined} />
`;

exports[`Webpack loader with a webpack config object of \`{"markdownItPlugins":[null]}\` for component example 2 returns the expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.7.1

MarkdownComponent.propTypes = {
  className: PropTypes.string,
  style: PropTypes.object
};

function MarkdownComponent(props) {
  const {className, style} = props;

  return (
    <div className={className} style={style}>
      {/* no input given */}
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a webpack config object of \`{"passElementProps":false,"markdownItPlugins":"somenonsensevalue"}\` for component example 0 renders as expected within React 1`] = `
Array [
  "propTypes",
]
`;

exports[`Webpack loader with a webpack config object of \`{"passElementProps":false,"markdownItPlugins":"somenonsensevalue"}\` for component example 0 renders as expected within React 2`] = `
<div
  className={undefined}
  style={undefined}>
  <h1>
    Test Document
  </h1>
  <p>
    [[toc]]
  </p>
  <h2>
    Basic Markdown Template
  </h2>
  <p>
    This is a basic Markdown template, with no interpolations going on.
  </p>
  <p>
    This should be
  </p>
  <ul>
    <li>
      easy and;
    </li>
    <li>
      predictable!
    </li>
  </ul>
  <h2>
    Here's a couple of hyperlinks
  </h2>
  <p>
    <a
      href="https://duckduckgo.com">
      https://duckduckgo.com
    </a>
     
    <a
      href="https://github.com">
      GitHub
    </a>
  </p>
  <h2>
    Here's a code snippet with no interpolations
  </h2>
  <pre>
    <code
      className="language-bash">
      npm install -g yarn
      <br />
    </code>
  </pre>
  <h2>
    Here's a code snippet with things which shouldn't be treated as interpolations
  </h2>
  <pre>
    <code
      className="language-bash">
      <span
        className="hljs-keyword">
        function
      </span>
       
      <span
        className="hljs-function">
        <span
          className="hljs-title">
          rbenv
        </span>
      </span>
      () 
      {
      <br />
        
      RUBY=blah
      <br />
      }
      <br />
    </code>
  </pre>
  <h2>
    Here's a paragraph with a simple interpolation
  </h2>
  <p>
    There are 
    0
     props being supplied to this component.
  </p>
  <h2>
    Here's a code snippet with a simple interpolation
  </h2>
  <pre>
    <code
      className="language-bash">
      <span
        className="hljs-keyword">
        function
      </span>
       
      <span
        className="hljs-function">
        <span
          className="hljs-title">
          rbenv
        </span>
      </span>
      () 
      {
      <br />
        
      RUBY=
      <br />
      }
      <br />
    </code>
  </pre>
  <h2>
    Here's an unhinted code snippet
  </h2>
  <pre>
    <code>
      <span
        className="hljs-keyword">
        the
      </span>
       quick brown fox jumps over 
      <span
        className="hljs-keyword">
        the
      </span>
       lazy dog
      <br />
    </code>
  </pre>
  <h2>
    Here's an unhinted snippet with no discernible language
  </h2>
  <pre>
    <code>
      )
      <span
        className="hljs-comment">
        ()
      </span>
      <span
        className="hljs-comment">
        (()
      </span>
      )
      <br />
    </code>
  </pre>
  <pre>
    <code
      className="language-bash">
      brew tap buildkite/buildkite
      <br />
      brew install --token=
      <span
        className="hljs-string">
        '
        INSERT-YOUR-AGENT-TOKEN-HERE
        '
      </span>
       buildkite-agent
      <br />
      <br />
      <span
        className="hljs-function">
        <span
          className="hljs-title">
          function
        </span>
      </span>
      () 
      {
      <br />
        
      ENV=
      <span
        className="hljs-string">
        "foo_bar"
      </span>
      <br />
      }
      <br />
    </code>
  </pre>
  <p>
    Let's also test interpolation inside other elements. 
    <code>
      foo bar
    </code>
  </p>
</div>
`;

exports[`Webpack loader with a webpack config object of \`{"passElementProps":false,"markdownItPlugins":"somenonsensevalue"}\` for component example 0 returns the expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.7.1

MarkdownComponent.propTypes = {
  className: PropTypes.string,
  style: PropTypes.object
};

function MarkdownComponent(props) {
  const {className, style} = props;

  return (
    <div className={className} style={style}>
      <h1>Test Document</h1>
      <p>[[toc]]</p>
      <h2>Basic Markdown Template</h2>
      <p>This is a basic Markdown template, with no interpolations going on.</p>
      <p>This should be</p>
      <ul>
        <li>easy and;</li>
        <li>predictable!</li>
      </ul>
      <h2>Here\'s a couple of hyperlinks</h2>
      <p><a href=\"https://duckduckgo.com\">https://duckduckgo.com</a> <a href=\"https://github.com\">GitHub</a></p>
      <h2>Here\'s a code snippet with no interpolations</h2>
      <pre><code className=\"language-bash\">npm install -g yarn<br /></code></pre>
      <h2>Here\'s a code snippet with things which shouldn\'t be treated as interpolations</h2>
      <pre><code className=\"language-bash\"><span className=\"hljs-keyword\">function</span> <span className=\"hljs-function\"><span className=\"hljs-title\">rbenv</span></span>() {\"{\"}<br />{\"  \"}RUBY=blah<br />{\"}\"}<br /></code></pre>
      <h2>Here\'s a paragraph with a simple interpolation</h2>
      <p>There are {Object.keys(props).length} props being supplied to this component.</p>
      <h2>Here\'s a code snippet with a simple interpolation</h2>
      <pre><code className=\"language-bash\"><span className=\"hljs-keyword\">function</span> <span className=\"hljs-function\"><span className=\"hljs-title\">rbenv</span></span>() {\"{\"}<br />{\"  \"}RUBY={props.rubycontent}<br />{\"}\"}<br /></code></pre>
      <h2>Here\'s an unhinted code snippet</h2>
      <pre><code><span className=\"hljs-keyword\">the</span> quick brown fox jumps over <span className=\"hljs-keyword\">the</span> lazy dog<br /></code></pre>
      <h2>Here\'s an unhinted snippet with no discernible language</h2>
      <pre><code>)<span className=\"hljs-comment\">()</span><span className=\"hljs-comment\">(()</span>)<br /></code></pre>
      <pre><code className=\"language-bash\">brew tap buildkite/buildkite<br />brew install --token=<span className=\"hljs-string\">\'{props.token || \'INSERT-YOUR-AGENT-TOKEN-HERE\'}\'</span> buildkite-agent<br /><br /><span className=\"hljs-function\"><span className=\"hljs-title\">function</span></span>() {\"{\"}<br />{\"  \"}ENV=<span className=\"hljs-string\">\"foo_bar\"</span><br />{\"}\"}<br /></code></pre>
      <p>Let\'s also test interpolation inside other elements. <code>{ \"foo bar\" }</code></p>
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a webpack config object of \`{"passElementProps":false,"markdownItPlugins":"somenonsensevalue"}\` for component example 1 renders as expected within React 1`] = `
Array [
  "propTypes",
  "title",
  "myArray",
  "anObject",
]
`;

exports[`Webpack loader with a webpack config object of \`{"passElementProps":false,"markdownItPlugins":"somenonsensevalue"}\` for component example 1 renders as expected within React 2`] = `
<div
  className={undefined}
  style={undefined}>
  <h1>
    Markdown template with imports, static attributes and interpolations
  </h1>
  <p>
    This file includes some custom static attributes which should be reflected fine on the resultant object
  </p>
  <p>
    This is a 
    <em>
      Markdown Component
    </em>
     file. Here you can include JSX-style assignment expressions; this component was generated using version 
    0.7.1
     of 
    markdown-component-loader
    !
  </p>
  <p>
    We're importing foo, which is 
    bar
    .
  </p>
  <p>
    We're also adding a react component here: 
    <bar
      style={
        Object {
          "foo": "bar",
        }
      }
      url="https://github.com/ticky/markdown-component-loader/issues" />
  </p>
  <p>
    Another cool thing you can do is use JSX 
    <strong>
      directly
    </strong>
     - here’s an SVG element, used inline: 
    <svg
      style={
        Object {
          "display": "inline",
          "height": "1em",
        }
      }
      viewBox="0 0 304 290">
      <path
        d="M2,111 h300 l-242.7,176.3 92.7,-285.3 92.7,285.3 z"
        fill="none"
        stroke="currentColor"
        strokeWidth="16" />
    </svg>
    .
  </p>
</div>
`;

exports[`Webpack loader with a webpack config object of \`{"passElementProps":false,"markdownItPlugins":"somenonsensevalue"}\` for component example 1 returns the expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.7.1
import foo from \'foo\';
import Bar from \'foo\';
import { bugs, name, version } from \'../package.json\';

MarkdownComponent.propTypes = {
  className: PropTypes.string,
  style: PropTypes.object
};

MarkdownComponent[\'title\'] = \'a custom title\';

MarkdownComponent[\'myArray\'] = [
  \'foo\',
  \'bar\'
];

MarkdownComponent[\'anObject\'] = {
  \'foo\': \'bar\'
};

function MarkdownComponent(props) {
  const {className, style} = props;

  return (
    <div className={className} style={style}>
      <h1>Markdown template with imports, static attributes and interpolations</h1>
      <p>This file includes some custom static attributes which should be reflected fine on the resultant object</p>
      <p>This is a <em>Markdown Component</em> file. Here you can include JSX-style assignment expressions; this component was generated using version { version } of { name }!</p>
      <p>We\'re importing foo, which is {foo}.</p>
      <p>We\'re also adding a react component here: {<Bar {...bugs} style={{ foo: \'bar\' }} />}</p>
      <p>Another cool thing you can do is use JSX <strong>directly</strong> - here’s an SVG element, used inline: { <svg style={{ display: \'inline\', height: \'1em\' }} viewBox=\"0 0 304 290\"><path fill=\"none\" stroke=\"currentColor\" strokeWidth=\"16\" d=\"M2,111 h300 l-242.7,176.3 92.7,-285.3 92.7,285.3 z\" /></svg> }.</p>
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a webpack config object of \`{"passElementProps":false,"markdownItPlugins":"somenonsensevalue"}\` for component example 2 renders as expected within React 1`] = `
Array [
  "propTypes",
]
`;

exports[`Webpack loader with a webpack config object of \`{"passElementProps":false,"markdownItPlugins":"somenonsensevalue"}\` for component example 2 renders as expected within React 2`] = `
<div
  className={undefined}
  style={undefined} />
`;

exports[`Webpack loader with a webpack config object of \`{"passElementProps":false,"markdownItPlugins":"somenonsensevalue"}\` for component example 2 returns the expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.7.1

MarkdownComponent.propTypes = {
  className: PropTypes.string,
  style: PropTypes.object
};

function MarkdownComponent(props) {
  const {className, style} = props;

  return (
    <div className={className} style={style}>
      {/* no input given */}
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a webpack config object of \`{"passElementProps":false,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 0 renders as expected within React 1`] = `
Array [
  "propTypes",
]
`;

exports[`Webpack loader with a webpack config object of \`{"passElementProps":false,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 0 renders as expected within React 2`] = `
<div
  className={undefined}
  style={undefined}>
  <h1
    id="test-document">
    Test Document
  </h1>
  <p />
  <div
    className="my-container-class">
    <ul>
      <li>
        <a
          href="#test-document">
          Test Document
        </a>
        <ul>
          <li>
            <a
              href="#basic-markdown-template">
              Basic Markdown Template
            </a>
          </li>
          <li>
            <a
              href="#heres-a-couple-of-hyperlinks">
              Here's a couple of hyperlinks
            </a>
          </li>
          <li>
            <a
              href="#heres-a-code-snippet-with-no-interpolations">
              Here's a code snippet with no interpolations
            </a>
          </li>
          <li>
            <a
              href="#heres-a-code-snippet-with-things-which-shouldnt-be-treated-as-interpolations">
              Here's a code snippet with things which shouldn't be treated as interpolations
            </a>
          </li>
          <li>
            <a
              href="#heres-a-paragraph-with-a-simple-interpolation">
              Here's a paragraph with a simple interpolation
            </a>
          </li>
          <li>
            <a
              href="#heres-a-code-snippet-with-a-simple-interpolation">
              Here's a code snippet with a simple interpolation
            </a>
          </li>
          <li>
            <a
              href="#heres-an-unhinted-code-snippet">
              Here's an unhinted code snippet
            </a>
          </li>
          <li>
            <a
              href="#heres-an-unhinted-snippet-with-no-discernible-language">
              Here's an unhinted snippet with no discernible language
            </a>
          </li>
        </ul>
      </li>
    </ul>
  </div>
  <p />
  <h2
    id="basic-markdown-template">
    Basic Markdown Template
  </h2>
  <p>
    This is a basic Markdown template, with no interpolations going on.
  </p>
  <p>
    This should be
  </p>
  <ul>
    <li>
      easy and;
    </li>
    <li>
      predictable!
    </li>
  </ul>
  <h2
    id="heres-a-couple-of-hyperlinks">
    Here's a couple of hyperlinks
  </h2>
  <p>
    <a
      href="https://duckduckgo.com">
      https://duckduckgo.com
    </a>
     
    <a
      href="https://github.com">
      GitHub
    </a>
  </p>
  <h2
    id="heres-a-code-snippet-with-no-interpolations">
    Here's a code snippet with no interpolations
  </h2>
  <pre>
    <code
      className="language-bash">
      npm install -g yarn
      <br />
    </code>
  </pre>
  <h2
    id="heres-a-code-snippet-with-things-which-shouldnt-be-treated-as-interpolations">
    Here's a code snippet with things which shouldn't be treated as interpolations
  </h2>
  <pre>
    <code
      className="language-bash">
      <span
        className="hljs-keyword">
        function
      </span>
       
      <span
        className="hljs-function">
        <span
          className="hljs-title">
          rbenv
        </span>
      </span>
      () 
      {
      <br />
        
      RUBY=blah
      <br />
      }
      <br />
    </code>
  </pre>
  <h2
    id="heres-a-paragraph-with-a-simple-interpolation">
    Here's a paragraph with a simple interpolation
  </h2>
  <p>
    There are 
    0
     props being supplied to this component.
  </p>
  <h2
    id="heres-a-code-snippet-with-a-simple-interpolation">
    Here's a code snippet with a simple interpolation
  </h2>
  <pre>
    <code
      className="language-bash">
      <span
        className="hljs-keyword">
        function
      </span>
       
      <span
        className="hljs-function">
        <span
          className="hljs-title">
          rbenv
        </span>
      </span>
      () 
      {
      <br />
        
      RUBY=
      <br />
      }
      <br />
    </code>
  </pre>
  <h2
    id="heres-an-unhinted-code-snippet">
    Here's an unhinted code snippet
  </h2>
  <pre>
    <code>
      <span
        className="hljs-keyword">
        the
      </span>
       quick brown fox jumps over 
      <span
        className="hljs-keyword">
        the
      </span>
       lazy dog
      <br />
    </code>
  </pre>
  <h2
    id="heres-an-unhinted-snippet-with-no-discernible-language">
    Here's an unhinted snippet with no discernible language
  </h2>
  <pre>
    <code>
      )
      <span
        className="hljs-comment">
        ()
      </span>
      <span
        className="hljs-comment">
        (()
      </span>
      )
      <br />
    </code>
  </pre>
  <pre>
    <code
      className="language-bash">
      brew tap buildkite/buildkite
      <br />
      brew install --token=
      <span
        className="hljs-string">
        '
        INSERT-YOUR-AGENT-TOKEN-HERE
        '
      </span>
       buildkite-agent
      <br />
      <br />
      <span
        className="hljs-function">
        <span
          className="hljs-title">
          function
        </span>
      </span>
      () 
      {
      <br />
        
      ENV=
      <span
        className="hljs-string">
        "foo_bar"
      </span>
      <br />
      }
      <br />
    </code>
  </pre>
  <p>
    Let's also test interpolation inside other elements. 
    <code>
      foo bar
    </code>
  </p>
</div>
`;

exports[`Webpack loader with a webpack config object of \`{"passElementProps":false,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 0 returns the expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.7.1

MarkdownComponent.propTypes = {
  className: PropTypes.string,
  style: PropTypes.object
};

function MarkdownComponent(props) {
  const {className, style} = props;

  return (
    <div className={className} style={style}>
      <h1 id=\"test-document\">Test Document</h1>
      <p /><div className=\"my-container-class\"><ul><li><a href=\"#test-document\">Test Document</a><ul><li><a href=\"#basic-markdown-template\">Basic Markdown Template</a></li><li><a href=\"#heres-a-couple-of-hyperlinks\">Here\'s a couple of hyperlinks</a></li><li><a href=\"#heres-a-code-snippet-with-no-interpolations\">Here\'s a code snippet with no interpolations</a></li><li><a href=\"#heres-a-code-snippet-with-things-which-shouldnt-be-treated-as-interpolations\">Here\'s a code snippet with things which shouldn\'t be treated as interpolations</a></li><li><a href=\"#heres-a-paragraph-with-a-simple-interpolation\">Here\'s a paragraph with a simple interpolation</a></li><li><a href=\"#heres-a-code-snippet-with-a-simple-interpolation\">Here\'s a code snippet with a simple interpolation</a></li><li><a href=\"#heres-an-unhinted-code-snippet\">Here\'s an unhinted code snippet</a></li><li><a href=\"#heres-an-unhinted-snippet-with-no-discernible-language\">Here\'s an unhinted snippet with no discernible language</a></li></ul></li></ul></div><p />
      <h2 id=\"basic-markdown-template\">Basic Markdown Template</h2>
      <p>This is a basic Markdown template, with no interpolations going on.</p>
      <p>This should be</p>
      <ul>
        <li>easy and;</li>
        <li>predictable!</li>
      </ul>
      <h2 id=\"heres-a-couple-of-hyperlinks\">Here\'s a couple of hyperlinks</h2>
      <p><a href=\"https://duckduckgo.com\">https://duckduckgo.com</a> <a href=\"https://github.com\">GitHub</a></p>
      <h2 id=\"heres-a-code-snippet-with-no-interpolations\">Here\'s a code snippet with no interpolations</h2>
      <pre><code className=\"language-bash\">npm install -g yarn<br /></code></pre>
      <h2 id=\"heres-a-code-snippet-with-things-which-shouldnt-be-treated-as-interpolations\">Here\'s a code snippet with things which shouldn\'t be treated as interpolations</h2>
      <pre><code className=\"language-bash\"><span className=\"hljs-keyword\">function</span> <span className=\"hljs-function\"><span className=\"hljs-title\">rbenv</span></span>() {\"{\"}<br />{\"  \"}RUBY=blah<br />{\"}\"}<br /></code></pre>
      <h2 id=\"heres-a-paragraph-with-a-simple-interpolation\">Here\'s a paragraph with a simple interpolation</h2>
      <p>There are {Object.keys(props).length} props being supplied to this component.</p>
      <h2 id=\"heres-a-code-snippet-with-a-simple-interpolation\">Here\'s a code snippet with a simple interpolation</h2>
      <pre><code className=\"language-bash\"><span className=\"hljs-keyword\">function</span> <span className=\"hljs-function\"><span className=\"hljs-title\">rbenv</span></span>() {\"{\"}<br />{\"  \"}RUBY={props.rubycontent}<br />{\"}\"}<br /></code></pre>
      <h2 id=\"heres-an-unhinted-code-snippet\">Here\'s an unhinted code snippet</h2>
      <pre><code><span className=\"hljs-keyword\">the</span> quick brown fox jumps over <span className=\"hljs-keyword\">the</span> lazy dog<br /></code></pre>
      <h2 id=\"heres-an-unhinted-snippet-with-no-discernible-language\">Here\'s an unhinted snippet with no discernible language</h2>
      <pre><code>)<span className=\"hljs-comment\">()</span><span className=\"hljs-comment\">(()</span>)<br /></code></pre>
      <pre><code className=\"language-bash\">brew tap buildkite/buildkite<br />brew install --token=<span className=\"hljs-string\">\'{props.token || \'INSERT-YOUR-AGENT-TOKEN-HERE\'}\'</span> buildkite-agent<br /><br /><span className=\"hljs-function\"><span className=\"hljs-title\">function</span></span>() {\"{\"}<br />{\"  \"}ENV=<span className=\"hljs-string\">\"foo_bar\"</span><br />{\"}\"}<br /></code></pre>
      <p>Let\'s also test interpolation inside other elements. <code>{ \"foo bar\" }</code></p>
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a webpack config object of \`{"passElementProps":false,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 1 renders as expected within React 1`] = `
Array [
  "propTypes",
  "title",
  "myArray",
  "anObject",
]
`;

exports[`Webpack loader with a webpack config object of \`{"passElementProps":false,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 1 renders as expected within React 2`] = `
<div
  className={undefined}
  style={undefined}>
  <h1
    id="markdown-template-with-imports-static-attributes-and-interpolations">
    Markdown template with imports, static attributes and interpolations
  </h1>
  <p>
    This file includes some custom static attributes which should be reflected fine on the resultant object
  </p>
  <p>
    This is a 
    <em>
      Markdown Component
    </em>
     file. Here you can include JSX-style assignment expressions; this component was generated using version 
    0.7.1
     of 
    markdown-component-loader
    !
  </p>
  <p>
    We're importing foo, which is 
    bar
    .
  </p>
  <p>
    We're also adding a react component here: 
    <bar
      style={
        Object {
          "foo": "bar",
        }
      }
      url="https://github.com/ticky/markdown-component-loader/issues" />
  </p>
  <p>
    Another cool thing you can do is use JSX 
    <strong>
      directly
    </strong>
     - here’s an SVG element, used inline: 
    <svg
      style={
        Object {
          "display": "inline",
          "height": "1em",
        }
      }
      viewBox="0 0 304 290">
      <path
        d="M2,111 h300 l-242.7,176.3 92.7,-285.3 92.7,285.3 z"
        fill="none"
        stroke="currentColor"
        strokeWidth="16" />
    </svg>
    .
  </p>
</div>
`;

exports[`Webpack loader with a webpack config object of \`{"passElementProps":false,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 1 returns the expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.7.1
import foo from \'foo\';
import Bar from \'foo\';
import { bugs, name, version } from \'../package.json\';

MarkdownComponent.propTypes = {
  className: PropTypes.string,
  style: PropTypes.object
};

MarkdownComponent[\'title\'] = \'a custom title\';

MarkdownComponent[\'myArray\'] = [
  \'foo\',
  \'bar\'
];

MarkdownComponent[\'anObject\'] = {
  \'foo\': \'bar\'
};

function MarkdownComponent(props) {
  const {className, style} = props;

  return (
    <div className={className} style={style}>
      <h1 id=\"markdown-template-with-imports-static-attributes-and-interpolations\">Markdown template with imports, static attributes and interpolations</h1>
      <p>This file includes some custom static attributes which should be reflected fine on the resultant object</p>
      <p>This is a <em>Markdown Component</em> file. Here you can include JSX-style assignment expressions; this component was generated using version { version } of { name }!</p>
      <p>We\'re importing foo, which is {foo}.</p>
      <p>We\'re also adding a react component here: {<Bar {...bugs} style={{ foo: \'bar\' }} />}</p>
      <p>Another cool thing you can do is use JSX <strong>directly</strong> - here’s an SVG element, used inline: { <svg style={{ display: \'inline\', height: \'1em\' }} viewBox=\"0 0 304 290\"><path fill=\"none\" stroke=\"currentColor\" strokeWidth=\"16\" d=\"M2,111 h300 l-242.7,176.3 92.7,-285.3 92.7,285.3 z\" /></svg> }.</p>
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a webpack config object of \`{"passElementProps":false,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 2 renders as expected within React 1`] = `
Array [
  "propTypes",
]
`;

exports[`Webpack loader with a webpack config object of \`{"passElementProps":false,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 2 renders as expected within React 2`] = `
<div
  className={undefined}
  style={undefined} />
`;

exports[`Webpack loader with a webpack config object of \`{"passElementProps":false,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 2 returns the expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.7.1

MarkdownComponent.propTypes = {
  className: PropTypes.string,
  style: PropTypes.object
};

function MarkdownComponent(props) {
  const {className, style} = props;

  return (
    <div className={className} style={style}>
      {/* no input given */}
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a webpack config object of \`{"passElementProps":false,"markdownItPlugins":[null]}\` for component example 0 renders as expected within React 1`] = `
Array [
  "propTypes",
]
`;

exports[`Webpack loader with a webpack config object of \`{"passElementProps":false,"markdownItPlugins":[null]}\` for component example 0 renders as expected within React 2`] = `
<div
  className={undefined}
  style={undefined}>
  <h1
    id="test-document">
    Test Document
  </h1>
  <p>
    [[toc]]
  </p>
  <h2
    id="basic-markdown-template">
    Basic Markdown Template
  </h2>
  <p>
    This is a basic Markdown template, with no interpolations going on.
  </p>
  <p>
    This should be
  </p>
  <ul>
    <li>
      easy and;
    </li>
    <li>
      predictable!
    </li>
  </ul>
  <h2
    id="heres-a-couple-of-hyperlinks">
    Here's a couple of hyperlinks
  </h2>
  <p>
    <a
      href="https://duckduckgo.com">
      https://duckduckgo.com
    </a>
     
    <a
      href="https://github.com">
      GitHub
    </a>
  </p>
  <h2
    id="heres-a-code-snippet-with-no-interpolations">
    Here's a code snippet with no interpolations
  </h2>
  <pre>
    <code
      className="language-bash">
      npm install -g yarn
      <br />
    </code>
  </pre>
  <h2
    id="heres-a-code-snippet-with-things-which-shouldnt-be-treated-as-interpolations">
    Here's a code snippet with things which shouldn't be treated as interpolations
  </h2>
  <pre>
    <code
      className="language-bash">
      <span
        className="hljs-keyword">
        function
      </span>
       
      <span
        className="hljs-function">
        <span
          className="hljs-title">
          rbenv
        </span>
      </span>
      () 
      {
      <br />
        
      RUBY=blah
      <br />
      }
      <br />
    </code>
  </pre>
  <h2
    id="heres-a-paragraph-with-a-simple-interpolation">
    Here's a paragraph with a simple interpolation
  </h2>
  <p>
    There are 
    0
     props being supplied to this component.
  </p>
  <h2
    id="heres-a-code-snippet-with-a-simple-interpolation">
    Here's a code snippet with a simple interpolation
  </h2>
  <pre>
    <code
      className="language-bash">
      <span
        className="hljs-keyword">
        function
      </span>
       
      <span
        className="hljs-function">
        <span
          className="hljs-title">
          rbenv
        </span>
      </span>
      () 
      {
      <br />
        
      RUBY=
      <br />
      }
      <br />
    </code>
  </pre>
  <h2
    id="heres-an-unhinted-code-snippet">
    Here's an unhinted code snippet
  </h2>
  <pre>
    <code>
      <span
        className="hljs-keyword">
        the
      </span>
       quick brown fox jumps over 
      <span
        className="hljs-keyword">
        the
      </span>
       lazy dog
      <br />
    </code>
  </pre>
  <h2
    id="heres-an-unhinted-snippet-with-no-discernible-language">
    Here's an unhinted snippet with no discernible language
  </h2>
  <pre>
    <code>
      )
      <span
        className="hljs-comment">
        ()
      </span>
      <span
        className="hljs-comment">
        (()
      </span>
      )
      <br />
    </code>
  </pre>
  <pre>
    <code
      className="language-bash">
      brew tap buildkite/buildkite
      <br />
      brew install --token=
      <span
        className="hljs-string">
        '
        INSERT-YOUR-AGENT-TOKEN-HERE
        '
      </span>
       buildkite-agent
      <br />
      <br />
      <span
        className="hljs-function">
        <span
          className="hljs-title">
          function
        </span>
      </span>
      () 
      {
      <br />
        
      ENV=
      <span
        className="hljs-string">
        "foo_bar"
      </span>
      <br />
      }
      <br />
    </code>
  </pre>
  <p>
    Let's also test interpolation inside other elements. 
    <code>
      foo bar
    </code>
  </p>
</div>
`;

exports[`Webpack loader with a webpack config object of \`{"passElementProps":false,"markdownItPlugins":[null]}\` for component example 0 returns the expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.7.1

MarkdownComponent.propTypes = {
  className: PropTypes.string,
  style: PropTypes.object
};

function MarkdownComponent(props) {
  const {className, style} = props;

  return (
    <div className={className} style={style}>
      <h1 id=\"test-document\">Test Document</h1>
      <p>[[toc]]</p>
      <h2 id=\"basic-markdown-template\">Basic Markdown Template</h2>
      <p>This is a basic Markdown template, with no interpolations going on.</p>
      <p>This should be</p>
      <ul>
        <li>easy and;</li>
        <li>predictable!</li>
      </ul>
      <h2 id=\"heres-a-couple-of-hyperlinks\">Here\'s a couple of hyperlinks</h2>
      <p><a href=\"https://duckduckgo.com\">https://duckduckgo.com</a> <a href=\"https://github.com\">GitHub</a></p>
      <h2 id=\"heres-a-code-snippet-with-no-interpolations\">Here\'s a code snippet with no interpolations</h2>
      <pre><code className=\"language-bash\">npm install -g yarn<br /></code></pre>
      <h2 id=\"heres-a-code-snippet-with-things-which-shouldnt-be-treated-as-interpolations\">Here\'s a code snippet with things which shouldn\'t be treated as interpolations</h2>
      <pre><code className=\"language-bash\"><span className=\"hljs-keyword\">function</span> <span className=\"hljs-function\"><span className=\"hljs-title\">rbenv</span></span>() {\"{\"}<br />{\"  \"}RUBY=blah<br />{\"}\"}<br /></code></pre>
      <h2 id=\"heres-a-paragraph-with-a-simple-interpolation\">Here\'s a paragraph with a simple interpolation</h2>
      <p>There are {Object.keys(props).length} props being supplied to this component.</p>
      <h2 id=\"heres-a-code-snippet-with-a-simple-interpolation\">Here\'s a code snippet with a simple interpolation</h2>
      <pre><code className=\"language-bash\"><span className=\"hljs-keyword\">function</span> <span className=\"hljs-function\"><span className=\"hljs-title\">rbenv</span></span>() {\"{\"}<br />{\"  \"}RUBY={props.rubycontent}<br />{\"}\"}<br /></code></pre>
      <h2 id=\"heres-an-unhinted-code-snippet\">Here\'s an unhinted code snippet</h2>
      <pre><code><span className=\"hljs-keyword\">the</span> quick brown fox jumps over <span className=\"hljs-keyword\">the</span> lazy dog<br /></code></pre>
      <h2 id=\"heres-an-unhinted-snippet-with-no-discernible-language\">Here\'s an unhinted snippet with no discernible language</h2>
      <pre><code>)<span className=\"hljs-comment\">()</span><span className=\"hljs-comment\">(()</span>)<br /></code></pre>
      <pre><code className=\"language-bash\">brew tap buildkite/buildkite<br />brew install --token=<span className=\"hljs-string\">\'{props.token || \'INSERT-YOUR-AGENT-TOKEN-HERE\'}\'</span> buildkite-agent<br /><br /><span className=\"hljs-function\"><span className=\"hljs-title\">function</span></span>() {\"{\"}<br />{\"  \"}ENV=<span className=\"hljs-string\">\"foo_bar\"</span><br />{\"}\"}<br /></code></pre>
      <p>Let\'s also test interpolation inside other elements. <code>{ \"foo bar\" }</code></p>
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a webpack config object of \`{"passElementProps":false,"markdownItPlugins":[null]}\` for component example 1 renders as expected within React 1`] = `
Array [
  "propTypes",
  "title",
  "myArray",
  "anObject",
]
`;

exports[`Webpack loader with a webpack config object of \`{"passElementProps":false,"markdownItPlugins":[null]}\` for component example 1 renders as expected within React 2`] = `
<div
  className={undefined}
  style={undefined}>
  <h1
    id="markdown-template-with-imports-static-attributes-and-interpolations">
    Markdown template with imports, static attributes and interpolations
  </h1>
  <p>
    This file includes some custom static attributes which should be reflected fine on the resultant object
  </p>
  <p>
    This is a 
    <em>
      Markdown Component
    </em>
     file. Here you can include JSX-style assignment expressions; this component was generated using version 
    0.7.1
     of 
    markdown-component-loader
    !
  </p>
  <p>
    We're importing foo, which is 
    bar
    .
  </p>
  <p>
    We're also adding a react component here: 
    <bar
      style={
        Object {
          "foo": "bar",
        }
      }
      url="https://github.com/ticky/markdown-component-loader/issues" />
  </p>
  <p>
    Another cool thing you can do is use JSX 
    <strong>
      directly
    </strong>
     - here’s an SVG element, used inline: 
    <svg
      style={
        Object {
          "display": "inline",
          "height": "1em",
        }
      }
      viewBox="0 0 304 290">
      <path
        d="M2,111 h300 l-242.7,176.3 92.7,-285.3 92.7,285.3 z"
        fill="none"
        stroke="currentColor"
        strokeWidth="16" />
    </svg>
    .
  </p>
</div>
`;

exports[`Webpack loader with a webpack config object of \`{"passElementProps":false,"markdownItPlugins":[null]}\` for component example 1 returns the expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.7.1
import foo from \'foo\';
import Bar from \'foo\';
import { bugs, name, version } from \'../package.json\';

MarkdownComponent.propTypes = {
  className: PropTypes.string,
  style: PropTypes.object
};

MarkdownComponent[\'title\'] = \'a custom title\';

MarkdownComponent[\'myArray\'] = [
  \'foo\',
  \'bar\'
];

MarkdownComponent[\'anObject\'] = {
  \'foo\': \'bar\'
};

function MarkdownComponent(props) {
  const {className, style} = props;

  return (
    <div className={className} style={style}>
      <h1 id=\"markdown-template-with-imports-static-attributes-and-interpolations\">Markdown template with imports, static attributes and interpolations</h1>
      <p>This file includes some custom static attributes which should be reflected fine on the resultant object</p>
      <p>This is a <em>Markdown Component</em> file. Here you can include JSX-style assignment expressions; this component was generated using version { version } of { name }!</p>
      <p>We\'re importing foo, which is {foo}.</p>
      <p>We\'re also adding a react component here: {<Bar {...bugs} style={{ foo: \'bar\' }} />}</p>
      <p>Another cool thing you can do is use JSX <strong>directly</strong> - here’s an SVG element, used inline: { <svg style={{ display: \'inline\', height: \'1em\' }} viewBox=\"0 0 304 290\"><path fill=\"none\" stroke=\"currentColor\" strokeWidth=\"16\" d=\"M2,111 h300 l-242.7,176.3 92.7,-285.3 92.7,285.3 z\" /></svg> }.</p>
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a webpack config object of \`{"passElementProps":false,"markdownItPlugins":[null]}\` for component example 2 renders as expected within React 1`] = `
Array [
  "propTypes",
]
`;

exports[`Webpack loader with a webpack config object of \`{"passElementProps":false,"markdownItPlugins":[null]}\` for component example 2 renders as expected within React 2`] = `
<div
  className={undefined}
  style={undefined} />
`;

exports[`Webpack loader with a webpack config object of \`{"passElementProps":false,"markdownItPlugins":[null]}\` for component example 2 returns the expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.7.1

MarkdownComponent.propTypes = {
  className: PropTypes.string,
  style: PropTypes.object
};

function MarkdownComponent(props) {
  const {className, style} = props;

  return (
    <div className={className} style={style}>
      {/* no input given */}
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a webpack config object of \`{"passElementProps":false}\` for component example 0 renders as expected within React 1`] = `
Array [
  "propTypes",
]
`;

exports[`Webpack loader with a webpack config object of \`{"passElementProps":false}\` for component example 0 renders as expected within React 2`] = `
<div
  className={undefined}
  style={undefined}>
  <h1>
    Test Document
  </h1>
  <p>
    [[toc]]
  </p>
  <h2>
    Basic Markdown Template
  </h2>
  <p>
    This is a basic Markdown template, with no interpolations going on.
  </p>
  <p>
    This should be
  </p>
  <ul>
    <li>
      easy and;
    </li>
    <li>
      predictable!
    </li>
  </ul>
  <h2>
    Here's a couple of hyperlinks
  </h2>
  <p>
    <a
      href="https://duckduckgo.com">
      https://duckduckgo.com
    </a>
     
    <a
      href="https://github.com">
      GitHub
    </a>
  </p>
  <h2>
    Here's a code snippet with no interpolations
  </h2>
  <pre>
    <code
      className="language-bash">
      npm install -g yarn
      <br />
    </code>
  </pre>
  <h2>
    Here's a code snippet with things which shouldn't be treated as interpolations
  </h2>
  <pre>
    <code
      className="language-bash">
      <span
        className="hljs-keyword">
        function
      </span>
       
      <span
        className="hljs-function">
        <span
          className="hljs-title">
          rbenv
        </span>
      </span>
      () 
      {
      <br />
        
      RUBY=blah
      <br />
      }
      <br />
    </code>
  </pre>
  <h2>
    Here's a paragraph with a simple interpolation
  </h2>
  <p>
    There are 
    0
     props being supplied to this component.
  </p>
  <h2>
    Here's a code snippet with a simple interpolation
  </h2>
  <pre>
    <code
      className="language-bash">
      <span
        className="hljs-keyword">
        function
      </span>
       
      <span
        className="hljs-function">
        <span
          className="hljs-title">
          rbenv
        </span>
      </span>
      () 
      {
      <br />
        
      RUBY=
      <br />
      }
      <br />
    </code>
  </pre>
  <h2>
    Here's an unhinted code snippet
  </h2>
  <pre>
    <code>
      <span
        className="hljs-keyword">
        the
      </span>
       quick brown fox jumps over 
      <span
        className="hljs-keyword">
        the
      </span>
       lazy dog
      <br />
    </code>
  </pre>
  <h2>
    Here's an unhinted snippet with no discernible language
  </h2>
  <pre>
    <code>
      )
      <span
        className="hljs-comment">
        ()
      </span>
      <span
        className="hljs-comment">
        (()
      </span>
      )
      <br />
    </code>
  </pre>
  <pre>
    <code
      className="language-bash">
      brew tap buildkite/buildkite
      <br />
      brew install --token=
      <span
        className="hljs-string">
        '
        INSERT-YOUR-AGENT-TOKEN-HERE
        '
      </span>
       buildkite-agent
      <br />
      <br />
      <span
        className="hljs-function">
        <span
          className="hljs-title">
          function
        </span>
      </span>
      () 
      {
      <br />
        
      ENV=
      <span
        className="hljs-string">
        "foo_bar"
      </span>
      <br />
      }
      <br />
    </code>
  </pre>
  <p>
    Let's also test interpolation inside other elements. 
    <code>
      foo bar
    </code>
  </p>
</div>
`;

exports[`Webpack loader with a webpack config object of \`{"passElementProps":false}\` for component example 0 returns the expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.7.1

MarkdownComponent.propTypes = {
  className: PropTypes.string,
  style: PropTypes.object
};

function MarkdownComponent(props) {
  const {className, style} = props;

  return (
    <div className={className} style={style}>
      <h1>Test Document</h1>
      <p>[[toc]]</p>
      <h2>Basic Markdown Template</h2>
      <p>This is a basic Markdown template, with no interpolations going on.</p>
      <p>This should be</p>
      <ul>
        <li>easy and;</li>
        <li>predictable!</li>
      </ul>
      <h2>Here\'s a couple of hyperlinks</h2>
      <p><a href=\"https://duckduckgo.com\">https://duckduckgo.com</a> <a href=\"https://github.com\">GitHub</a></p>
      <h2>Here\'s a code snippet with no interpolations</h2>
      <pre><code className=\"language-bash\">npm install -g yarn<br /></code></pre>
      <h2>Here\'s a code snippet with things which shouldn\'t be treated as interpolations</h2>
      <pre><code className=\"language-bash\"><span className=\"hljs-keyword\">function</span> <span className=\"hljs-function\"><span className=\"hljs-title\">rbenv</span></span>() {\"{\"}<br />{\"  \"}RUBY=blah<br />{\"}\"}<br /></code></pre>
      <h2>Here\'s a paragraph with a simple interpolation</h2>
      <p>There are {Object.keys(props).length} props being supplied to this component.</p>
      <h2>Here\'s a code snippet with a simple interpolation</h2>
      <pre><code className=\"language-bash\"><span className=\"hljs-keyword\">function</span> <span className=\"hljs-function\"><span className=\"hljs-title\">rbenv</span></span>() {\"{\"}<br />{\"  \"}RUBY={props.rubycontent}<br />{\"}\"}<br /></code></pre>
      <h2>Here\'s an unhinted code snippet</h2>
      <pre><code><span className=\"hljs-keyword\">the</span> quick brown fox jumps over <span className=\"hljs-keyword\">the</span> lazy dog<br /></code></pre>
      <h2>Here\'s an unhinted snippet with no discernible language</h2>
      <pre><code>)<span className=\"hljs-comment\">()</span><span className=\"hljs-comment\">(()</span>)<br /></code></pre>
      <pre><code className=\"language-bash\">brew tap buildkite/buildkite<br />brew install --token=<span className=\"hljs-string\">\'{props.token || \'INSERT-YOUR-AGENT-TOKEN-HERE\'}\'</span> buildkite-agent<br /><br /><span className=\"hljs-function\"><span className=\"hljs-title\">function</span></span>() {\"{\"}<br />{\"  \"}ENV=<span className=\"hljs-string\">\"foo_bar\"</span><br />{\"}\"}<br /></code></pre>
      <p>Let\'s also test interpolation inside other elements. <code>{ \"foo bar\" }</code></p>
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a webpack config object of \`{"passElementProps":false}\` for component example 1 renders as expected within React 1`] = `
Array [
  "propTypes",
  "title",
  "myArray",
  "anObject",
]
`;

exports[`Webpack loader with a webpack config object of \`{"passElementProps":false}\` for component example 1 renders as expected within React 2`] = `
<div
  className={undefined}
  style={undefined}>
  <h1>
    Markdown template with imports, static attributes and interpolations
  </h1>
  <p>
    This file includes some custom static attributes which should be reflected fine on the resultant object
  </p>
  <p>
    This is a 
    <em>
      Markdown Component
    </em>
     file. Here you can include JSX-style assignment expressions; this component was generated using version 
    0.7.1
     of 
    markdown-component-loader
    !
  </p>
  <p>
    We're importing foo, which is 
    bar
    .
  </p>
  <p>
    We're also adding a react component here: 
    <bar
      style={
        Object {
          "foo": "bar",
        }
      }
      url="https://github.com/ticky/markdown-component-loader/issues" />
  </p>
  <p>
    Another cool thing you can do is use JSX 
    <strong>
      directly
    </strong>
     - here’s an SVG element, used inline: 
    <svg
      style={
        Object {
          "display": "inline",
          "height": "1em",
        }
      }
      viewBox="0 0 304 290">
      <path
        d="M2,111 h300 l-242.7,176.3 92.7,-285.3 92.7,285.3 z"
        fill="none"
        stroke="currentColor"
        strokeWidth="16" />
    </svg>
    .
  </p>
</div>
`;

exports[`Webpack loader with a webpack config object of \`{"passElementProps":false}\` for component example 1 returns the expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.7.1
import foo from \'foo\';
import Bar from \'foo\';
import { bugs, name, version } from \'../package.json\';

MarkdownComponent.propTypes = {
  className: PropTypes.string,
  style: PropTypes.object
};

MarkdownComponent[\'title\'] = \'a custom title\';

MarkdownComponent[\'myArray\'] = [
  \'foo\',
  \'bar\'
];

MarkdownComponent[\'anObject\'] = {
  \'foo\': \'bar\'
};

function MarkdownComponent(props) {
  const {className, style} = props;

  return (
    <div className={className} style={style}>
      <h1>Markdown template with imports, static attributes and interpolations</h1>
      <p>This file includes some custom static attributes which should be reflected fine on the resultant object</p>
      <p>This is a <em>Markdown Component</em> file. Here you can include JSX-style assignment expressions; this component was generated using version { version } of { name }!</p>
      <p>We\'re importing foo, which is {foo}.</p>
      <p>We\'re also adding a react component here: {<Bar {...bugs} style={{ foo: \'bar\' }} />}</p>
      <p>Another cool thing you can do is use JSX <strong>directly</strong> - here’s an SVG element, used inline: { <svg style={{ display: \'inline\', height: \'1em\' }} viewBox=\"0 0 304 290\"><path fill=\"none\" stroke=\"currentColor\" strokeWidth=\"16\" d=\"M2,111 h300 l-242.7,176.3 92.7,-285.3 92.7,285.3 z\" /></svg> }.</p>
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a webpack config object of \`{"passElementProps":false}\` for component example 2 renders as expected within React 1`] = `
Array [
  "propTypes",
]
`;

exports[`Webpack loader with a webpack config object of \`{"passElementProps":false}\` for component example 2 renders as expected within React 2`] = `
<div
  className={undefined}
  style={undefined} />
`;

exports[`Webpack loader with a webpack config object of \`{"passElementProps":false}\` for component example 2 returns the expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.7.1

MarkdownComponent.propTypes = {
  className: PropTypes.string,
  style: PropTypes.object
};

function MarkdownComponent(props) {
  const {className, style} = props;

  return (
    <div className={className} style={style}>
      {/* no input given */}
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a webpack config object of \`{"passElementProps":true,"markdownItPlugins":"somenonsensevalue"}\` for component example 0 renders as expected within React 1`] = `
Array [
  "propTypes",
  "defaultProps",
]
`;

exports[`Webpack loader with a webpack config object of \`{"passElementProps":true,"markdownItPlugins":"somenonsensevalue"}\` for component example 0 renders as expected within React 2`] = `
<div
  className={undefined}
  style={undefined}>
  <h1>
    Test Document
  </h1>
  <p>
    [[toc]]
  </p>
  <h2>
    Basic Markdown Template
  </h2>
  <p>
    This is a basic Markdown template, with no interpolations going on.
  </p>
  <p>
    This should be
  </p>
  <ul>
    <li>
      easy and;
    </li>
    <li>
      predictable!
    </li>
  </ul>
  <h2>
    Here's a couple of hyperlinks
  </h2>
  <p>
    <a
      href="https://duckduckgo.com">
      https://duckduckgo.com
    </a>
     
    <a
      href="https://github.com">
      GitHub
    </a>
  </p>
  <h2>
    Here's a code snippet with no interpolations
  </h2>
  <pre>
    <code
      className="language-bash">
      npm install -g yarn
      <br />
    </code>
  </pre>
  <h2>
    Here's a code snippet with things which shouldn't be treated as interpolations
  </h2>
  <pre>
    <code
      className="language-bash">
      <span
        className="hljs-keyword">
        function
      </span>
       
      <span
        className="hljs-function">
        <span
          className="hljs-title">
          rbenv
        </span>
      </span>
      () 
      {
      <br />
        
      RUBY=blah
      <br />
      }
      <br />
    </code>
  </pre>
  <h2>
    Here's a paragraph with a simple interpolation
  </h2>
  <p>
    There are 
    1
     props being supplied to this component.
  </p>
  <h2>
    Here's a code snippet with a simple interpolation
  </h2>
  <pre>
    <code
      className="language-bash">
      <span
        className="hljs-keyword">
        function
      </span>
       
      <span
        className="hljs-function">
        <span
          className="hljs-title">
          rbenv
        </span>
      </span>
      () 
      {
      <br />
        
      RUBY=
      <br />
      }
      <br />
    </code>
  </pre>
  <h2>
    Here's an unhinted code snippet
  </h2>
  <pre>
    <code>
      <span
        className="hljs-keyword">
        the
      </span>
       quick brown fox jumps over 
      <span
        className="hljs-keyword">
        the
      </span>
       lazy dog
      <br />
    </code>
  </pre>
  <h2>
    Here's an unhinted snippet with no discernible language
  </h2>
  <pre>
    <code>
      )
      <span
        className="hljs-comment">
        ()
      </span>
      <span
        className="hljs-comment">
        (()
      </span>
      )
      <br />
    </code>
  </pre>
  <pre>
    <code
      className="language-bash">
      brew tap buildkite/buildkite
      <br />
      brew install --token=
      <span
        className="hljs-string">
        '
        INSERT-YOUR-AGENT-TOKEN-HERE
        '
      </span>
       buildkite-agent
      <br />
      <br />
      <span
        className="hljs-function">
        <span
          className="hljs-title">
          function
        </span>
      </span>
      () 
      {
      <br />
        
      ENV=
      <span
        className="hljs-string">
        "foo_bar"
      </span>
      <br />
      }
      <br />
    </code>
  </pre>
  <p>
    Let's also test interpolation inside other elements. 
    <code>
      foo bar
    </code>
  </p>
</div>
`;

exports[`Webpack loader with a webpack config object of \`{"passElementProps":true,"markdownItPlugins":"somenonsensevalue"}\` for component example 0 returns the expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.7.1

MarkdownComponent.propTypes = {
  className: PropTypes.string,
  style: PropTypes.object,
  elementProps: PropTypes.object
};

MarkdownComponent.defaultProps = {
  elementProps: {}
};

function MarkdownComponent(props) {
  const {className, style, elementProps} = props;

  return (
    <div className={className} style={style}>
      <h1 {...elementProps[\'h1\']}>Test Document</h1>
      <p {...elementProps[\'p\']}>[[toc]]</p>
      <h2 {...elementProps[\'h2\']}>Basic Markdown Template</h2>
      <p {...elementProps[\'p\']}>This is a basic Markdown template, with no interpolations going on.</p>
      <p {...elementProps[\'p\']}>This should be</p>
      <ul {...elementProps[\'ul\']}>
        <li {...elementProps[\'li\']}>easy and;</li>
        <li {...elementProps[\'li\']}>predictable!</li>
      </ul>
      <h2 {...elementProps[\'h2\']}>Here\'s a couple of hyperlinks</h2>
      <p {...elementProps[\'p\']}><a {...elementProps[\'a\']} href=\"https://duckduckgo.com\">https://duckduckgo.com</a> <a {...elementProps[\'a\']} href=\"https://github.com\">GitHub</a></p>
      <h2 {...elementProps[\'h2\']}>Here\'s a code snippet with no interpolations</h2>
      <pre {...elementProps[\'pre\']}><code {...elementProps[\'code\']} className=\"language-bash\">npm install -g yarn<br {...elementProps[\'br\']} /></code></pre>
      <h2 {...elementProps[\'h2\']}>Here\'s a code snippet with things which shouldn\'t be treated as interpolations</h2>
      <pre {...elementProps[\'pre\']}><code {...elementProps[\'code\']} className=\"language-bash\"><span {...elementProps[\'span\']} className=\"hljs-keyword\">function</span> <span {...elementProps[\'span\']} className=\"hljs-function\"><span {...elementProps[\'span\']} className=\"hljs-title\">rbenv</span></span>() {\"{\"}<br {...elementProps[\'br\']} />{\"  \"}RUBY=blah<br {...elementProps[\'br\']} />{\"}\"}<br {...elementProps[\'br\']} /></code></pre>
      <h2 {...elementProps[\'h2\']}>Here\'s a paragraph with a simple interpolation</h2>
      <p {...elementProps[\'p\']}>There are {Object.keys(props).length} props being supplied to this component.</p>
      <h2 {...elementProps[\'h2\']}>Here\'s a code snippet with a simple interpolation</h2>
      <pre {...elementProps[\'pre\']}><code {...elementProps[\'code\']} className=\"language-bash\"><span {...elementProps[\'span\']} className=\"hljs-keyword\">function</span> <span {...elementProps[\'span\']} className=\"hljs-function\"><span {...elementProps[\'span\']} className=\"hljs-title\">rbenv</span></span>() {\"{\"}<br {...elementProps[\'br\']} />{\"  \"}RUBY={props.rubycontent}<br {...elementProps[\'br\']} />{\"}\"}<br {...elementProps[\'br\']} /></code></pre>
      <h2 {...elementProps[\'h2\']}>Here\'s an unhinted code snippet</h2>
      <pre {...elementProps[\'pre\']}><code {...elementProps[\'code\']}><span {...elementProps[\'span\']} className=\"hljs-keyword\">the</span> quick brown fox jumps over <span {...elementProps[\'span\']} className=\"hljs-keyword\">the</span> lazy dog<br {...elementProps[\'br\']} /></code></pre>
      <h2 {...elementProps[\'h2\']}>Here\'s an unhinted snippet with no discernible language</h2>
      <pre {...elementProps[\'pre\']}><code {...elementProps[\'code\']}>)<span {...elementProps[\'span\']} className=\"hljs-comment\">()</span><span {...elementProps[\'span\']} className=\"hljs-comment\">(()</span>)<br {...elementProps[\'br\']} /></code></pre>
      <pre {...elementProps[\'pre\']}><code {...elementProps[\'code\']} className=\"language-bash\">brew tap buildkite/buildkite<br {...elementProps[\'br\']} />brew install --token=<span {...elementProps[\'span\']} className=\"hljs-string\">\'{props.token || \'INSERT-YOUR-AGENT-TOKEN-HERE\'}\'</span> buildkite-agent<br {...elementProps[\'br\']} /><br {...elementProps[\'br\']} /><span {...elementProps[\'span\']} className=\"hljs-function\"><span {...elementProps[\'span\']} className=\"hljs-title\">function</span></span>() {\"{\"}<br {...elementProps[\'br\']} />{\"  \"}ENV=<span {...elementProps[\'span\']} className=\"hljs-string\">\"foo_bar\"</span><br {...elementProps[\'br\']} />{\"}\"}<br {...elementProps[\'br\']} /></code></pre>
      <p {...elementProps[\'p\']}>Let\'s also test interpolation inside other elements. <code {...elementProps[\'code\']}>{ \"foo bar\" }</code></p>
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a webpack config object of \`{"passElementProps":true,"markdownItPlugins":"somenonsensevalue"}\` for component example 1 renders as expected within React 1`] = `
Array [
  "propTypes",
  "defaultProps",
  "title",
  "myArray",
  "anObject",
]
`;

exports[`Webpack loader with a webpack config object of \`{"passElementProps":true,"markdownItPlugins":"somenonsensevalue"}\` for component example 1 renders as expected within React 2`] = `
<div
  className={undefined}
  style={undefined}>
  <h1>
    Markdown template with imports, static attributes and interpolations
  </h1>
  <p>
    This file includes some custom static attributes which should be reflected fine on the resultant object
  </p>
  <p>
    This is a 
    <em>
      Markdown Component
    </em>
     file. Here you can include JSX-style assignment expressions; this component was generated using version 
    0.7.1
     of 
    markdown-component-loader
    !
  </p>
  <p>
    We're importing foo, which is 
    bar
    .
  </p>
  <p>
    We're also adding a react component here: 
    <bar
      style={
        Object {
          "foo": "bar",
        }
      }
      url="https://github.com/ticky/markdown-component-loader/issues" />
  </p>
  <p>
    Another cool thing you can do is use JSX 
    <strong>
      directly
    </strong>
     - here’s an SVG element, used inline: 
    <svg
      style={
        Object {
          "display": "inline",
          "height": "1em",
        }
      }
      viewBox="0 0 304 290">
      <path
        d="M2,111 h300 l-242.7,176.3 92.7,-285.3 92.7,285.3 z"
        fill="none"
        stroke="currentColor"
        strokeWidth="16" />
    </svg>
    .
  </p>
</div>
`;

exports[`Webpack loader with a webpack config object of \`{"passElementProps":true,"markdownItPlugins":"somenonsensevalue"}\` for component example 1 returns the expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.7.1
import foo from \'foo\';
import Bar from \'foo\';
import { bugs, name, version } from \'../package.json\';

MarkdownComponent.propTypes = {
  className: PropTypes.string,
  style: PropTypes.object,
  elementProps: PropTypes.object
};

MarkdownComponent.defaultProps = {
  elementProps: {}
};

MarkdownComponent[\'title\'] = \'a custom title\';

MarkdownComponent[\'myArray\'] = [
  \'foo\',
  \'bar\'
];

MarkdownComponent[\'anObject\'] = {
  \'foo\': \'bar\'
};

function MarkdownComponent(props) {
  const {className, style, elementProps} = props;

  return (
    <div className={className} style={style}>
      <h1 {...elementProps[\'h1\']}>Markdown template with imports, static attributes and interpolations</h1>
      <p {...elementProps[\'p\']}>This file includes some custom static attributes which should be reflected fine on the resultant object</p>
      <p {...elementProps[\'p\']}>This is a <em {...elementProps[\'em\']}>Markdown Component</em> file. Here you can include JSX-style assignment expressions; this component was generated using version { version } of { name }!</p>
      <p {...elementProps[\'p\']}>We\'re importing foo, which is {foo}.</p>
      <p {...elementProps[\'p\']}>We\'re also adding a react component here: {<Bar {...bugs} style={{ foo: \'bar\' }} />}</p>
      <p {...elementProps[\'p\']}>Another cool thing you can do is use JSX <strong {...elementProps[\'strong\']}>directly</strong> - here’s an SVG element, used inline: { <svg {...elementProps[\'svg\']} style={{ display: \'inline\', height: \'1em\' }} viewBox=\"0 0 304 290\"><path {...elementProps[\'path\']} fill=\"none\" stroke=\"currentColor\" strokeWidth=\"16\" d=\"M2,111 h300 l-242.7,176.3 92.7,-285.3 92.7,285.3 z\" /></svg> }.</p>
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a webpack config object of \`{"passElementProps":true,"markdownItPlugins":"somenonsensevalue"}\` for component example 2 renders as expected within React 1`] = `
Array [
  "propTypes",
  "defaultProps",
]
`;

exports[`Webpack loader with a webpack config object of \`{"passElementProps":true,"markdownItPlugins":"somenonsensevalue"}\` for component example 2 renders as expected within React 2`] = `
<div
  className={undefined}
  style={undefined} />
`;

exports[`Webpack loader with a webpack config object of \`{"passElementProps":true,"markdownItPlugins":"somenonsensevalue"}\` for component example 2 returns the expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.7.1

MarkdownComponent.propTypes = {
  className: PropTypes.string,
  style: PropTypes.object,
  elementProps: PropTypes.object
};

MarkdownComponent.defaultProps = {
  elementProps: {}
};

function MarkdownComponent(props) {
  const {className, style, elementProps} = props;

  return (
    <div className={className} style={style}>
      {/* no input given */}
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a webpack config object of \`{"passElementProps":true,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 0 renders as expected within React 1`] = `
Array [
  "propTypes",
  "defaultProps",
]
`;

exports[`Webpack loader with a webpack config object of \`{"passElementProps":true,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 0 renders as expected within React 2`] = `
<div
  className={undefined}
  style={undefined}>
  <h1
    id="test-document">
    Test Document
  </h1>
  <p />
  <div
    className="my-container-class">
    <ul>
      <li>
        <a
          href="#test-document">
          Test Document
        </a>
        <ul>
          <li>
            <a
              href="#basic-markdown-template">
              Basic Markdown Template
            </a>
          </li>
          <li>
            <a
              href="#heres-a-couple-of-hyperlinks">
              Here's a couple of hyperlinks
            </a>
          </li>
          <li>
            <a
              href="#heres-a-code-snippet-with-no-interpolations">
              Here's a code snippet with no interpolations
            </a>
          </li>
          <li>
            <a
              href="#heres-a-code-snippet-with-things-which-shouldnt-be-treated-as-interpolations">
              Here's a code snippet with things which shouldn't be treated as interpolations
            </a>
          </li>
          <li>
            <a
              href="#heres-a-paragraph-with-a-simple-interpolation">
              Here's a paragraph with a simple interpolation
            </a>
          </li>
          <li>
            <a
              href="#heres-a-code-snippet-with-a-simple-interpolation">
              Here's a code snippet with a simple interpolation
            </a>
          </li>
          <li>
            <a
              href="#heres-an-unhinted-code-snippet">
              Here's an unhinted code snippet
            </a>
          </li>
          <li>
            <a
              href="#heres-an-unhinted-snippet-with-no-discernible-language">
              Here's an unhinted snippet with no discernible language
            </a>
          </li>
        </ul>
      </li>
    </ul>
  </div>
  <p />
  <h2
    id="basic-markdown-template">
    Basic Markdown Template
  </h2>
  <p>
    This is a basic Markdown template, with no interpolations going on.
  </p>
  <p>
    This should be
  </p>
  <ul>
    <li>
      easy and;
    </li>
    <li>
      predictable!
    </li>
  </ul>
  <h2
    id="heres-a-couple-of-hyperlinks">
    Here's a couple of hyperlinks
  </h2>
  <p>
    <a
      href="https://duckduckgo.com">
      https://duckduckgo.com
    </a>
     
    <a
      href="https://github.com">
      GitHub
    </a>
  </p>
  <h2
    id="heres-a-code-snippet-with-no-interpolations">
    Here's a code snippet with no interpolations
  </h2>
  <pre>
    <code
      className="language-bash">
      npm install -g yarn
      <br />
    </code>
  </pre>
  <h2
    id="heres-a-code-snippet-with-things-which-shouldnt-be-treated-as-interpolations">
    Here's a code snippet with things which shouldn't be treated as interpolations
  </h2>
  <pre>
    <code
      className="language-bash">
      <span
        className="hljs-keyword">
        function
      </span>
       
      <span
        className="hljs-function">
        <span
          className="hljs-title">
          rbenv
        </span>
      </span>
      () 
      {
      <br />
        
      RUBY=blah
      <br />
      }
      <br />
    </code>
  </pre>
  <h2
    id="heres-a-paragraph-with-a-simple-interpolation">
    Here's a paragraph with a simple interpolation
  </h2>
  <p>
    There are 
    1
     props being supplied to this component.
  </p>
  <h2
    id="heres-a-code-snippet-with-a-simple-interpolation">
    Here's a code snippet with a simple interpolation
  </h2>
  <pre>
    <code
      className="language-bash">
      <span
        className="hljs-keyword">
        function
      </span>
       
      <span
        className="hljs-function">
        <span
          className="hljs-title">
          rbenv
        </span>
      </span>
      () 
      {
      <br />
        
      RUBY=
      <br />
      }
      <br />
    </code>
  </pre>
  <h2
    id="heres-an-unhinted-code-snippet">
    Here's an unhinted code snippet
  </h2>
  <pre>
    <code>
      <span
        className="hljs-keyword">
        the
      </span>
       quick brown fox jumps over 
      <span
        className="hljs-keyword">
        the
      </span>
       lazy dog
      <br />
    </code>
  </pre>
  <h2
    id="heres-an-unhinted-snippet-with-no-discernible-language">
    Here's an unhinted snippet with no discernible language
  </h2>
  <pre>
    <code>
      )
      <span
        className="hljs-comment">
        ()
      </span>
      <span
        className="hljs-comment">
        (()
      </span>
      )
      <br />
    </code>
  </pre>
  <pre>
    <code
      className="language-bash">
      brew tap buildkite/buildkite
      <br />
      brew install --token=
      <span
        className="hljs-string">
        '
        INSERT-YOUR-AGENT-TOKEN-HERE
        '
      </span>
       buildkite-agent
      <br />
      <br />
      <span
        className="hljs-function">
        <span
          className="hljs-title">
          function
        </span>
      </span>
      () 
      {
      <br />
        
      ENV=
      <span
        className="hljs-string">
        "foo_bar"
      </span>
      <br />
      }
      <br />
    </code>
  </pre>
  <p>
    Let's also test interpolation inside other elements. 
    <code>
      foo bar
    </code>
  </p>
</div>
`;

exports[`Webpack loader with a webpack config object of \`{"passElementProps":true,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 0 returns the expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.7.1

MarkdownComponent.propTypes = {
  className: PropTypes.string,
  style: PropTypes.object,
  elementProps: PropTypes.object
};

MarkdownComponent.defaultProps = {
  elementProps: {}
};

function MarkdownComponent(props) {
  const {className, style, elementProps} = props;

  return (
    <div className={className} style={style}>
      <h1 {...elementProps[\'h1\']} id=\"test-document\">Test Document</h1>
      <p {...elementProps[\'p\']} /><div {...elementProps[\'div\']} className=\"my-container-class\"><ul {...elementProps[\'ul\']}><li {...elementProps[\'li\']}><a {...elementProps[\'a\']} href=\"#test-document\">Test Document</a><ul {...elementProps[\'ul\']}><li {...elementProps[\'li\']}><a {...elementProps[\'a\']} href=\"#basic-markdown-template\">Basic Markdown Template</a></li><li {...elementProps[\'li\']}><a {...elementProps[\'a\']} href=\"#heres-a-couple-of-hyperlinks\">Here\'s a couple of hyperlinks</a></li><li {...elementProps[\'li\']}><a {...elementProps[\'a\']} href=\"#heres-a-code-snippet-with-no-interpolations\">Here\'s a code snippet with no interpolations</a></li><li {...elementProps[\'li\']}><a {...elementProps[\'a\']} href=\"#heres-a-code-snippet-with-things-which-shouldnt-be-treated-as-interpolations\">Here\'s a code snippet with things which shouldn\'t be treated as interpolations</a></li><li {...elementProps[\'li\']}><a {...elementProps[\'a\']} href=\"#heres-a-paragraph-with-a-simple-interpolation\">Here\'s a paragraph with a simple interpolation</a></li><li {...elementProps[\'li\']}><a {...elementProps[\'a\']} href=\"#heres-a-code-snippet-with-a-simple-interpolation\">Here\'s a code snippet with a simple interpolation</a></li><li {...elementProps[\'li\']}><a {...elementProps[\'a\']} href=\"#heres-an-unhinted-code-snippet\">Here\'s an unhinted code snippet</a></li><li {...elementProps[\'li\']}><a {...elementProps[\'a\']} href=\"#heres-an-unhinted-snippet-with-no-discernible-language\">Here\'s an unhinted snippet with no discernible language</a></li></ul></li></ul></div><p {...elementProps[\'p\']} />
      <h2 {...elementProps[\'h2\']} id=\"basic-markdown-template\">Basic Markdown Template</h2>
      <p {...elementProps[\'p\']}>This is a basic Markdown template, with no interpolations going on.</p>
      <p {...elementProps[\'p\']}>This should be</p>
      <ul {...elementProps[\'ul\']}>
        <li {...elementProps[\'li\']}>easy and;</li>
        <li {...elementProps[\'li\']}>predictable!</li>
      </ul>
      <h2 {...elementProps[\'h2\']} id=\"heres-a-couple-of-hyperlinks\">Here\'s a couple of hyperlinks</h2>
      <p {...elementProps[\'p\']}><a {...elementProps[\'a\']} href=\"https://duckduckgo.com\">https://duckduckgo.com</a> <a {...elementProps[\'a\']} href=\"https://github.com\">GitHub</a></p>
      <h2 {...elementProps[\'h2\']} id=\"heres-a-code-snippet-with-no-interpolations\">Here\'s a code snippet with no interpolations</h2>
      <pre {...elementProps[\'pre\']}><code {...elementProps[\'code\']} className=\"language-bash\">npm install -g yarn<br {...elementProps[\'br\']} /></code></pre>
      <h2 {...elementProps[\'h2\']} id=\"heres-a-code-snippet-with-things-which-shouldnt-be-treated-as-interpolations\">Here\'s a code snippet with things which shouldn\'t be treated as interpolations</h2>
      <pre {...elementProps[\'pre\']}><code {...elementProps[\'code\']} className=\"language-bash\"><span {...elementProps[\'span\']} className=\"hljs-keyword\">function</span> <span {...elementProps[\'span\']} className=\"hljs-function\"><span {...elementProps[\'span\']} className=\"hljs-title\">rbenv</span></span>() {\"{\"}<br {...elementProps[\'br\']} />{\"  \"}RUBY=blah<br {...elementProps[\'br\']} />{\"}\"}<br {...elementProps[\'br\']} /></code></pre>
      <h2 {...elementProps[\'h2\']} id=\"heres-a-paragraph-with-a-simple-interpolation\">Here\'s a paragraph with a simple interpolation</h2>
      <p {...elementProps[\'p\']}>There are {Object.keys(props).length} props being supplied to this component.</p>
      <h2 {...elementProps[\'h2\']} id=\"heres-a-code-snippet-with-a-simple-interpolation\">Here\'s a code snippet with a simple interpolation</h2>
      <pre {...elementProps[\'pre\']}><code {...elementProps[\'code\']} className=\"language-bash\"><span {...elementProps[\'span\']} className=\"hljs-keyword\">function</span> <span {...elementProps[\'span\']} className=\"hljs-function\"><span {...elementProps[\'span\']} className=\"hljs-title\">rbenv</span></span>() {\"{\"}<br {...elementProps[\'br\']} />{\"  \"}RUBY={props.rubycontent}<br {...elementProps[\'br\']} />{\"}\"}<br {...elementProps[\'br\']} /></code></pre>
      <h2 {...elementProps[\'h2\']} id=\"heres-an-unhinted-code-snippet\">Here\'s an unhinted code snippet</h2>
      <pre {...elementProps[\'pre\']}><code {...elementProps[\'code\']}><span {...elementProps[\'span\']} className=\"hljs-keyword\">the</span> quick brown fox jumps over <span {...elementProps[\'span\']} className=\"hljs-keyword\">the</span> lazy dog<br {...elementProps[\'br\']} /></code></pre>
      <h2 {...elementProps[\'h2\']} id=\"heres-an-unhinted-snippet-with-no-discernible-language\">Here\'s an unhinted snippet with no discernible language</h2>
      <pre {...elementProps[\'pre\']}><code {...elementProps[\'code\']}>)<span {...elementProps[\'span\']} className=\"hljs-comment\">()</span><span {...elementProps[\'span\']} className=\"hljs-comment\">(()</span>)<br {...elementProps[\'br\']} /></code></pre>
      <pre {...elementProps[\'pre\']}><code {...elementProps[\'code\']} className=\"language-bash\">brew tap buildkite/buildkite<br {...elementProps[\'br\']} />brew install --token=<span {...elementProps[\'span\']} className=\"hljs-string\">\'{props.token || \'INSERT-YOUR-AGENT-TOKEN-HERE\'}\'</span> buildkite-agent<br {...elementProps[\'br\']} /><br {...elementProps[\'br\']} /><span {...elementProps[\'span\']} className=\"hljs-function\"><span {...elementProps[\'span\']} className=\"hljs-title\">function</span></span>() {\"{\"}<br {...elementProps[\'br\']} />{\"  \"}ENV=<span {...elementProps[\'span\']} className=\"hljs-string\">\"foo_bar\"</span><br {...elementProps[\'br\']} />{\"}\"}<br {...elementProps[\'br\']} /></code></pre>
      <p {...elementProps[\'p\']}>Let\'s also test interpolation inside other elements. <code {...elementProps[\'code\']}>{ \"foo bar\" }</code></p>
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a webpack config object of \`{"passElementProps":true,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 1 renders as expected within React 1`] = `
Array [
  "propTypes",
  "defaultProps",
  "title",
  "myArray",
  "anObject",
]
`;

exports[`Webpack loader with a webpack config object of \`{"passElementProps":true,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 1 renders as expected within React 2`] = `
<div
  className={undefined}
  style={undefined}>
  <h1
    id="markdown-template-with-imports-static-attributes-and-interpolations">
    Markdown template with imports, static attributes and interpolations
  </h1>
  <p>
    This file includes some custom static attributes which should be reflected fine on the resultant object
  </p>
  <p>
    This is a 
    <em>
      Markdown Component
    </em>
     file. Here you can include JSX-style assignment expressions; this component was generated using version 
    0.7.1
     of 
    markdown-component-loader
    !
  </p>
  <p>
    We're importing foo, which is 
    bar
    .
  </p>
  <p>
    We're also adding a react component here: 
    <bar
      style={
        Object {
          "foo": "bar",
        }
      }
      url="https://github.com/ticky/markdown-component-loader/issues" />
  </p>
  <p>
    Another cool thing you can do is use JSX 
    <strong>
      directly
    </strong>
     - here’s an SVG element, used inline: 
    <svg
      style={
        Object {
          "display": "inline",
          "height": "1em",
        }
      }
      viewBox="0 0 304 290">
      <path
        d="M2,111 h300 l-242.7,176.3 92.7,-285.3 92.7,285.3 z"
        fill="none"
        stroke="currentColor"
        strokeWidth="16" />
    </svg>
    .
  </p>
</div>
`;

exports[`Webpack loader with a webpack config object of \`{"passElementProps":true,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 1 returns the expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.7.1
import foo from \'foo\';
import Bar from \'foo\';
import { bugs, name, version } from \'../package.json\';

MarkdownComponent.propTypes = {
  className: PropTypes.string,
  style: PropTypes.object,
  elementProps: PropTypes.object
};

MarkdownComponent.defaultProps = {
  elementProps: {}
};

MarkdownComponent[\'title\'] = \'a custom title\';

MarkdownComponent[\'myArray\'] = [
  \'foo\',
  \'bar\'
];

MarkdownComponent[\'anObject\'] = {
  \'foo\': \'bar\'
};

function MarkdownComponent(props) {
  const {className, style, elementProps} = props;

  return (
    <div className={className} style={style}>
      <h1 {...elementProps[\'h1\']} id=\"markdown-template-with-imports-static-attributes-and-interpolations\">Markdown template with imports, static attributes and interpolations</h1>
      <p {...elementProps[\'p\']}>This file includes some custom static attributes which should be reflected fine on the resultant object</p>
      <p {...elementProps[\'p\']}>This is a <em {...elementProps[\'em\']}>Markdown Component</em> file. Here you can include JSX-style assignment expressions; this component was generated using version { version } of { name }!</p>
      <p {...elementProps[\'p\']}>We\'re importing foo, which is {foo}.</p>
      <p {...elementProps[\'p\']}>We\'re also adding a react component here: {<Bar {...bugs} style={{ foo: \'bar\' }} />}</p>
      <p {...elementProps[\'p\']}>Another cool thing you can do is use JSX <strong {...elementProps[\'strong\']}>directly</strong> - here’s an SVG element, used inline: { <svg {...elementProps[\'svg\']} style={{ display: \'inline\', height: \'1em\' }} viewBox=\"0 0 304 290\"><path {...elementProps[\'path\']} fill=\"none\" stroke=\"currentColor\" strokeWidth=\"16\" d=\"M2,111 h300 l-242.7,176.3 92.7,-285.3 92.7,285.3 z\" /></svg> }.</p>
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a webpack config object of \`{"passElementProps":true,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 2 renders as expected within React 1`] = `
Array [
  "propTypes",
  "defaultProps",
]
`;

exports[`Webpack loader with a webpack config object of \`{"passElementProps":true,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 2 renders as expected within React 2`] = `
<div
  className={undefined}
  style={undefined} />
`;

exports[`Webpack loader with a webpack config object of \`{"passElementProps":true,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 2 returns the expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.7.1

MarkdownComponent.propTypes = {
  className: PropTypes.string,
  style: PropTypes.object,
  elementProps: PropTypes.object
};

MarkdownComponent.defaultProps = {
  elementProps: {}
};

function MarkdownComponent(props) {
  const {className, style, elementProps} = props;

  return (
    <div className={className} style={style}>
      {/* no input given */}
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a webpack config object of \`{"passElementProps":true,"markdownItPlugins":[null]}\` for component example 0 renders as expected within React 1`] = `
Array [
  "propTypes",
  "defaultProps",
]
`;

exports[`Webpack loader with a webpack config object of \`{"passElementProps":true,"markdownItPlugins":[null]}\` for component example 0 renders as expected within React 2`] = `
<div
  className={undefined}
  style={undefined}>
  <h1
    id="test-document">
    Test Document
  </h1>
  <p>
    [[toc]]
  </p>
  <h2
    id="basic-markdown-template">
    Basic Markdown Template
  </h2>
  <p>
    This is a basic Markdown template, with no interpolations going on.
  </p>
  <p>
    This should be
  </p>
  <ul>
    <li>
      easy and;
    </li>
    <li>
      predictable!
    </li>
  </ul>
  <h2
    id="heres-a-couple-of-hyperlinks">
    Here's a couple of hyperlinks
  </h2>
  <p>
    <a
      href="https://duckduckgo.com">
      https://duckduckgo.com
    </a>
     
    <a
      href="https://github.com">
      GitHub
    </a>
  </p>
  <h2
    id="heres-a-code-snippet-with-no-interpolations">
    Here's a code snippet with no interpolations
  </h2>
  <pre>
    <code
      className="language-bash">
      npm install -g yarn
      <br />
    </code>
  </pre>
  <h2
    id="heres-a-code-snippet-with-things-which-shouldnt-be-treated-as-interpolations">
    Here's a code snippet with things which shouldn't be treated as interpolations
  </h2>
  <pre>
    <code
      className="language-bash">
      <span
        className="hljs-keyword">
        function
      </span>
       
      <span
        className="hljs-function">
        <span
          className="hljs-title">
          rbenv
        </span>
      </span>
      () 
      {
      <br />
        
      RUBY=blah
      <br />
      }
      <br />
    </code>
  </pre>
  <h2
    id="heres-a-paragraph-with-a-simple-interpolation">
    Here's a paragraph with a simple interpolation
  </h2>
  <p>
    There are 
    1
     props being supplied to this component.
  </p>
  <h2
    id="heres-a-code-snippet-with-a-simple-interpolation">
    Here's a code snippet with a simple interpolation
  </h2>
  <pre>
    <code
      className="language-bash">
      <span
        className="hljs-keyword">
        function
      </span>
       
      <span
        className="hljs-function">
        <span
          className="hljs-title">
          rbenv
        </span>
      </span>
      () 
      {
      <br />
        
      RUBY=
      <br />
      }
      <br />
    </code>
  </pre>
  <h2
    id="heres-an-unhinted-code-snippet">
    Here's an unhinted code snippet
  </h2>
  <pre>
    <code>
      <span
        className="hljs-keyword">
        the
      </span>
       quick brown fox jumps over 
      <span
        className="hljs-keyword">
        the
      </span>
       lazy dog
      <br />
    </code>
  </pre>
  <h2
    id="heres-an-unhinted-snippet-with-no-discernible-language">
    Here's an unhinted snippet with no discernible language
  </h2>
  <pre>
    <code>
      )
      <span
        className="hljs-comment">
        ()
      </span>
      <span
        className="hljs-comment">
        (()
      </span>
      )
      <br />
    </code>
  </pre>
  <pre>
    <code
      className="language-bash">
      brew tap buildkite/buildkite
      <br />
      brew install --token=
      <span
        className="hljs-string">
        '
        INSERT-YOUR-AGENT-TOKEN-HERE
        '
      </span>
       buildkite-agent
      <br />
      <br />
      <span
        className="hljs-function">
        <span
          className="hljs-title">
          function
        </span>
      </span>
      () 
      {
      <br />
        
      ENV=
      <span
        className="hljs-string">
        "foo_bar"
      </span>
      <br />
      }
      <br />
    </code>
  </pre>
  <p>
    Let's also test interpolation inside other elements. 
    <code>
      foo bar
    </code>
  </p>
</div>
`;

exports[`Webpack loader with a webpack config object of \`{"passElementProps":true,"markdownItPlugins":[null]}\` for component example 0 returns the expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.7.1

MarkdownComponent.propTypes = {
  className: PropTypes.string,
  style: PropTypes.object,
  elementProps: PropTypes.object
};

MarkdownComponent.defaultProps = {
  elementProps: {}
};

function MarkdownComponent(props) {
  const {className, style, elementProps} = props;

  return (
    <div className={className} style={style}>
      <h1 {...elementProps[\'h1\']} id=\"test-document\">Test Document</h1>
      <p {...elementProps[\'p\']}>[[toc]]</p>
      <h2 {...elementProps[\'h2\']} id=\"basic-markdown-template\">Basic Markdown Template</h2>
      <p {...elementProps[\'p\']}>This is a basic Markdown template, with no interpolations going on.</p>
      <p {...elementProps[\'p\']}>This should be</p>
      <ul {...elementProps[\'ul\']}>
        <li {...elementProps[\'li\']}>easy and;</li>
        <li {...elementProps[\'li\']}>predictable!</li>
      </ul>
      <h2 {...elementProps[\'h2\']} id=\"heres-a-couple-of-hyperlinks\">Here\'s a couple of hyperlinks</h2>
      <p {...elementProps[\'p\']}><a {...elementProps[\'a\']} href=\"https://duckduckgo.com\">https://duckduckgo.com</a> <a {...elementProps[\'a\']} href=\"https://github.com\">GitHub</a></p>
      <h2 {...elementProps[\'h2\']} id=\"heres-a-code-snippet-with-no-interpolations\">Here\'s a code snippet with no interpolations</h2>
      <pre {...elementProps[\'pre\']}><code {...elementProps[\'code\']} className=\"language-bash\">npm install -g yarn<br {...elementProps[\'br\']} /></code></pre>
      <h2 {...elementProps[\'h2\']} id=\"heres-a-code-snippet-with-things-which-shouldnt-be-treated-as-interpolations\">Here\'s a code snippet with things which shouldn\'t be treated as interpolations</h2>
      <pre {...elementProps[\'pre\']}><code {...elementProps[\'code\']} className=\"language-bash\"><span {...elementProps[\'span\']} className=\"hljs-keyword\">function</span> <span {...elementProps[\'span\']} className=\"hljs-function\"><span {...elementProps[\'span\']} className=\"hljs-title\">rbenv</span></span>() {\"{\"}<br {...elementProps[\'br\']} />{\"  \"}RUBY=blah<br {...elementProps[\'br\']} />{\"}\"}<br {...elementProps[\'br\']} /></code></pre>
      <h2 {...elementProps[\'h2\']} id=\"heres-a-paragraph-with-a-simple-interpolation\">Here\'s a paragraph with a simple interpolation</h2>
      <p {...elementProps[\'p\']}>There are {Object.keys(props).length} props being supplied to this component.</p>
      <h2 {...elementProps[\'h2\']} id=\"heres-a-code-snippet-with-a-simple-interpolation\">Here\'s a code snippet with a simple interpolation</h2>
      <pre {...elementProps[\'pre\']}><code {...elementProps[\'code\']} className=\"language-bash\"><span {...elementProps[\'span\']} className=\"hljs-keyword\">function</span> <span {...elementProps[\'span\']} className=\"hljs-function\"><span {...elementProps[\'span\']} className=\"hljs-title\">rbenv</span></span>() {\"{\"}<br {...elementProps[\'br\']} />{\"  \"}RUBY={props.rubycontent}<br {...elementProps[\'br\']} />{\"}\"}<br {...elementProps[\'br\']} /></code></pre>
      <h2 {...elementProps[\'h2\']} id=\"heres-an-unhinted-code-snippet\">Here\'s an unhinted code snippet</h2>
      <pre {...elementProps[\'pre\']}><code {...elementProps[\'code\']}><span {...elementProps[\'span\']} className=\"hljs-keyword\">the</span> quick brown fox jumps over <span {...elementProps[\'span\']} className=\"hljs-keyword\">the</span> lazy dog<br {...elementProps[\'br\']} /></code></pre>
      <h2 {...elementProps[\'h2\']} id=\"heres-an-unhinted-snippet-with-no-discernible-language\">Here\'s an unhinted snippet with no discernible language</h2>
      <pre {...elementProps[\'pre\']}><code {...elementProps[\'code\']}>)<span {...elementProps[\'span\']} className=\"hljs-comment\">()</span><span {...elementProps[\'span\']} className=\"hljs-comment\">(()</span>)<br {...elementProps[\'br\']} /></code></pre>
      <pre {...elementProps[\'pre\']}><code {...elementProps[\'code\']} className=\"language-bash\">brew tap buildkite/buildkite<br {...elementProps[\'br\']} />brew install --token=<span {...elementProps[\'span\']} className=\"hljs-string\">\'{props.token || \'INSERT-YOUR-AGENT-TOKEN-HERE\'}\'</span> buildkite-agent<br {...elementProps[\'br\']} /><br {...elementProps[\'br\']} /><span {...elementProps[\'span\']} className=\"hljs-function\"><span {...elementProps[\'span\']} className=\"hljs-title\">function</span></span>() {\"{\"}<br {...elementProps[\'br\']} />{\"  \"}ENV=<span {...elementProps[\'span\']} className=\"hljs-string\">\"foo_bar\"</span><br {...elementProps[\'br\']} />{\"}\"}<br {...elementProps[\'br\']} /></code></pre>
      <p {...elementProps[\'p\']}>Let\'s also test interpolation inside other elements. <code {...elementProps[\'code\']}>{ \"foo bar\" }</code></p>
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a webpack config object of \`{"passElementProps":true,"markdownItPlugins":[null]}\` for component example 1 renders as expected within React 1`] = `
Array [
  "propTypes",
  "defaultProps",
  "title",
  "myArray",
  "anObject",
]
`;

exports[`Webpack loader with a webpack config object of \`{"passElementProps":true,"markdownItPlugins":[null]}\` for component example 1 renders as expected within React 2`] = `
<div
  className={undefined}
  style={undefined}>
  <h1
    id="markdown-template-with-imports-static-attributes-and-interpolations">
    Markdown template with imports, static attributes and interpolations
  </h1>
  <p>
    This file includes some custom static attributes which should be reflected fine on the resultant object
  </p>
  <p>
    This is a 
    <em>
      Markdown Component
    </em>
     file. Here you can include JSX-style assignment expressions; this component was generated using version 
    0.7.1
     of 
    markdown-component-loader
    !
  </p>
  <p>
    We're importing foo, which is 
    bar
    .
  </p>
  <p>
    We're also adding a react component here: 
    <bar
      style={
        Object {
          "foo": "bar",
        }
      }
      url="https://github.com/ticky/markdown-component-loader/issues" />
  </p>
  <p>
    Another cool thing you can do is use JSX 
    <strong>
      directly
    </strong>
     - here’s an SVG element, used inline: 
    <svg
      style={
        Object {
          "display": "inline",
          "height": "1em",
        }
      }
      viewBox="0 0 304 290">
      <path
        d="M2,111 h300 l-242.7,176.3 92.7,-285.3 92.7,285.3 z"
        fill="none"
        stroke="currentColor"
        strokeWidth="16" />
    </svg>
    .
  </p>
</div>
`;

exports[`Webpack loader with a webpack config object of \`{"passElementProps":true,"markdownItPlugins":[null]}\` for component example 1 returns the expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.7.1
import foo from \'foo\';
import Bar from \'foo\';
import { bugs, name, version } from \'../package.json\';

MarkdownComponent.propTypes = {
  className: PropTypes.string,
  style: PropTypes.object,
  elementProps: PropTypes.object
};

MarkdownComponent.defaultProps = {
  elementProps: {}
};

MarkdownComponent[\'title\'] = \'a custom title\';

MarkdownComponent[\'myArray\'] = [
  \'foo\',
  \'bar\'
];

MarkdownComponent[\'anObject\'] = {
  \'foo\': \'bar\'
};

function MarkdownComponent(props) {
  const {className, style, elementProps} = props;

  return (
    <div className={className} style={style}>
      <h1 {...elementProps[\'h1\']} id=\"markdown-template-with-imports-static-attributes-and-interpolations\">Markdown template with imports, static attributes and interpolations</h1>
      <p {...elementProps[\'p\']}>This file includes some custom static attributes which should be reflected fine on the resultant object</p>
      <p {...elementProps[\'p\']}>This is a <em {...elementProps[\'em\']}>Markdown Component</em> file. Here you can include JSX-style assignment expressions; this component was generated using version { version } of { name }!</p>
      <p {...elementProps[\'p\']}>We\'re importing foo, which is {foo}.</p>
      <p {...elementProps[\'p\']}>We\'re also adding a react component here: {<Bar {...bugs} style={{ foo: \'bar\' }} />}</p>
      <p {...elementProps[\'p\']}>Another cool thing you can do is use JSX <strong {...elementProps[\'strong\']}>directly</strong> - here’s an SVG element, used inline: { <svg {...elementProps[\'svg\']} style={{ display: \'inline\', height: \'1em\' }} viewBox=\"0 0 304 290\"><path {...elementProps[\'path\']} fill=\"none\" stroke=\"currentColor\" strokeWidth=\"16\" d=\"M2,111 h300 l-242.7,176.3 92.7,-285.3 92.7,285.3 z\" /></svg> }.</p>
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a webpack config object of \`{"passElementProps":true,"markdownItPlugins":[null]}\` for component example 2 renders as expected within React 1`] = `
Array [
  "propTypes",
  "defaultProps",
]
`;

exports[`Webpack loader with a webpack config object of \`{"passElementProps":true,"markdownItPlugins":[null]}\` for component example 2 renders as expected within React 2`] = `
<div
  className={undefined}
  style={undefined} />
`;

exports[`Webpack loader with a webpack config object of \`{"passElementProps":true,"markdownItPlugins":[null]}\` for component example 2 returns the expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.7.1

MarkdownComponent.propTypes = {
  className: PropTypes.string,
  style: PropTypes.object,
  elementProps: PropTypes.object
};

MarkdownComponent.defaultProps = {
  elementProps: {}
};

function MarkdownComponent(props) {
  const {className, style, elementProps} = props;

  return (
    <div className={className} style={style}>
      {/* no input given */}
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a webpack config object of \`{"passElementProps":true}\` for component example 0 renders as expected within React 1`] = `
Array [
  "propTypes",
  "defaultProps",
]
`;

exports[`Webpack loader with a webpack config object of \`{"passElementProps":true}\` for component example 0 renders as expected within React 2`] = `
<div
  className={undefined}
  style={undefined}>
  <h1>
    Test Document
  </h1>
  <p>
    [[toc]]
  </p>
  <h2>
    Basic Markdown Template
  </h2>
  <p>
    This is a basic Markdown template, with no interpolations going on.
  </p>
  <p>
    This should be
  </p>
  <ul>
    <li>
      easy and;
    </li>
    <li>
      predictable!
    </li>
  </ul>
  <h2>
    Here's a couple of hyperlinks
  </h2>
  <p>
    <a
      href="https://duckduckgo.com">
      https://duckduckgo.com
    </a>
     
    <a
      href="https://github.com">
      GitHub
    </a>
  </p>
  <h2>
    Here's a code snippet with no interpolations
  </h2>
  <pre>
    <code
      className="language-bash">
      npm install -g yarn
      <br />
    </code>
  </pre>
  <h2>
    Here's a code snippet with things which shouldn't be treated as interpolations
  </h2>
  <pre>
    <code
      className="language-bash">
      <span
        className="hljs-keyword">
        function
      </span>
       
      <span
        className="hljs-function">
        <span
          className="hljs-title">
          rbenv
        </span>
      </span>
      () 
      {
      <br />
        
      RUBY=blah
      <br />
      }
      <br />
    </code>
  </pre>
  <h2>
    Here's a paragraph with a simple interpolation
  </h2>
  <p>
    There are 
    1
     props being supplied to this component.
  </p>
  <h2>
    Here's a code snippet with a simple interpolation
  </h2>
  <pre>
    <code
      className="language-bash">
      <span
        className="hljs-keyword">
        function
      </span>
       
      <span
        className="hljs-function">
        <span
          className="hljs-title">
          rbenv
        </span>
      </span>
      () 
      {
      <br />
        
      RUBY=
      <br />
      }
      <br />
    </code>
  </pre>
  <h2>
    Here's an unhinted code snippet
  </h2>
  <pre>
    <code>
      <span
        className="hljs-keyword">
        the
      </span>
       quick brown fox jumps over 
      <span
        className="hljs-keyword">
        the
      </span>
       lazy dog
      <br />
    </code>
  </pre>
  <h2>
    Here's an unhinted snippet with no discernible language
  </h2>
  <pre>
    <code>
      )
      <span
        className="hljs-comment">
        ()
      </span>
      <span
        className="hljs-comment">
        (()
      </span>
      )
      <br />
    </code>
  </pre>
  <pre>
    <code
      className="language-bash">
      brew tap buildkite/buildkite
      <br />
      brew install --token=
      <span
        className="hljs-string">
        '
        INSERT-YOUR-AGENT-TOKEN-HERE
        '
      </span>
       buildkite-agent
      <br />
      <br />
      <span
        className="hljs-function">
        <span
          className="hljs-title">
          function
        </span>
      </span>
      () 
      {
      <br />
        
      ENV=
      <span
        className="hljs-string">
        "foo_bar"
      </span>
      <br />
      }
      <br />
    </code>
  </pre>
  <p>
    Let's also test interpolation inside other elements. 
    <code>
      foo bar
    </code>
  </p>
</div>
`;

exports[`Webpack loader with a webpack config object of \`{"passElementProps":true}\` for component example 0 returns the expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.7.1

MarkdownComponent.propTypes = {
  className: PropTypes.string,
  style: PropTypes.object,
  elementProps: PropTypes.object
};

MarkdownComponent.defaultProps = {
  elementProps: {}
};

function MarkdownComponent(props) {
  const {className, style, elementProps} = props;

  return (
    <div className={className} style={style}>
      <h1 {...elementProps[\'h1\']}>Test Document</h1>
      <p {...elementProps[\'p\']}>[[toc]]</p>
      <h2 {...elementProps[\'h2\']}>Basic Markdown Template</h2>
      <p {...elementProps[\'p\']}>This is a basic Markdown template, with no interpolations going on.</p>
      <p {...elementProps[\'p\']}>This should be</p>
      <ul {...elementProps[\'ul\']}>
        <li {...elementProps[\'li\']}>easy and;</li>
        <li {...elementProps[\'li\']}>predictable!</li>
      </ul>
      <h2 {...elementProps[\'h2\']}>Here\'s a couple of hyperlinks</h2>
      <p {...elementProps[\'p\']}><a {...elementProps[\'a\']} href=\"https://duckduckgo.com\">https://duckduckgo.com</a> <a {...elementProps[\'a\']} href=\"https://github.com\">GitHub</a></p>
      <h2 {...elementProps[\'h2\']}>Here\'s a code snippet with no interpolations</h2>
      <pre {...elementProps[\'pre\']}><code {...elementProps[\'code\']} className=\"language-bash\">npm install -g yarn<br {...elementProps[\'br\']} /></code></pre>
      <h2 {...elementProps[\'h2\']}>Here\'s a code snippet with things which shouldn\'t be treated as interpolations</h2>
      <pre {...elementProps[\'pre\']}><code {...elementProps[\'code\']} className=\"language-bash\"><span {...elementProps[\'span\']} className=\"hljs-keyword\">function</span> <span {...elementProps[\'span\']} className=\"hljs-function\"><span {...elementProps[\'span\']} className=\"hljs-title\">rbenv</span></span>() {\"{\"}<br {...elementProps[\'br\']} />{\"  \"}RUBY=blah<br {...elementProps[\'br\']} />{\"}\"}<br {...elementProps[\'br\']} /></code></pre>
      <h2 {...elementProps[\'h2\']}>Here\'s a paragraph with a simple interpolation</h2>
      <p {...elementProps[\'p\']}>There are {Object.keys(props).length} props being supplied to this component.</p>
      <h2 {...elementProps[\'h2\']}>Here\'s a code snippet with a simple interpolation</h2>
      <pre {...elementProps[\'pre\']}><code {...elementProps[\'code\']} className=\"language-bash\"><span {...elementProps[\'span\']} className=\"hljs-keyword\">function</span> <span {...elementProps[\'span\']} className=\"hljs-function\"><span {...elementProps[\'span\']} className=\"hljs-title\">rbenv</span></span>() {\"{\"}<br {...elementProps[\'br\']} />{\"  \"}RUBY={props.rubycontent}<br {...elementProps[\'br\']} />{\"}\"}<br {...elementProps[\'br\']} /></code></pre>
      <h2 {...elementProps[\'h2\']}>Here\'s an unhinted code snippet</h2>
      <pre {...elementProps[\'pre\']}><code {...elementProps[\'code\']}><span {...elementProps[\'span\']} className=\"hljs-keyword\">the</span> quick brown fox jumps over <span {...elementProps[\'span\']} className=\"hljs-keyword\">the</span> lazy dog<br {...elementProps[\'br\']} /></code></pre>
      <h2 {...elementProps[\'h2\']}>Here\'s an unhinted snippet with no discernible language</h2>
      <pre {...elementProps[\'pre\']}><code {...elementProps[\'code\']}>)<span {...elementProps[\'span\']} className=\"hljs-comment\">()</span><span {...elementProps[\'span\']} className=\"hljs-comment\">(()</span>)<br {...elementProps[\'br\']} /></code></pre>
      <pre {...elementProps[\'pre\']}><code {...elementProps[\'code\']} className=\"language-bash\">brew tap buildkite/buildkite<br {...elementProps[\'br\']} />brew install --token=<span {...elementProps[\'span\']} className=\"hljs-string\">\'{props.token || \'INSERT-YOUR-AGENT-TOKEN-HERE\'}\'</span> buildkite-agent<br {...elementProps[\'br\']} /><br {...elementProps[\'br\']} /><span {...elementProps[\'span\']} className=\"hljs-function\"><span {...elementProps[\'span\']} className=\"hljs-title\">function</span></span>() {\"{\"}<br {...elementProps[\'br\']} />{\"  \"}ENV=<span {...elementProps[\'span\']} className=\"hljs-string\">\"foo_bar\"</span><br {...elementProps[\'br\']} />{\"}\"}<br {...elementProps[\'br\']} /></code></pre>
      <p {...elementProps[\'p\']}>Let\'s also test interpolation inside other elements. <code {...elementProps[\'code\']}>{ \"foo bar\" }</code></p>
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a webpack config object of \`{"passElementProps":true}\` for component example 1 renders as expected within React 1`] = `
Array [
  "propTypes",
  "defaultProps",
  "title",
  "myArray",
  "anObject",
]
`;

exports[`Webpack loader with a webpack config object of \`{"passElementProps":true}\` for component example 1 renders as expected within React 2`] = `
<div
  className={undefined}
  style={undefined}>
  <h1>
    Markdown template with imports, static attributes and interpolations
  </h1>
  <p>
    This file includes some custom static attributes which should be reflected fine on the resultant object
  </p>
  <p>
    This is a 
    <em>
      Markdown Component
    </em>
     file. Here you can include JSX-style assignment expressions; this component was generated using version 
    0.7.1
     of 
    markdown-component-loader
    !
  </p>
  <p>
    We're importing foo, which is 
    bar
    .
  </p>
  <p>
    We're also adding a react component here: 
    <bar
      style={
        Object {
          "foo": "bar",
        }
      }
      url="https://github.com/ticky/markdown-component-loader/issues" />
  </p>
  <p>
    Another cool thing you can do is use JSX 
    <strong>
      directly
    </strong>
     - here’s an SVG element, used inline: 
    <svg
      style={
        Object {
          "display": "inline",
          "height": "1em",
        }
      }
      viewBox="0 0 304 290">
      <path
        d="M2,111 h300 l-242.7,176.3 92.7,-285.3 92.7,285.3 z"
        fill="none"
        stroke="currentColor"
        strokeWidth="16" />
    </svg>
    .
  </p>
</div>
`;

exports[`Webpack loader with a webpack config object of \`{"passElementProps":true}\` for component example 1 returns the expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.7.1
import foo from \'foo\';
import Bar from \'foo\';
import { bugs, name, version } from \'../package.json\';

MarkdownComponent.propTypes = {
  className: PropTypes.string,
  style: PropTypes.object,
  elementProps: PropTypes.object
};

MarkdownComponent.defaultProps = {
  elementProps: {}
};

MarkdownComponent[\'title\'] = \'a custom title\';

MarkdownComponent[\'myArray\'] = [
  \'foo\',
  \'bar\'
];

MarkdownComponent[\'anObject\'] = {
  \'foo\': \'bar\'
};

function MarkdownComponent(props) {
  const {className, style, elementProps} = props;

  return (
    <div className={className} style={style}>
      <h1 {...elementProps[\'h1\']}>Markdown template with imports, static attributes and interpolations</h1>
      <p {...elementProps[\'p\']}>This file includes some custom static attributes which should be reflected fine on the resultant object</p>
      <p {...elementProps[\'p\']}>This is a <em {...elementProps[\'em\']}>Markdown Component</em> file. Here you can include JSX-style assignment expressions; this component was generated using version { version } of { name }!</p>
      <p {...elementProps[\'p\']}>We\'re importing foo, which is {foo}.</p>
      <p {...elementProps[\'p\']}>We\'re also adding a react component here: {<Bar {...bugs} style={{ foo: \'bar\' }} />}</p>
      <p {...elementProps[\'p\']}>Another cool thing you can do is use JSX <strong {...elementProps[\'strong\']}>directly</strong> - here’s an SVG element, used inline: { <svg {...elementProps[\'svg\']} style={{ display: \'inline\', height: \'1em\' }} viewBox=\"0 0 304 290\"><path {...elementProps[\'path\']} fill=\"none\" stroke=\"currentColor\" strokeWidth=\"16\" d=\"M2,111 h300 l-242.7,176.3 92.7,-285.3 92.7,285.3 z\" /></svg> }.</p>
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a webpack config object of \`{"passElementProps":true}\` for component example 2 renders as expected within React 1`] = `
Array [
  "propTypes",
  "defaultProps",
]
`;

exports[`Webpack loader with a webpack config object of \`{"passElementProps":true}\` for component example 2 renders as expected within React 2`] = `
<div
  className={undefined}
  style={undefined} />
`;

exports[`Webpack loader with a webpack config object of \`{"passElementProps":true}\` for component example 2 returns the expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.7.1

MarkdownComponent.propTypes = {
  className: PropTypes.string,
  style: PropTypes.object,
  elementProps: PropTypes.object
};

MarkdownComponent.defaultProps = {
  elementProps: {}
};

function MarkdownComponent(props) {
  const {className, style, elementProps} = props;

  return (
    <div className={className} style={style}>
      {/* no input given */}
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a webpack config object of \`{}\` for component example 0 renders as expected within React 1`] = `
Array [
  "propTypes",
]
`;

exports[`Webpack loader with a webpack config object of \`{}\` for component example 0 renders as expected within React 2`] = `
<div
  className={undefined}
  style={undefined}>
  <h1>
    Test Document
  </h1>
  <p>
    [[toc]]
  </p>
  <h2>
    Basic Markdown Template
  </h2>
  <p>
    This is a basic Markdown template, with no interpolations going on.
  </p>
  <p>
    This should be
  </p>
  <ul>
    <li>
      easy and;
    </li>
    <li>
      predictable!
    </li>
  </ul>
  <h2>
    Here's a couple of hyperlinks
  </h2>
  <p>
    <a
      href="https://duckduckgo.com">
      https://duckduckgo.com
    </a>
     
    <a
      href="https://github.com">
      GitHub
    </a>
  </p>
  <h2>
    Here's a code snippet with no interpolations
  </h2>
  <pre>
    <code
      className="language-bash">
      npm install -g yarn
      <br />
    </code>
  </pre>
  <h2>
    Here's a code snippet with things which shouldn't be treated as interpolations
  </h2>
  <pre>
    <code
      className="language-bash">
      <span
        className="hljs-keyword">
        function
      </span>
       
      <span
        className="hljs-function">
        <span
          className="hljs-title">
          rbenv
        </span>
      </span>
      () 
      {
      <br />
        
      RUBY=blah
      <br />
      }
      <br />
    </code>
  </pre>
  <h2>
    Here's a paragraph with a simple interpolation
  </h2>
  <p>
    There are 
    0
     props being supplied to this component.
  </p>
  <h2>
    Here's a code snippet with a simple interpolation
  </h2>
  <pre>
    <code
      className="language-bash">
      <span
        className="hljs-keyword">
        function
      </span>
       
      <span
        className="hljs-function">
        <span
          className="hljs-title">
          rbenv
        </span>
      </span>
      () 
      {
      <br />
        
      RUBY=
      <br />
      }
      <br />
    </code>
  </pre>
  <h2>
    Here's an unhinted code snippet
  </h2>
  <pre>
    <code>
      <span
        className="hljs-keyword">
        the
      </span>
       quick brown fox jumps over 
      <span
        className="hljs-keyword">
        the
      </span>
       lazy dog
      <br />
    </code>
  </pre>
  <h2>
    Here's an unhinted snippet with no discernible language
  </h2>
  <pre>
    <code>
      )
      <span
        className="hljs-comment">
        ()
      </span>
      <span
        className="hljs-comment">
        (()
      </span>
      )
      <br />
    </code>
  </pre>
  <pre>
    <code
      className="language-bash">
      brew tap buildkite/buildkite
      <br />
      brew install --token=
      <span
        className="hljs-string">
        '
        INSERT-YOUR-AGENT-TOKEN-HERE
        '
      </span>
       buildkite-agent
      <br />
      <br />
      <span
        className="hljs-function">
        <span
          className="hljs-title">
          function
        </span>
      </span>
      () 
      {
      <br />
        
      ENV=
      <span
        className="hljs-string">
        "foo_bar"
      </span>
      <br />
      }
      <br />
    </code>
  </pre>
  <p>
    Let's also test interpolation inside other elements. 
    <code>
      foo bar
    </code>
  </p>
</div>
`;

exports[`Webpack loader with a webpack config object of \`{}\` for component example 0 returns the expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.7.1

MarkdownComponent.propTypes = {
  className: PropTypes.string,
  style: PropTypes.object
};

function MarkdownComponent(props) {
  const {className, style} = props;

  return (
    <div className={className} style={style}>
      <h1>Test Document</h1>
      <p>[[toc]]</p>
      <h2>Basic Markdown Template</h2>
      <p>This is a basic Markdown template, with no interpolations going on.</p>
      <p>This should be</p>
      <ul>
        <li>easy and;</li>
        <li>predictable!</li>
      </ul>
      <h2>Here\'s a couple of hyperlinks</h2>
      <p><a href=\"https://duckduckgo.com\">https://duckduckgo.com</a> <a href=\"https://github.com\">GitHub</a></p>
      <h2>Here\'s a code snippet with no interpolations</h2>
      <pre><code className=\"language-bash\">npm install -g yarn<br /></code></pre>
      <h2>Here\'s a code snippet with things which shouldn\'t be treated as interpolations</h2>
      <pre><code className=\"language-bash\"><span className=\"hljs-keyword\">function</span> <span className=\"hljs-function\"><span className=\"hljs-title\">rbenv</span></span>() {\"{\"}<br />{\"  \"}RUBY=blah<br />{\"}\"}<br /></code></pre>
      <h2>Here\'s a paragraph with a simple interpolation</h2>
      <p>There are {Object.keys(props).length} props being supplied to this component.</p>
      <h2>Here\'s a code snippet with a simple interpolation</h2>
      <pre><code className=\"language-bash\"><span className=\"hljs-keyword\">function</span> <span className=\"hljs-function\"><span className=\"hljs-title\">rbenv</span></span>() {\"{\"}<br />{\"  \"}RUBY={props.rubycontent}<br />{\"}\"}<br /></code></pre>
      <h2>Here\'s an unhinted code snippet</h2>
      <pre><code><span className=\"hljs-keyword\">the</span> quick brown fox jumps over <span className=\"hljs-keyword\">the</span> lazy dog<br /></code></pre>
      <h2>Here\'s an unhinted snippet with no discernible language</h2>
      <pre><code>)<span className=\"hljs-comment\">()</span><span className=\"hljs-comment\">(()</span>)<br /></code></pre>
      <pre><code className=\"language-bash\">brew tap buildkite/buildkite<br />brew install --token=<span className=\"hljs-string\">\'{props.token || \'INSERT-YOUR-AGENT-TOKEN-HERE\'}\'</span> buildkite-agent<br /><br /><span className=\"hljs-function\"><span className=\"hljs-title\">function</span></span>() {\"{\"}<br />{\"  \"}ENV=<span className=\"hljs-string\">\"foo_bar\"</span><br />{\"}\"}<br /></code></pre>
      <p>Let\'s also test interpolation inside other elements. <code>{ \"foo bar\" }</code></p>
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a webpack config object of \`{}\` for component example 1 renders as expected within React 1`] = `
Array [
  "propTypes",
  "title",
  "myArray",
  "anObject",
]
`;

exports[`Webpack loader with a webpack config object of \`{}\` for component example 1 renders as expected within React 2`] = `
<div
  className={undefined}
  style={undefined}>
  <h1>
    Markdown template with imports, static attributes and interpolations
  </h1>
  <p>
    This file includes some custom static attributes which should be reflected fine on the resultant object
  </p>
  <p>
    This is a 
    <em>
      Markdown Component
    </em>
     file. Here you can include JSX-style assignment expressions; this component was generated using version 
    0.7.1
     of 
    markdown-component-loader
    !
  </p>
  <p>
    We're importing foo, which is 
    bar
    .
  </p>
  <p>
    We're also adding a react component here: 
    <bar
      style={
        Object {
          "foo": "bar",
        }
      }
      url="https://github.com/ticky/markdown-component-loader/issues" />
  </p>
  <p>
    Another cool thing you can do is use JSX 
    <strong>
      directly
    </strong>
     - here’s an SVG element, used inline: 
    <svg
      style={
        Object {
          "display": "inline",
          "height": "1em",
        }
      }
      viewBox="0 0 304 290">
      <path
        d="M2,111 h300 l-242.7,176.3 92.7,-285.3 92.7,285.3 z"
        fill="none"
        stroke="currentColor"
        strokeWidth="16" />
    </svg>
    .
  </p>
</div>
`;

exports[`Webpack loader with a webpack config object of \`{}\` for component example 1 returns the expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.7.1
import foo from \'foo\';
import Bar from \'foo\';
import { bugs, name, version } from \'../package.json\';

MarkdownComponent.propTypes = {
  className: PropTypes.string,
  style: PropTypes.object
};

MarkdownComponent[\'title\'] = \'a custom title\';

MarkdownComponent[\'myArray\'] = [
  \'foo\',
  \'bar\'
];

MarkdownComponent[\'anObject\'] = {
  \'foo\': \'bar\'
};

function MarkdownComponent(props) {
  const {className, style} = props;

  return (
    <div className={className} style={style}>
      <h1>Markdown template with imports, static attributes and interpolations</h1>
      <p>This file includes some custom static attributes which should be reflected fine on the resultant object</p>
      <p>This is a <em>Markdown Component</em> file. Here you can include JSX-style assignment expressions; this component was generated using version { version } of { name }!</p>
      <p>We\'re importing foo, which is {foo}.</p>
      <p>We\'re also adding a react component here: {<Bar {...bugs} style={{ foo: \'bar\' }} />}</p>
      <p>Another cool thing you can do is use JSX <strong>directly</strong> - here’s an SVG element, used inline: { <svg style={{ display: \'inline\', height: \'1em\' }} viewBox=\"0 0 304 290\"><path fill=\"none\" stroke=\"currentColor\" strokeWidth=\"16\" d=\"M2,111 h300 l-242.7,176.3 92.7,-285.3 92.7,285.3 z\" /></svg> }.</p>
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a webpack config object of \`{}\` for component example 2 renders as expected within React 1`] = `
Array [
  "propTypes",
]
`;

exports[`Webpack loader with a webpack config object of \`{}\` for component example 2 renders as expected within React 2`] = `
<div
  className={undefined}
  style={undefined} />
`;

exports[`Webpack loader with a webpack config object of \`{}\` for component example 2 returns the expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.7.1

MarkdownComponent.propTypes = {
  className: PropTypes.string,
  style: PropTypes.object
};

function MarkdownComponent(props) {
  const {className, style} = props;

  return (
    <div className={className} style={style}>
      {/* no input given */}
    </div>
  );
};

export default MarkdownComponent;
"
`;
